/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _groupImporter = __webpack_require__(1);
	
	var groupImporter = _interopRequireWildcard(_groupImporter);
	
	var _jquery = __webpack_require__(133);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	(0, _jquery2.default)('#addGroups').on('click', function () {
	    var groupTimes = document.querySelector('#groupTimes').value;
	    var validToken = document.querySelector('#token').value;
	    groupImporter.importGroups(validToken, groupTimes);
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.addSearchingRoles = exports.importGroups = undefined;
	
	var _superagent = __webpack_require__(2);
	
	var _superagent2 = _interopRequireDefault(_superagent);
	
	var _config = __webpack_require__(8);
	
	var config = _interopRequireWildcard(_config);
	
	var _lodash = __webpack_require__(9);
	
	var _logger = __webpack_require__(11);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _group = __webpack_require__(12);
	
	var _group2 = _interopRequireDefault(_group);
	
	var _jquery = __webpack_require__(133);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var addedGroups = [];
	
	var importGroups = exports.importGroups = function importGroups(token, times) {
	    if (token && times) {
	        (function () {
	            var groups = [];
	            _.times(times, function () {
	                groups.push((0, _group2.default)());
	            });
	            add(groups, groups.length, 0, token);
	        })();
	    } else {
	        (0, _logger2.default)("No token or times!");
	    }
	};
	
	var add = function add(groups, amount, count, token) {
	    if (count <= amount && groups[count]) {
	        _superagent2.default.post(config.addgroup).set('Content-Type', 'application/json').set('Rezi-Api-Version', '1.0').set('Authorization', 'Bearer ' + token).send((0, _group2.default)()).end(function (err, _ref) {
	            var body = _ref.body;
	
	            addedGroups.push(body.GroupId);
	            count++;
	            add(groups, amount, count, token);
	        });
	    } else {
	        (0, _logger2.default)(amount + ' groups added!');
	        addSearchingRoles(addedGroups, token);
	    }
	};
	
	var addSearchingRoles = exports.addSearchingRoles = function addSearchingRoles(groupIds, token) {
	    groupIds = groupIds ? groupIds : config.groupIds;
	    (0, _lodash.forEach)(groupIds, function (id) {
	        _superagent2.default.post(config.addSalesSearch(id)).set('Content-Type', 'application/json').set('Rezi-Api-Version', '1.0').set('Authorization', 'Bearer ' + token).send(config.groupSearchPayLoad).end(function (err, _ref2) {
	            var body = _ref2.body;
	
	            (0, _logger2.default)('Group Searching roles added!');
	        });
	    });
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */
	
	var Emitter = __webpack_require__(3);
	var reduce = __webpack_require__(4);
	var requestBase = __webpack_require__(5);
	var isObject = __webpack_require__(6);
	
	/**
	 * Root reference for iframes.
	 */
	
	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}
	
	/**
	 * Noop.
	 */
	
	function noop(){};
	
	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isHost(obj) {
	  var str = {}.toString.call(obj);
	
	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Expose `request`.
	 */
	
	var request = module.exports = __webpack_require__(7).bind(null, Request);
	
	/**
	 * Determine XHR.
	 */
	
	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};
	
	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */
	
	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };
	
	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */
	
	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}
	
	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */
	
	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}
	
	/**
	 * Expose serialization method.
	 */
	
	 request.serializeObject = serialize;
	
	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */
	
	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;
	
	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }
	
	  return obj;
	}
	
	/**
	 * Expose parser.
	 */
	
	request.parseString = parseString;
	
	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */
	
	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};
	
	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */
	
	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };
	
	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */
	
	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};
	
	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;
	
	  lines.pop(); // trailing CRLF
	
	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }
	
	  return fields;
	}
	
	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */
	
	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}
	
	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	function type(str){
	  return str.split(/ *; */).shift();
	};
	
	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();
	
	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};
	
	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */
	
	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}
	
	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};
	
	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */
	
	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);
	
	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};
	
	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */
	
	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};
	
	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */
	
	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }
	
	  var type = status / 100 | 0;
	
	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;
	
	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;
	
	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};
	
	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */
	
	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;
	
	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;
	
	  return err;
	};
	
	/**
	 * Expose `Response`.
	 */
	
	request.Response = Response;
	
	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */
	
	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;
	
	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }
	
	    self.emit('response', res);
	
	    if (err) {
	      return self.callback(err, res);
	    }
	
	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }
	
	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;
	
	    self.callback(new_err, res);
	  });
	}
	
	/**
	 * Mixin `Emitter` and `requestBase`.
	 */
	
	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}
	
	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	
	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};
	
	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};
	
	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }
	
	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;
	
	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};
	
	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/
	
	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};
	
	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};
	
	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};
	
	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];
	
	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }
	
	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};
	
	/**
	 * @deprecated
	 */
	Response.prototype.parse = function serialize(fn){
	  if (root.console) {
	    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
	  }
	  this.serialize(fn);
	  return this;
	};
	
	Response.prototype.serialize = function serialize(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */
	
	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};
	
	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */
	
	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;
	
	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;
	
	  this.callback(err);
	};
	
	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */
	
	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};
	
	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */
	
	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};
	
	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;
	
	  // store callback
	  this._callback = fn || noop;
	
	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;
	
	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }
	
	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };
	
	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }
	
	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }
	
	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }
	
	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }
	
	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;
	
	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }
	
	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }
	
	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }
	
	  // send stuff
	  this.emit('request', this);
	
	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};
	
	
	/**
	 * Expose `Request`.
	 */
	
	request.Request = Request;
	
	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};
	
	request['del'] = del;
	request['delete'] = del;
	
	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */
	
	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */
	
	if (true) {
	  module.exports = Emitter;
	}
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 4 */
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */
	
	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];
	
	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(6);
	
	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};
	
	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */
	
	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};
	
	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */
	
	exports.then = function then(fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}
	
	/**
	 * Allow for extension
	 */
	
	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}
	
	
	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};
	
	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */
	
	exports.getHeader = exports.get;
	
	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};
	
	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};
	
	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	  this._getFormData().append(name, val);
	  return this;
	};


/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isObject(obj) {
	  return null != obj && 'object' == typeof obj;
	}
	
	module.exports = isObject;


/***/ },
/* 7 */
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */
	
	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }
	
	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }
	
	  return new RequestConstructor(method, url);
	}
	
	module.exports = request;


/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var groupSearchPayLoad = {
	    "OwningTeamId": 3,
	    "Criteria": {
	        "BudgetFrom": "0",
	        "BudgetTo": "5000000",
	        "MustHave": {
	            "PropertyTypes": [],
	            "PropertyTags": [],
	            "Regions": []
	        },
	        "ShouldNotHave": {
	            "PropertyTypes": [],
	            "PropertyTags": []
	        },
	        "MustNotHave": { "Regions": [] }
	    },
	    "Grade": {},
	    "Origin": {},
	    "FinancialStatus": {}
	};
	
	var addgroup = 'https://localapi.dezrez.com/api/group/addgroup';
	
	var addSalesSearch = function addSalesSearch(id) {
	    return "https://localapi.dezrez.com/api/group/" + id + "/savesalessearch";
	};
	
	exports.addSalesSearch = addSalesSearch;
	exports.groupSearchPayLoad = groupSearchPayLoad;
	exports.addgroup = addgroup;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * @license
	 * lodash <https://lodash.com/>
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '4.14.0';
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used to stand-in for `undefined` hash values. */
	  var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** Used to compose bitmasks for function metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256,
	      FLIP_FLAG = 512;
	
	  /** Used to compose bitmasks for comparison styles. */
	  var UNORDERED_COMPARE_FLAG = 1,
	      PARTIAL_COMPARE_FLAG = 2;
	
	  /** Used as default options for `_.truncate`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect hot functions by number of calls within a span of milliseconds. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2,
	      LAZY_WHILE_FLAG = 3;
	
	  /** Used as references for various `Number` constants. */
	  var INFINITY = 1 / 0,
	      MAX_SAFE_INTEGER = 9007199254740991,
	      MAX_INTEGER = 1.7976931348623157e+308,
	      NAN = 0 / 0;
	
	  /** Used as references for the maximum length and index of an array. */
	  var MAX_ARRAY_LENGTH = 4294967295,
	      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	  /** Used to associate wrap methods with their bit flags. */
	  var wrapFlags = [
	    ['ary', ARY_FLAG],
	    ['bind', BIND_FLAG],
	    ['bindKey', BIND_KEY_FLAG],
	    ['curry', CURRY_FLAG],
	    ['curryRight', CURRY_RIGHT_FLAG],
	    ['flip', FLIP_FLAG],
	    ['partial', PARTIAL_FLAG],
	    ['partialRight', PARTIAL_RIGHT_FLAG],
	    ['rearg', REARG_FLAG]
	  ];
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      genTag = '[object GeneratorFunction]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      promiseTag = '[object Promise]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      symbolTag = '[object Symbol]',
	      weakMapTag = '[object WeakMap]',
	      weakSetTag = '[object WeakSet]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      dataViewTag = '[object DataView]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(\.|\[\])(?:\4|$))/g;
	
	  /**
	   * Used to match `RegExp`
	   * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	   */
	  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
	      reHasRegExpChar = RegExp(reRegExpChar.source);
	
	  /** Used to match leading and trailing whitespace. */
	  var reTrim = /^\s+|\s+$/g,
	      reTrimStart = /^\s+/,
	      reTrimEnd = /\s+$/;
	
	  /** Used to match wrap detail comments. */
	  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	      reSplitDetails = /,? & /;
	
	  /** Used to match non-compound words composed of alphanumeric characters. */
	  var reBasicWord = /[a-zA-Z0-9]+/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /**
	   * Used to match
	   * [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components).
	   */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0x/i;
	
	  /** Used to detect bad signed hexadecimal string values. */
	  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	  /** Used to detect binary string values. */
	  var reIsBinary = /^0b[01]+$/i;
	
	  /** Used to detect host constructors (Safari). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect octal string values. */
	  var reIsOctal = /^0o[0-7]+$/i;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to compose unicode character classes. */
	  var rsAstralRange = '\\ud800-\\udfff',
	      rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
	      rsComboSymbolsRange = '\\u20d0-\\u20f0',
	      rsDingbatRange = '\\u2700-\\u27bf',
	      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	      rsPunctuationRange = '\\u2000-\\u206f',
	      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	      rsVarRange = '\\ufe0e\\ufe0f',
	      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
	
	  /** Used to compose unicode capture groups. */
	  var rsApos = "['\u2019]",
	      rsAstral = '[' + rsAstralRange + ']',
	      rsBreak = '[' + rsBreakRange + ']',
	      rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
	      rsDigits = '\\d+',
	      rsDingbat = '[' + rsDingbatRange + ']',
	      rsLower = '[' + rsLowerRange + ']',
	      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	      rsFitz = '\\ud83c[\\udffb-\\udfff]',
	      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	      rsNonAstral = '[^' + rsAstralRange + ']',
	      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	      rsUpper = '[' + rsUpperRange + ']',
	      rsZWJ = '\\u200d';
	
	  /** Used to compose unicode regexes. */
	  var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
	      rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
	      rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	      rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	      reOptMod = rsModifier + '?',
	      rsOptVar = '[' + rsVarRange + ']?',
	      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	      rsSeq = rsOptVar + reOptMod + rsOptJoin,
	      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
	      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
	
	  /** Used to match apostrophes. */
	  var reApos = RegExp(rsApos, 'g');
	
	  /**
	   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	   */
	  var reComboMark = RegExp(rsCombo, 'g');
	
	  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	  var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
	
	  /** Used to match complex or compound words. */
	  var reComplexWord = RegExp([
	    rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
	    rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
	    rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
	    rsUpper + '+' + rsOptUpperContr,
	    rsDigits,
	    rsEmoji
	  ].join('|'), 'g');
	
	  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	  var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
	
	  /** Used to detect strings that need a more robust regexp to match words. */
	  var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
	    'Promise', 'Reflect', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError',
	    'Uint8Array', 'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	  typedArrayTags[setTag] = typedArrayTags[stringTag] =
	  typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	  cloneableTags[boolTag] = cloneableTags[dateTag] =
	  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	  cloneableTags[int32Tag] = cloneableTags[mapTag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[setTag] =
	  cloneableTags[stringTag] = cloneableTags[symbolTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Built-in method references without a dependency on `root`. */
	  var freeParseFloat = parseFloat,
	      freeParseInt = parseInt;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	  /** Used as a reference to the global object. */
	  var root = freeGlobal || freeSelf || Function('return this')();
	
	  /** Detect free variable `exports`. */
	  var freeExports = freeGlobal && typeof exports == 'object' && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = freeExports && typeof module == 'object' && module;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports;
	
	  /** Detect free variable `process` from Node.js. */
	  var freeProcess = moduleExports && freeGlobal.process;
	
	  /** Used to access faster Node.js helpers. */
	  var nodeUtil = (function() {
	    try {
	      return freeProcess && freeProcess.binding('util');
	    } catch (e) {}
	  }());
	
	  /* Node.js helper references. */
	  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
	      nodeIsDate = nodeUtil && nodeUtil.isDate,
	      nodeIsMap = nodeUtil && nodeUtil.isMap,
	      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
	      nodeIsSet = nodeUtil && nodeUtil.isSet,
	      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Adds the key-value `pair` to `map`.
	   *
	   * @private
	   * @param {Object} map The map to modify.
	   * @param {Array} pair The key-value pair to add.
	   * @returns {Object} Returns `map`.
	   */
	  function addMapEntry(map, pair) {
	    // Don't return `map.set` because it's not chainable in IE 11.
	    map.set(pair[0], pair[1]);
	    return map;
	  }
	
	  /**
	   * Adds `value` to `set`.
	   *
	   * @private
	   * @param {Object} set The set to modify.
	   * @param {*} value The value to add.
	   * @returns {Object} Returns `set`.
	   */
	  function addSetEntry(set, value) {
	    // Don't return `set.add` because it's not chainable in IE 11.
	    set.add(value);
	    return set;
	  }
	
	  /**
	   * A faster alternative to `Function#apply`, this function invokes `func`
	   * with the `this` binding of `thisArg` and the arguments of `args`.
	   *
	   * @private
	   * @param {Function} func The function to invoke.
	   * @param {*} thisArg The `this` binding of `func`.
	   * @param {Array} args The arguments to invoke `func` with.
	   * @returns {*} Returns the result of `func`.
	   */
	  function apply(func, thisArg, args) {
	    switch (args.length) {
	      case 0: return func.call(thisArg);
	      case 1: return func.call(thisArg, args[0]);
	      case 2: return func.call(thisArg, args[0], args[1]);
	      case 3: return func.call(thisArg, args[0], args[1], args[2]);
	    }
	    return func.apply(thisArg, args);
	  }
	
	  /**
	   * A specialized version of `baseAggregator` for arrays.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} setter The function to set `accumulator` values.
	   * @param {Function} iteratee The iteratee to transform keys.
	   * @param {Object} accumulator The initial aggregated object.
	   * @returns {Function} Returns `accumulator`.
	   */
	  function arrayAggregator(array, setter, iteratee, accumulator) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    while (++index < length) {
	      var value = array[index];
	      setter(accumulator, value, iteratee(value), array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.forEach` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEach(array, iteratee) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    while (++index < length) {
	      if (iteratee(array[index], index, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.forEachRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayEachRight(array, iteratee) {
	    var length = array ? array.length : 0;
	
	    while (length--) {
	      if (iteratee(array[length], length, array) === false) {
	        break;
	      }
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.every` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if all elements pass the predicate check,
	   *  else `false`.
	   */
	  function arrayEvery(array, predicate) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    while (++index < length) {
	      if (!predicate(array[index], index, array)) {
	        return false;
	      }
	    }
	    return true;
	  }
	
	  /**
	   * A specialized version of `_.filter` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {Array} Returns the new filtered array.
	   */
	  function arrayFilter(array, predicate) {
	    var index = -1,
	        length = array ? array.length : 0,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (predicate(value, index, array)) {
	        result[resIndex++] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * A specialized version of `_.includes` for arrays without support for
	   * specifying an index to search from.
	   *
	   * @private
	   * @param {Array} [array] The array to search.
	   * @param {*} target The value to search for.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludes(array, value) {
	    var length = array ? array.length : 0;
	    return !!length && baseIndexOf(array, value, 0) > -1;
	  }
	
	  /**
	   * This function is like `arrayIncludes` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} [array] The array to search.
	   * @param {*} target The value to search for.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {boolean} Returns `true` if `target` is found, else `false`.
	   */
	  function arrayIncludesWith(array, value, comparator) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    while (++index < length) {
	      if (comparator(value, array[index])) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * A specialized version of `_.map` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the new mapped array.
	   */
	  function arrayMap(array, iteratee) {
	    var index = -1,
	        length = array ? array.length : 0,
	        result = Array(length);
	
	    while (++index < length) {
	      result[index] = iteratee(array[index], index, array);
	    }
	    return result;
	  }
	
	  /**
	   * Appends the elements of `values` to `array`.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {Array} values The values to append.
	   * @returns {Array} Returns `array`.
	   */
	  function arrayPush(array, values) {
	    var index = -1,
	        length = values.length,
	        offset = array.length;
	
	    while (++index < length) {
	      array[offset + index] = values[index];
	    }
	    return array;
	  }
	
	  /**
	   * A specialized version of `_.reduce` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the first element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduce(array, iteratee, accumulator, initAccum) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    if (initAccum && length) {
	      accumulator = array[++index];
	    }
	    while (++index < length) {
	      accumulator = iteratee(accumulator, array[index], index, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.reduceRight` for arrays without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} [accumulator] The initial value.
	   * @param {boolean} [initAccum] Specify using the last element of `array` as
	   *  the initial value.
	   * @returns {*} Returns the accumulated value.
	   */
	  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
	    var length = array ? array.length : 0;
	    if (initAccum && length) {
	      accumulator = array[--length];
	    }
	    while (length--) {
	      accumulator = iteratee(accumulator, array[length], length, array);
	    }
	    return accumulator;
	  }
	
	  /**
	   * A specialized version of `_.some` for arrays without support for iteratee
	   * shorthands.
	   *
	   * @private
	   * @param {Array} [array] The array to iterate over.
	   * @param {Function} predicate The function invoked per iteration.
	   * @returns {boolean} Returns `true` if any element passes the predicate check,
	   *  else `false`.
	   */
	  function arraySome(array, predicate) {
	    var index = -1,
	        length = array ? array.length : 0;
	
	    while (++index < length) {
	      if (predicate(array[index], index, array)) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  /**
	   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
	   * without support for iteratee shorthands, which iterates over `collection`
	   * using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the found element or its key, else `undefined`.
	   */
	  function baseFindKey(collection, predicate, eachFunc) {
	    var result;
	    eachFunc(collection, function(value, key, collection) {
	      if (predicate(value, key, collection)) {
	        result = key;
	        return false;
	      }
	    });
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 1 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return baseFindIndex(array, baseIsNaN, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * This function is like `baseIndexOf` except that it accepts a comparator.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @param {Function} comparator The comparator invoked per element.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOfWith(array, value, fromIndex, comparator) {
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (comparator(array[index], value)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isNaN` without support for number objects.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	   */
	  function baseIsNaN(value) {
	    return value !== value;
	  }
	
	  /**
	   * The base implementation of `_.mean` and `_.meanBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the mean.
	   */
	  function baseMean(array, iteratee) {
	    var length = array ? array.length : 0;
	    return length ? (baseSum(array, iteratee) / length) : NAN;
	  }
	
	  /**
	   * The base implementation of `_.property` without support for deep paths.
	   *
	   * @private
	   * @param {string} key The key of the property to get.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function baseProperty(key) {
	    return function(object) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.propertyOf` without support for deep paths.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @returns {Function} Returns the new accessor function.
	   */
	  function basePropertyOf(object) {
	    return function(key) {
	      return object == null ? undefined : object[key];
	    };
	  }
	
	  /**
	   * The base implementation of `_.reduce` and `_.reduceRight`, without support
	   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	   *
	   * @private
	   * @param {Array|Object} collection The collection to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @param {*} accumulator The initial value.
	   * @param {boolean} initAccum Specify using the first or last element of
	   *  `collection` as the initial value.
	   * @param {Function} eachFunc The function to iterate over `collection`.
	   * @returns {*} Returns the accumulated value.
	   */
	  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	    eachFunc(collection, function(value, index, collection) {
	      accumulator = initAccum
	        ? (initAccum = false, value)
	        : iteratee(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }
	
	  /**
	   * The base implementation of `_.sortBy` which uses `comparer` to define the
	   * sort order of `array` and replaces criteria objects with their corresponding
	   * values.
	   *
	   * @private
	   * @param {Array} array The array to sort.
	   * @param {Function} comparer The function to define sort order.
	   * @returns {Array} Returns `array`.
	   */
	  function baseSortBy(array, comparer) {
	    var length = array.length;
	
	    array.sort(comparer);
	    while (length--) {
	      array[length] = array[length].value;
	    }
	    return array;
	  }
	
	  /**
	   * The base implementation of `_.sum` and `_.sumBy` without support for
	   * iteratee shorthands.
	   *
	   * @private
	   * @param {Array} array The array to iterate over.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {number} Returns the sum.
	   */
	  function baseSum(array, iteratee) {
	    var result,
	        index = -1,
	        length = array.length;
	
	    while (++index < length) {
	      var current = iteratee(array[index]);
	      if (current !== undefined) {
	        result = result === undefined ? current : (result + current);
	      }
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.times` without support for iteratee shorthands
	   * or max array length checks.
	   *
	   * @private
	   * @param {number} n The number of times to invoke `iteratee`.
	   * @param {Function} iteratee The function invoked per iteration.
	   * @returns {Array} Returns the array of results.
	   */
	  function baseTimes(n, iteratee) {
	    var index = -1,
	        result = Array(n);
	
	    while (++index < n) {
	      result[index] = iteratee(index);
	    }
	    return result;
	  }
	
	  /**
	   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	   * of key-value pairs for `object` corresponding to the property names of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the key-value pairs.
	   */
	  function baseToPairs(object, props) {
	    return arrayMap(props, function(key) {
	      return [key, object[key]];
	    });
	  }
	
	  /**
	   * The base implementation of `_.unary` without support for storing metadata.
	   *
	   * @private
	   * @param {Function} func The function to cap arguments for.
	   * @returns {Function} Returns the new capped function.
	   */
	  function baseUnary(func) {
	    return function(value) {
	      return func(value);
	    };
	  }
	
	  /**
	   * The base implementation of `_.values` and `_.valuesIn` which creates an
	   * array of `object` property values corresponding to the property names
	   * of `props`.
	   *
	   * @private
	   * @param {Object} object The object to query.
	   * @param {Array} props The property names to get values for.
	   * @returns {Object} Returns the array of property values.
	   */
	  function baseValues(object, props) {
	    return arrayMap(props, function(key) {
	      return object[key];
	    });
	  }
	
	  /**
	   * Checks if a cache value for `key` exists.
	   *
	   * @private
	   * @param {Object} cache The cache to query.
	   * @param {string} key The key of the entry to check.
	   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	   */
	  function cacheHas(cache, key) {
	    return cache.has(key);
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the first unmatched string symbol.
	   */
	  function charsStartIndex(strSymbols, chrSymbols) {
	    var index = -1,
	        length = strSymbols.length;
	
	    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
	   * that is not found in the character symbols.
	   *
	   * @private
	   * @param {Array} strSymbols The string symbols to inspect.
	   * @param {Array} chrSymbols The character symbols to find.
	   * @returns {number} Returns the index of the last unmatched string symbol.
	   */
	  function charsEndIndex(strSymbols, chrSymbols) {
	    var index = strSymbols.length;
	
	    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
	    return index;
	  }
	
	  /**
	   * Gets the number of `placeholder` occurrences in `array`.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {*} placeholder The placeholder to search for.
	   * @returns {number} Returns the placeholder count.
	   */
	  function countHolders(array, placeholder) {
	    var length = array.length,
	        result = 0;
	
	    while (length--) {
	      if (array[length] === placeholder) {
	        result++;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  var deburrLetter = basePropertyOf(deburredLetters);
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  var escapeHtmlChar = basePropertyOf(htmlEscapes);
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the value at `key` of `object`.
	   *
	   * @private
	   * @param {Object} [object] The object to query.
	   * @param {string} key The key of the property to get.
	   * @returns {*} Returns the property value.
	   */
	  function getValue(object, key) {
	    return object == null ? undefined : object[key];
	  }
	
	  /**
	   * Checks if `value` is a host object in IE < 9.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	   */
	  function isHostObject(value) {
	    // Many host objects are `Object` objects that can coerce to strings
	    // despite having improperly defined `toString` methods.
	    var result = false;
	    if (value != null && typeof value.toString != 'function') {
	      try {
	        result = !!(value + '');
	      } catch (e) {}
	    }
	    return result;
	  }
	
	  /**
	   * Converts `iterator` to an array.
	   *
	   * @private
	   * @param {Object} iterator The iterator to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function iteratorToArray(iterator) {
	    var data,
	        result = [];
	
	    while (!(data = iterator.next()).done) {
	      result.push(data.value);
	    }
	    return result;
	  }
	
	  /**
	   * Converts `map` to its key-value pairs.
	   *
	   * @private
	   * @param {Object} map The map to convert.
	   * @returns {Array} Returns the key-value pairs.
	   */
	  function mapToArray(map) {
	    var index = -1,
	        result = Array(map.size);
	
	    map.forEach(function(value, key) {
	      result[++index] = [key, value];
	    });
	    return result;
	  }
	
	  /**
	   * Creates a function that invokes `func` with its first argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function(arg) {
	      return func(transform(arg));
	    };
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = 0,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index];
	      if (value === placeholder || value === PLACEHOLDER) {
	        array[index] = PLACEHOLDER;
	        result[resIndex++] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Converts `set` to an array of its values.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the values.
	   */
	  function setToArray(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = value;
	    });
	    return result;
	  }
	
	  /**
	   * Converts `set` to its value-value pairs.
	   *
	   * @private
	   * @param {Object} set The set to convert.
	   * @returns {Array} Returns the value-value pairs.
	   */
	  function setToPairs(set) {
	    var index = -1,
	        result = Array(set.size);
	
	    set.forEach(function(value) {
	      result[++index] = [value, value];
	    });
	    return result;
	  }
	
	  /**
	   * Gets the number of symbols in `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the string size.
	   */
	  function stringSize(string) {
	    if (!(string && reHasComplexSymbol.test(string))) {
	      return string.length;
	    }
	    var result = reComplexSymbol.lastIndex = 0;
	    while (reComplexSymbol.test(string)) {
	      result++;
	    }
	    return result;
	  }
	
	  /**
	   * Converts `string` to an array.
	   *
	   * @private
	   * @param {string} string The string to convert.
	   * @returns {Array} Returns the converted array.
	   */
	  function stringToArray(string) {
	    return string.match(reComplexSymbol);
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @since 1.1.0
	   * @category Util
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // Use `context` to stub `Date#getTime` use in `_.now`.
	   * var stubbed = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': stubGetTime };
	   *   }
	   * });
	   *
	   * // Create a suped-up `defer` in Node.js.
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;
	
	    /** Built-in constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Math = context.Math,
	        RegExp = context.RegExp,
	        TypeError = context.TypeError;
	
	    /** Used for built-in method references. */
	    var arrayProto = context.Array.prototype,
	        objectProto = context.Object.prototype,
	        stringProto = context.String.prototype;
	
	    /** Used to detect overreaching core-js shims. */
	    var coreJsData = context['__core-js_shared__'];
	
	    /** Used to detect methods masquerading as native. */
	    var maskSrcKey = (function() {
	      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	      return uid ? ('Symbol(src)_1.' + uid) : '';
	    }());
	
	    /** Used to resolve the decompiled source of functions. */
	    var funcToString = context.Function.prototype.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /** Used to infer the `Object` constructor. */
	    var objectCtorString = funcToString.call(Object);
	
	    /**
	     * Used to resolve the
	     * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objectToString = objectProto.toString;
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Built-in value references. */
	    var Buffer = moduleExports ? context.Buffer : undefined,
	        Reflect = context.Reflect,
	        Symbol = context.Symbol,
	        Uint8Array = context.Uint8Array,
	        enumerate = Reflect ? Reflect.enumerate : undefined,
	        iteratorSymbol = Symbol ? Symbol.iterator : undefined,
	        objectCreate = context.Object.create,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        splice = arrayProto.splice,
	        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
	
	    /** Built-in method references that are mockable. */
	    var clearTimeout = function(id) { return context.clearTimeout.call(root, id); },
	        setTimeout = function(func, wait) { return context.setTimeout.call(root, func, wait); };
	
	    /* Built-in method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeFloor = Math.floor,
	        nativeGetPrototype = Object.getPrototypeOf,
	        nativeGetSymbols = Object.getOwnPropertySymbols,
	        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	        nativeIsFinite = context.isFinite,
	        nativeJoin = arrayProto.join,
	        nativeKeys = Object.keys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random,
	        nativeReplace = stringProto.replace,
	        nativeReverse = arrayProto.reverse,
	        nativeSplit = stringProto.split;
	
	    /* Built-in method references that are verified to be native. */
	    var DataView = getNative(context, 'DataView'),
	        Map = getNative(context, 'Map'),
	        Promise = getNative(context, 'Promise'),
	        Set = getNative(context, 'Set'),
	        WeakMap = getNative(context, 'WeakMap'),
	        nativeCreate = getNative(context.Object, 'create');
	
	    /* Used to set `toString` methods. */
	    var defineProperty = (function() {
	      var func = getNative(context.Object, 'defineProperty'),
	          name = getNative.name;
	
	      return (name && name.length > 2) ? func : undefined;
	    }());
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	    var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /** Used to detect maps, sets, and weakmaps. */
	    var dataViewCtorString = toSource(DataView),
	        mapCtorString = toSource(Map),
	        promiseCtorString = toSource(Promise),
	        setCtorString = toSource(Set),
	        weakMapCtorString = toSource(WeakMap);
	
	    /** Used to convert symbols to primitives and strings. */
	    var symbolProto = Symbol ? Symbol.prototype : undefined,
	        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
	        symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit method
	     * chain sequences. Methods that operate on and return arrays, collections,
	     * and functions can be chained together. Methods that retrieve a single value
	     * or may return a primitive value will automatically end the chain sequence
	     * and return the unwrapped value. Otherwise, the value must be unwrapped
	     * with `_#value`.
	     *
	     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	     * enabled using `_.chain`.
	     *
	     * The execution of chained methods is lazy, that is, it's deferred until
	     * `_#value` is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion.
	     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	     * the creation of intermediate arrays and can greatly reduce the number of
	     * iteratee executions. Sections of a chain sequence qualify for shortcut
	     * fusion if the section is applied to an array of at least `200` elements
	     * and any iteratees accept only one argument. The heuristic for whether a
	     * section qualifies for shortcut fusion is subject to change.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	     * `zipObject`, `zipObjectDeep`, and `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	     * `upperFirst`, `value`, and `words`
	     *
	     * @name _
	     * @constructor
	     * @category Seq
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // Returns an unwrapped value.
	     * wrapped.reduce(_.add);
	     * // => 6
	     *
	     * // Returns a wrapped value.
	     * var squares = wrapped.map(square);
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The function whose prototype chain sequence wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable explicit method chain sequences.
	     */
	    function LodashWrapper(value, chainAll) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__chain__ = !!chainAll;
	      this.__index__ = 0;
	      this.__values__ = undefined;
	    }
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type {Object}
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type {RegExp}
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type {string}
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type {Object}
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type {Function}
	         */
	        '_': lodash
	      }
	    };
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	    lodash.prototype.constructor = lodash;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @constructor
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = MAX_ARRAY_LENGTH;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = copyArray(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = copyArray(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = copyArray(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || arrLength < LARGE_ARRAY_SIZE ||
	          (arrLength == length && takeCount == length)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    // Ensure `LazyWrapper` is an instance of `baseLodash`.
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a hash object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Hash(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the hash.
	     *
	     * @private
	     * @name clear
	     * @memberOf Hash
	     */
	    function hashClear() {
	      this.__data__ = nativeCreate ? nativeCreate(null) : {};
	    }
	
	    /**
	     * Removes `key` and its value from the hash.
	     *
	     * @private
	     * @name delete
	     * @memberOf Hash
	     * @param {Object} hash The hash to modify.
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function hashDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }
	
	    /**
	     * Gets the hash value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Hash
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function hashGet(key) {
	      var data = this.__data__;
	      if (nativeCreate) {
	        var result = data[key];
	        return result === HASH_UNDEFINED ? undefined : result;
	      }
	      return hasOwnProperty.call(data, key) ? data[key] : undefined;
	    }
	
	    /**
	     * Checks if a hash value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Hash
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function hashHas(key) {
	      var data = this.__data__;
	      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	    }
	
	    /**
	     * Sets the hash `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Hash
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the hash instance.
	     */
	    function hashSet(key, value) {
	      var data = this.__data__;
	      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	      return this;
	    }
	
	    // Add methods to `Hash`.
	    Hash.prototype.clear = hashClear;
	    Hash.prototype['delete'] = hashDelete;
	    Hash.prototype.get = hashGet;
	    Hash.prototype.has = hashHas;
	    Hash.prototype.set = hashSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an list cache object.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function ListCache(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the list cache.
	     *
	     * @private
	     * @name clear
	     * @memberOf ListCache
	     */
	    function listCacheClear() {
	      this.__data__ = [];
	    }
	
	    /**
	     * Removes `key` and its value from the list cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf ListCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function listCacheDelete(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        return false;
	      }
	      var lastIndex = data.length - 1;
	      if (index == lastIndex) {
	        data.pop();
	      } else {
	        splice.call(data, index, 1);
	      }
	      return true;
	    }
	
	    /**
	     * Gets the list cache value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf ListCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function listCacheGet(key) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      return index < 0 ? undefined : data[index][1];
	    }
	
	    /**
	     * Checks if a list cache value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf ListCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function listCacheHas(key) {
	      return assocIndexOf(this.__data__, key) > -1;
	    }
	
	    /**
	     * Sets the list cache `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf ListCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the list cache instance.
	     */
	    function listCacheSet(key, value) {
	      var data = this.__data__,
	          index = assocIndexOf(data, key);
	
	      if (index < 0) {
	        data.push([key, value]);
	      } else {
	        data[index][1] = value;
	      }
	      return this;
	    }
	
	    // Add methods to `ListCache`.
	    ListCache.prototype.clear = listCacheClear;
	    ListCache.prototype['delete'] = listCacheDelete;
	    ListCache.prototype.get = listCacheGet;
	    ListCache.prototype.has = listCacheHas;
	    ListCache.prototype.set = listCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a map cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function MapCache(entries) {
	      var index = -1,
	          length = entries ? entries.length : 0;
	
	      this.clear();
	      while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	      }
	    }
	
	    /**
	     * Removes all key-value entries from the map.
	     *
	     * @private
	     * @name clear
	     * @memberOf MapCache
	     */
	    function mapCacheClear() {
	      this.__data__ = {
	        'hash': new Hash,
	        'map': new (Map || ListCache),
	        'string': new Hash
	      };
	    }
	
	    /**
	     * Removes `key` and its value from the map.
	     *
	     * @private
	     * @name delete
	     * @memberOf MapCache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function mapCacheDelete(key) {
	      return getMapData(this, key)['delete'](key);
	    }
	
	    /**
	     * Gets the map value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf MapCache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function mapCacheGet(key) {
	      return getMapData(this, key).get(key);
	    }
	
	    /**
	     * Checks if a map value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf MapCache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapCacheHas(key) {
	      return getMapData(this, key).has(key);
	    }
	
	    /**
	     * Sets the map `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf MapCache
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the map cache instance.
	     */
	    function mapCacheSet(key, value) {
	      getMapData(this, key).set(key, value);
	      return this;
	    }
	
	    // Add methods to `MapCache`.
	    MapCache.prototype.clear = mapCacheClear;
	    MapCache.prototype['delete'] = mapCacheDelete;
	    MapCache.prototype.get = mapCacheGet;
	    MapCache.prototype.has = mapCacheHas;
	    MapCache.prototype.set = mapCacheSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates an array cache object to store unique values.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var index = -1,
	          length = values ? values.length : 0;
	
	      this.__data__ = new MapCache;
	      while (++index < length) {
	        this.add(values[index]);
	      }
	    }
	
	    /**
	     * Adds `value` to the array cache.
	     *
	     * @private
	     * @name add
	     * @memberOf SetCache
	     * @alias push
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache instance.
	     */
	    function setCacheAdd(value) {
	      this.__data__.set(value, HASH_UNDEFINED);
	      return this;
	    }
	
	    /**
	     * Checks if `value` is in the array cache.
	     *
	     * @private
	     * @name has
	     * @memberOf SetCache
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `true` if `value` is found, else `false`.
	     */
	    function setCacheHas(value) {
	      return this.__data__.has(value);
	    }
	
	    // Add methods to `SetCache`.
	    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	    SetCache.prototype.has = setCacheHas;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a stack cache object to store key-value pairs.
	     *
	     * @private
	     * @constructor
	     * @param {Array} [entries] The key-value pairs to cache.
	     */
	    function Stack(entries) {
	      this.__data__ = new ListCache(entries);
	    }
	
	    /**
	     * Removes all key-value entries from the stack.
	     *
	     * @private
	     * @name clear
	     * @memberOf Stack
	     */
	    function stackClear() {
	      this.__data__ = new ListCache;
	    }
	
	    /**
	     * Removes `key` and its value from the stack.
	     *
	     * @private
	     * @name delete
	     * @memberOf Stack
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	     */
	    function stackDelete(key) {
	      return this.__data__['delete'](key);
	    }
	
	    /**
	     * Gets the stack value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf Stack
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the entry value.
	     */
	    function stackGet(key) {
	      return this.__data__.get(key);
	    }
	
	    /**
	     * Checks if a stack value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf Stack
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function stackHas(key) {
	      return this.__data__.has(key);
	    }
	
	    /**
	     * Sets the stack `key` to `value`.
	     *
	     * @private
	     * @name set
	     * @memberOf Stack
	     * @param {string} key The key of the value to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns the stack cache instance.
	     */
	    function stackSet(key, value) {
	      var cache = this.__data__;
	      if (cache instanceof ListCache) {
	        var pairs = cache.__data__;
	        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	          pairs.push([key, value]);
	          return this;
	        }
	        cache = this.__data__ = new MapCache(pairs);
	      }
	      cache.set(key, value);
	      return this;
	    }
	
	    // Add methods to `Stack`.
	    Stack.prototype.clear = stackClear;
	    Stack.prototype['delete'] = stackDelete;
	    Stack.prototype.get = stackGet;
	    Stack.prototype.has = stackHas;
	    Stack.prototype.set = stackSet;
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Used by `_.defaults` to customize its `_.assignIn` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to assign.
	     * @param {Object} object The parent object of `objValue`.
	     * @returns {*} Returns the value to assign.
	     */
	    function assignInDefaults(objValue, srcValue, key, object) {
	      if (objValue === undefined ||
	          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        return srcValue;
	      }
	      return objValue;
	    }
	
	    /**
	     * This function is like `assignValue` except that it doesn't assign
	     * `undefined` values.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignMergeValue(object, key, value) {
	      if ((value !== undefined && !eq(object[key], value)) ||
	          (typeof key == 'number' && value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }
	
	    /**
	     * Assigns `value` to `key` of `object` if the existing value is not equivalent
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {string} key The key of the property to assign.
	     * @param {*} value The value to assign.
	     */
	    function assignValue(object, key, value) {
	      var objValue = object[key];
	      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	          (value === undefined && !(key in object))) {
	        object[key] = value;
	      }
	    }
	
	    /**
	     * Gets the index at which the `key` is found in `array` of key-value pairs.
	     *
	     * @private
	     * @param {Array} array The array to search.
	     * @param {*} key The key to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     */
	    function assocIndexOf(array, key) {
	      var length = array.length;
	      while (length--) {
	        if (eq(array[length][0], key)) {
	          return length;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Aggregates elements of `collection` on `accumulator` with keys transformed
	     * by `iteratee` and values set by `setter`.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform keys.
	     * @param {Object} accumulator The initial aggregated object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseAggregator(collection, setter, iteratee, accumulator) {
	      baseEach(collection, function(value, key, collection) {
	        setter(accumulator, value, iteratee(value), collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for multiple sources
	     * or `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return object && copyObject(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `_.at` without support for individual paths.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {string[]} paths The property paths of elements to pick.
	     * @returns {Array} Returns the picked elements.
	     */
	    function baseAt(object, paths) {
	      var index = -1,
	          isNil = object == null,
	          length = paths.length,
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = isNil ? undefined : get(object, paths[index]);
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.clamp` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     */
	    function baseClamp(number, lower, upper) {
	      if (number === number) {
	        if (upper !== undefined) {
	          number = number <= upper ? number : upper;
	        }
	        if (lower !== undefined) {
	          number = number >= lower ? number : lower;
	        }
	      }
	      return number;
	    }
	
	    /**
	     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	     * traversed objects.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {boolean} [isFull] Specify a clone including symbols.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The parent object of `value`.
	     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object, stack) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return copyArray(value, result);
	        }
	      } else {
	        var tag = getTag(value),
	            isFunc = tag == funcTag || tag == genTag;
	
	        if (isBuffer(value)) {
	          return cloneBuffer(value, isDeep);
	        }
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          if (isHostObject(value)) {
	            return object ? value : {};
	          }
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return copySymbols(value, baseAssign(result, value));
	          }
	        } else {
	          if (!cloneableTags[tag]) {
	            return object ? value : {};
	          }
	          result = initCloneByTag(value, tag, baseClone, isDeep);
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stack || (stack = new Stack);
	      var stacked = stack.get(value);
	      if (stacked) {
	        return stacked;
	      }
	      stack.set(value, result);
	
	      if (!isArr) {
	        var props = isFull ? getAllKeys(value) : keys(value);
	      }
	      arrayEach(props || value, function(subValue, key) {
	        if (props) {
	          key = subValue;
	          subValue = value[key];
	        }
	        // Recursively populate clone (susceptible to call stack limits).
	        assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	      });
	      if (!isFull) {
	        stack['delete'](value);
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.conforms` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseConforms(source) {
	      var props = keys(source);
	      return function(object) {
	        return baseConformsTo(object, source, props);
	      };
	    }
	
	    /**
	     * The base implementation of `_.conformsTo` which accepts `props` to check.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     */
	    function baseConformsTo(object, source, props) {
	      var length = props.length;
	      if (object == null) {
	        return !length;
	      }
	      var index = length;
	      while (index--) {
	        var key = props[index],
	            predicate = source[key],
	            value = object[key];
	
	        if ((value === undefined &&
	            !(key in Object(object))) || !predicate(value)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    function baseCreate(proto) {
	      return isObject(proto) ? objectCreate(proto) : {};
	    }
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts `args`
	     * to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Array} args The arguments to provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of methods like `_.difference` without support
	     * for excluding multiple arrays or iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          isCommon = true,
	          length = array.length,
	          result = [],
	          valuesLength = values.length;
	
	      if (!length) {
	        return result;
	      }
	      if (iteratee) {
	        values = arrayMap(values, baseUnary(iteratee));
	      }
	      if (comparator) {
	        includes = arrayIncludesWith;
	        isCommon = false;
	      }
	      else if (values.length >= LARGE_ARRAY_SIZE) {
	        includes = cacheHas;
	        isCommon = false;
	        values = new SetCache(values);
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === computed) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (!includes(values, computed, comparator)) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of methods like `_.max` and `_.min` which accepts a
	     * `comparator` to determine the extremum value.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The iteratee invoked per iteration.
	     * @param {Function} comparator The comparator used to compare values.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(array, iteratee, comparator) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index],
	            current = iteratee(value);
	
	        if (current != null && (computed === undefined
	              ? (current === current && !isSymbol(current))
	              : comparator(current, computed)
	            )) {
	          var computed = current,
	              result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = toInteger(start);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : toInteger(end);
	      if (end < 0) {
	        end += length;
	      }
	      end = start > end ? 0 : toLength(end);
	      while (start < end) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with support for restricting flattening.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {number} depth The maximum recursion depth.
	     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, depth, predicate, isStrict, result) {
	      var index = -1,
	          length = array.length;
	
	      predicate || (predicate = isFlattenable);
	      result || (result = []);
	
	      while (++index < length) {
	        var value = array[index];
	        if (depth > 0 && predicate(value)) {
	          if (depth > 1) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, depth - 1, predicate, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForOwn` which iterates over `object`
	     * properties returned by `keysFunc` and invokes `iteratee` for each property.
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forOwn` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return object && baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return object && baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from `props`.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the function names.
	     */
	    function baseFunctions(object, props) {
	      return arrayFilter(props, function(key) {
	        return isFunction(object[key]);
	      });
	    }
	
	    /**
	     * The base implementation of `_.get` without support for default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[toKey(path[index++])];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @param {Function} symbolsFunc The function to get the symbols of `object`.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	      var result = keysFunc(object);
	      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	    }
	
	    /**
	     * The base implementation of `getTag`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    function baseGetTag(value) {
	      return objectToString.call(value);
	    }
	
	    /**
	     * The base implementation of `_.gt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     */
	    function baseGt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * The base implementation of `_.has` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHas(object, key) {
	      // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	      // that are composed entirely of index properties, return `false` for
	      // `hasOwnProperty` checks of them.
	      return object != null &&
	        (hasOwnProperty.call(object, key) ||
	          (typeof object == 'object' && key in object && getPrototype(object) === null));
	    }
	
	    /**
	     * The base implementation of `_.hasIn` without support for deep paths.
	     *
	     * @private
	     * @param {Object} [object] The object to query.
	     * @param {Array|string} key The key to check.
	     * @returns {boolean} Returns `true` if `key` exists, else `false`.
	     */
	    function baseHasIn(object, key) {
	      return object != null && key in Object(object);
	    }
	
	    /**
	     * The base implementation of `_.inRange` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {number} number The number to check.
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     */
	    function baseInRange(number, start, end) {
	      return number >= nativeMin(start, end) && number < nativeMax(start, end);
	    }
	
	    /**
	     * The base implementation of methods like `_.intersection`, without support
	     * for iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of shared values.
	     */
	    function baseIntersection(arrays, iteratee, comparator) {
	      var includes = comparator ? arrayIncludesWith : arrayIncludes,
	          length = arrays[0].length,
	          othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(othLength),
	          maxLength = Infinity,
	          result = [];
	
	      while (othIndex--) {
	        var array = arrays[othIndex];
	        if (othIndex && iteratee) {
	          array = arrayMap(array, baseUnary(iteratee));
	        }
	        maxLength = nativeMin(array.length, maxLength);
	        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
	          ? new SetCache(othIndex && array)
	          : undefined;
	      }
	      array = arrays[0];
	
	      var index = -1,
	          seen = caches[0];
	
	      outer:
	      while (++index < length && result.length < maxLength) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (!(seen
	              ? cacheHas(seen, computed)
	              : includes(result, computed, comparator)
	            )) {
	          othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if (!(cache
	                  ? cacheHas(cache, computed)
	                  : includes(arrays[othIndex], computed, comparator))
	                ) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.invert` and `_.invertBy` which inverts
	     * `object` with values transformed by `iteratee` and set by `setter`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} setter The function to set `accumulator` values.
	     * @param {Function} iteratee The iteratee to transform values.
	     * @param {Object} accumulator The initial inverted object.
	     * @returns {Function} Returns `accumulator`.
	     */
	    function baseInverter(object, setter, iteratee, accumulator) {
	      baseForOwn(object, function(value, key, object) {
	        setter(accumulator, iteratee(value), key, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `_.invoke` without support for individual
	     * method arguments.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function baseInvoke(object, path, args) {
	      if (!isKey(path, object)) {
	        path = castPath(path);
	        object = parent(object, path);
	        path = last(path);
	      }
	      var func = object == null ? object : object[toKey(path)];
	      return func == null ? undefined : apply(func, object, args);
	    }
	
	    /**
	     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     */
	    function baseIsArrayBuffer(value) {
	      return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
	    }
	
	    /**
	     * The base implementation of `_.isDate` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     */
	    function baseIsDate(value) {
	      return isObjectLike(value) && objectToString.call(value) == dateTag;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` which supports partial comparisons
	     * and tracks traversed objects.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {boolean} [bitmask] The bitmask of comparison flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - Unordered comparison
	     *     2 - Partial comparison
	     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, bitmask, stack) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;
	
	      if (!objIsArr) {
	        objTag = getTag(object);
	        objTag = objTag == argsTag ? objectTag : objTag;
	      }
	      if (!othIsArr) {
	        othTag = getTag(other);
	        othTag = othTag == argsTag ? objectTag : othTag;
	      }
	      var objIsObj = objTag == objectTag && !isHostObject(object),
	          othIsObj = othTag == objectTag && !isHostObject(other),
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && !objIsObj) {
	        stack || (stack = new Stack);
	        return (objIsArr || isTypedArray(object))
	          ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	          : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	      }
	      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          var objUnwrapped = objIsWrapped ? object.value() : object,
	              othUnwrapped = othIsWrapped ? other.value() : other;
	
	          stack || (stack = new Stack);
	          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      stack || (stack = new Stack);
	      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	    }
	
	    /**
	     * The base implementation of `_.isMap` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     */
	    function baseIsMap(value) {
	      return isObjectLike(value) && getTag(value) == mapTag;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Array} matchData The property names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, source, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = Object(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var stack = new Stack;
	          if (customizer) {
	            var result = customizer(objValue, srcValue, key, object, source, stack);
	          }
	          if (!(result === undefined
	                ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	                : result
	              )) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.isNative` without bad shim checks.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     */
	    function baseIsNative(value) {
	      if (!isObject(value) || isMasked(value)) {
	        return false;
	      }
	      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	      return pattern.test(toSource(value));
	    }
	
	    /**
	     * The base implementation of `_.isRegExp` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     */
	    function baseIsRegExp(value) {
	      return isObject(value) && objectToString.call(value) == regexpTag;
	    }
	
	    /**
	     * The base implementation of `_.isSet` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     */
	    function baseIsSet(value) {
	      return isObjectLike(value) && getTag(value) == setTag;
	    }
	
	    /**
	     * The base implementation of `_.isTypedArray` without Node.js optimizations.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     */
	    function baseIsTypedArray(value) {
	      return isObjectLike(value) &&
	        isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	    }
	
	    /**
	     * The base implementation of `_.iteratee`.
	     *
	     * @private
	     * @param {*} [value=_.identity] The value to convert to an iteratee.
	     * @returns {Function} Returns the iteratee.
	     */
	    function baseIteratee(value) {
	      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	      if (typeof value == 'function') {
	        return value;
	      }
	      if (value == null) {
	        return identity;
	      }
	      if (typeof value == 'object') {
	        return isArray(value)
	          ? baseMatchesProperty(value[0], value[1])
	          : baseMatches(value);
	      }
	      return property(value);
	    }
	
	    /**
	     * The base implementation of `_.keys` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    var baseKeys = overArg(nativeKeys, Object);
	
	    /**
	     * The base implementation of `_.keysIn` which doesn't skip the constructor
	     * property of prototypes or treat sparse arrays as dense.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function baseKeysIn(object) {
	      object = object == null ? object : Object(object);
	
	      var result = [];
	      for (var key in object) {
	        result.push(key);
	      }
	      return result;
	    }
	
	    // Fallback for IE < 9 with es6-shim.
	    if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
	      baseKeysIn = function(object) {
	        return iteratorToArray(enumerate(object));
	      };
	    }
	
	    /**
	     * The base implementation of `_.lt` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     */
	    function baseLt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which doesn't clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	      }
	      return function(object) {
	        return object === source || baseIsMatch(object, source, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      if (isKey(path) && isStrictComparable(srcValue)) {
	        return matchesStrictComparable(toKey(path), srcValue);
	      }
	      return function(object) {
	        var objValue = get(object, path);
	        return (objValue === undefined && objValue === srcValue)
	          ? hasIn(object, path)
	          : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for multiple sources.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMerge(object, source, srcIndex, customizer, stack) {
	      if (object === source) {
	        return;
	      }
	      if (!(isArray(source) || isTypedArray(source))) {
	        var props = keysIn(source);
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObject(srcValue)) {
	          stack || (stack = new Stack);
	          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	        }
	        else {
	          var newValue = customizer
	            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	            : undefined;
	
	          if (newValue === undefined) {
	            newValue = srcValue;
	          }
	          assignMergeValue(object, key, newValue);
	        }
	      });
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {number} srcIndex The index of `source`.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     */
	    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	      var objValue = object[key],
	          srcValue = source[key],
	          stacked = stack.get(srcValue);
	
	      if (stacked) {
	        assignMergeValue(object, key, stacked);
	        return;
	      }
	      var newValue = customizer
	        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      var isCommon = newValue === undefined;
	
	      if (isCommon) {
	        newValue = srcValue;
	        if (isArray(srcValue) || isTypedArray(srcValue)) {
	          if (isArray(objValue)) {
	            newValue = objValue;
	          }
	          else if (isArrayLikeObject(objValue)) {
	            newValue = copyArray(objValue);
	          }
	          else {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          if (isArguments(objValue)) {
	            newValue = toPlainObject(objValue);
	          }
	          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	            isCommon = false;
	            newValue = baseClone(srcValue, true);
	          }
	          else {
	            newValue = objValue;
	          }
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, newValue);
	        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	        stack['delete'](srcValue);
	      }
	      assignMergeValue(object, key, newValue);
	    }
	
	    /**
	     * The base implementation of `_.nth` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {number} n The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     */
	    function baseNth(array, n) {
	      var length = array.length;
	      if (!length) {
	        return;
	      }
	      n += n < 0 ? length : 0;
	      return isIndex(n, length) ? array[n] : undefined;
	    }
	
	    /**
	     * The base implementation of `_.orderBy` without param guards.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {string[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseOrderBy(collection, iteratees, orders) {
	      var index = -1;
	      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));
	
	      var result = baseMap(collection, function(value, key, collection) {
	        var criteria = arrayMap(iteratees, function(iteratee) {
	          return iteratee(value);
	        });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.pick` without support for individual
	     * property identifiers.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function basePick(object, props) {
	      object = Object(object);
	      return basePickBy(object, props, function(value, key) {
	        return key in object;
	      });
	    }
	
	    /**
	     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property identifiers to pick from.
	     * @param {Function} predicate The function invoked per property.
	     * @returns {Object} Returns the new object.
	     */
	    function basePickBy(object, props, predicate) {
	      var index = -1,
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key];
	
	        if (predicate(value, key)) {
	          result[key] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     */
	    function basePropertyDeep(path) {
	      return function(object) {
	        return baseGet(object, path);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAllBy` without support for iteratee
	     * shorthands.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAll(array, values, iteratee, comparator) {
	      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	          index = -1,
	          length = values.length,
	          seen = array;
	
	      if (array === values) {
	        values = copyArray(values);
	      }
	      if (iteratee) {
	        seen = arrayMap(array, baseUnary(iteratee));
	      }
	      while (++index < length) {
	        var fromIndex = 0,
	            value = values[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	          if (seen !== array) {
	            splice.call(seen, fromIndex, 1);
	          }
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * indexes or capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0,
	          lastIndex = length - 1;
	
	      while (length--) {
	        var index = indexes[length];
	        if (length == lastIndex || index !== previous) {
	          var previous = index;
	          if (isIndex(index)) {
	            splice.call(array, index, 1);
	          }
	          else if (!isKey(index, array)) {
	            var path = castPath(index),
	                object = parent(array, path);
	
	            if (object != null) {
	              delete object[toKey(last(path))];
	            }
	          }
	          else {
	            delete array[toKey(index)];
	          }
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for returning
	     * floating-point numbers.
	     *
	     * @private
	     * @param {number} lower The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(lower, upper) {
	      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
	    }
	
	    /**
	     * The base implementation of `_.range` and `_.rangeRight` which doesn't
	     * coerce arguments.
	     *
	     * @private
	     * @param {number} start The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} step The value to increment or decrement by.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the range of numbers.
	     */
	    function baseRange(start, end, step, fromRight) {
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (length--) {
	        result[fromRight ? length : ++index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.repeat` which doesn't coerce arguments.
	     *
	     * @private
	     * @param {string} string The string to repeat.
	     * @param {number} n The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     */
	    function baseRepeat(string, n) {
	      var result = '';
	      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        if (n) {
	          string += string;
	        }
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	     *
	     * @private
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     */
	    function baseRest(func, start) {
	      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            array = Array(length);
	
	        while (++index < length) {
	          array[index] = args[start + index];
	        }
	        index = -1;
	        var otherArgs = Array(start + 1);
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = array;
	        return apply(func, this, otherArgs);
	      };
	    }
	
	    /**
	     * The base implementation of `_.set`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseSet(object, path, value, customizer) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = toKey(path[index]);
	        if (isObject(nested)) {
	          var newValue = value;
	          if (index != lastIndex) {
	            var objValue = nested[key];
	            newValue = customizer ? customizer(objValue, key, nested) : undefined;
	            if (newValue === undefined) {
	              newValue = objValue == null
	                ? (isIndex(path[index + 1]) ? [] : {})
	                : objValue;
	            }
	          }
	          assignValue(nested, key, newValue);
	        }
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = end > length ? length : end;
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
	     * performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if (computed !== null && !isSymbol(computed) &&
	              (retHighest ? (computed <= value) : (computed < value))) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return baseSortedIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
	     * which invokes `iteratee` for `value` and each element of `array` to compute
	     * their sort ranking. The iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The iteratee invoked per element.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function baseSortedIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsSymbol = isSymbol(value),
	          valIsUndefined = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            othIsDefined = computed !== undefined,
	            othIsNull = computed === null,
	            othIsReflexive = computed === computed,
	            othIsSymbol = isSymbol(computed);
	
	        if (valIsNaN) {
	          var setLow = retHighest || othIsReflexive;
	        } else if (valIsUndefined) {
	          setLow = othIsReflexive && (retHighest || othIsDefined);
	        } else if (valIsNull) {
	          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
	        } else if (valIsSymbol) {
	          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
	        } else if (othIsNull || othIsSymbol) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
	     * support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseSortedUniq(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        if (!index || !eq(computed, seen)) {
	          var seen = computed;
	          result[resIndex++] = value === 0 ? 0 : value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.toNumber` which doesn't ensure correct
	     * conversions of binary, hexadecimal, or octal string values.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     */
	    function baseToNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      return +value;
	    }
	
	    /**
	     * The base implementation of `_.toString` which doesn't convert nullish
	     * values to empty strings.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     */
	    function baseToString(value) {
	      // Exit early for strings to avoid a performance hit in some environments.
	      if (typeof value == 'string') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return symbolToString ? symbolToString.call(value) : '';
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     */
	    function baseUniq(array, iteratee, comparator) {
	      var index = -1,
	          includes = arrayIncludes,
	          length = array.length,
	          isCommon = true,
	          result = [],
	          seen = result;
	
	      if (comparator) {
	        isCommon = false;
	        includes = arrayIncludesWith;
	      }
	      else if (length >= LARGE_ARRAY_SIZE) {
	        var set = iteratee ? null : createSet(array);
	        if (set) {
	          return setToArray(set);
	        }
	        isCommon = false;
	        includes = cacheHas;
	        seen = new SetCache;
	      }
	      else {
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value) : value;
	
	        value = (comparator || value !== 0) ? value : 0;
	        if (isCommon && computed === computed) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (!includes(seen, computed, comparator)) {
	          if (seen !== result) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.unset`.
	     *
	     * @private
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     */
	    function baseUnset(object, path) {
	      path = isKey(path, object) ? [path] : castPath(path);
	      object = parent(object, path);
	
	      var key = toKey(last(path));
	      return !(object != null && baseHas(object, key)) || delete object[key];
	    }
	
	    /**
	     * The base implementation of `_.update`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to update.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize path creation.
	     * @returns {Object} Returns `object`.
	     */
	    function baseUpdate(object, path, updater, customizer) {
	      return baseSet(object, path, updater(baseGet(object, path)), customizer);
	    }
	
	    /**
	     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
	     * without support for iteratee shorthands.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) &&
	        predicate(array[index], index, array)) {}
	
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to perform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      return arrayReduce(actions, function(result, action) {
	        return action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }, result);
	    }
	
	    /**
	     * The base implementation of methods like `_.xor`, without support for
	     * iteratee shorthands, that accepts an array of arrays to inspect.
	     *
	     * @private
	     * @param {Array} arrays The arrays to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of values.
	     */
	    function baseXor(arrays, iteratee, comparator) {
	      var index = -1,
	          length = arrays.length;
	
	      while (++index < length) {
	        var result = result
	          ? arrayPush(
	              baseDifference(result, arrays[index], iteratee, comparator),
	              baseDifference(arrays[index], result, iteratee, comparator)
	            )
	          : arrays[index];
	      }
	      return (result && result.length) ? baseUniq(result, iteratee, comparator) : [];
	    }
	
	    /**
	     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	     *
	     * @private
	     * @param {Array} props The property identifiers.
	     * @param {Array} values The property values.
	     * @param {Function} assignFunc The function to assign values.
	     * @returns {Object} Returns the new object.
	     */
	    function baseZipObject(props, values, assignFunc) {
	      var index = -1,
	          length = props.length,
	          valsLength = values.length,
	          result = {};
	
	      while (++index < length) {
	        var value = index < valsLength ? values[index] : undefined;
	        assignFunc(result, props[index], value);
	      }
	      return result;
	    }
	
	    /**
	     * Casts `value` to an empty array if it's not an array like object.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array|Object} Returns the cast array-like object.
	     */
	    function castArrayLikeObject(value) {
	      return isArrayLikeObject(value) ? value : [];
	    }
	
	    /**
	     * Casts `value` to `identity` if it's not a function.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Function} Returns cast function.
	     */
	    function castFunction(value) {
	      return typeof value == 'function' ? value : identity;
	    }
	
	    /**
	     * Casts `value` to a path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast property path array.
	     */
	    function castPath(value) {
	      return isArray(value) ? value : stringToPath(value);
	    }
	
	    /**
	     * Casts `array` to a slice if it's needed.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {number} start The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the cast slice.
	     */
	    function castSlice(array, start, end) {
	      var length = array.length;
	      end = end === undefined ? length : end;
	      return (!start && end >= length) ? array : baseSlice(array, start, end);
	    }
	
	    /**
	     * Creates a clone of  `buffer`.
	     *
	     * @private
	     * @param {Buffer} buffer The buffer to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Buffer} Returns the cloned buffer.
	     */
	    function cloneBuffer(buffer, isDeep) {
	      if (isDeep) {
	        return buffer.slice();
	      }
	      var result = new buffer.constructor(buffer.length);
	      buffer.copy(result);
	      return result;
	    }
	
	    /**
	     * Creates a clone of `arrayBuffer`.
	     *
	     * @private
	     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function cloneArrayBuffer(arrayBuffer) {
	      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	      return result;
	    }
	
	    /**
	     * Creates a clone of `dataView`.
	     *
	     * @private
	     * @param {Object} dataView The data view to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned data view.
	     */
	    function cloneDataView(dataView, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	    }
	
	    /**
	     * Creates a clone of `map`.
	     *
	     * @private
	     * @param {Object} map The map to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned map.
	     */
	    function cloneMap(map, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	      return arrayReduce(array, addMapEntry, new map.constructor);
	    }
	
	    /**
	     * Creates a clone of `regexp`.
	     *
	     * @private
	     * @param {Object} regexp The regexp to clone.
	     * @returns {Object} Returns the cloned regexp.
	     */
	    function cloneRegExp(regexp) {
	      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	      result.lastIndex = regexp.lastIndex;
	      return result;
	    }
	
	    /**
	     * Creates a clone of `set`.
	     *
	     * @private
	     * @param {Object} set The set to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned set.
	     */
	    function cloneSet(set, isDeep, cloneFunc) {
	      var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	      return arrayReduce(array, addSetEntry, new set.constructor);
	    }
	
	    /**
	     * Creates a clone of the `symbol` object.
	     *
	     * @private
	     * @param {Object} symbol The symbol object to clone.
	     * @returns {Object} Returns the cloned symbol object.
	     */
	    function cloneSymbol(symbol) {
	      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	    }
	
	    /**
	     * Creates a clone of `typedArray`.
	     *
	     * @private
	     * @param {Object} typedArray The typed array to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the cloned typed array.
	     */
	    function cloneTypedArray(typedArray, isDeep) {
	      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	    }
	
	    /**
	     * Compares values to sort them in ascending order.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {number} Returns the sort order indicator for `value`.
	     */
	    function compareAscending(value, other) {
	      if (value !== other) {
	        var valIsDefined = value !== undefined,
	            valIsNull = value === null,
	            valIsReflexive = value === value,
	            valIsSymbol = isSymbol(value);
	
	        var othIsDefined = other !== undefined,
	            othIsNull = other === null,
	            othIsReflexive = other === other,
	            othIsSymbol = isSymbol(other);
	
	        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	            (valIsNull && othIsDefined && othIsReflexive) ||
	            (!valIsDefined && othIsReflexive) ||
	            !valIsReflexive) {
	          return 1;
	        }
	        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	            (othIsNull && valIsDefined && valIsReflexive) ||
	            (!othIsDefined && valIsReflexive) ||
	            !othIsReflexive) {
	          return -1;
	        }
	      }
	      return 0;
	    }
	
	    /**
	     * Used by `_.orderBy` to compare multiple properties of a value to another
	     * and stable sort them.
	     *
	     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	     * specify an order of "desc" for descending or "asc" for ascending sort order
	     * of corresponding values.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {boolean[]|string[]} orders The order to sort by for each property.
	     * @returns {number} Returns the sort order indicator for `object`.
	     */
	    function compareMultiple(object, other, orders) {
	      var index = -1,
	          objCriteria = object.criteria,
	          othCriteria = other.criteria,
	          length = objCriteria.length,
	          ordersLength = orders.length;
	
	      while (++index < length) {
	        var result = compareAscending(objCriteria[index], othCriteria[index]);
	        if (result) {
	          if (index >= ordersLength) {
	            return result;
	          }
	          var order = orders[index];
	          return result * (order == 'desc' ? -1 : 1);
	        }
	      }
	      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	      // that causes it, under certain circumstances, to provide the same value for
	      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	      // for more details.
	      //
	      // This also ensures a stable sort in V8 and other engines.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	      return object.index - other.index;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersLength = holders.length,
	          leftIndex = -1,
	          leftLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(leftLength + rangeLength),
	          isUncurried = !isCurried;
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[holders[argsIndex]] = args[argsIndex];
	        }
	      }
	      while (rangeLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @params {boolean} [isCurried] Specify composing for a curried function.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders, isCurried) {
	      var argsIndex = -1,
	          argsLength = args.length,
	          holdersIndex = -1,
	          holdersLength = holders.length,
	          rightIndex = -1,
	          rightLength = partials.length,
	          rangeLength = nativeMax(argsLength - holdersLength, 0),
	          result = Array(rangeLength + rightLength),
	          isUncurried = !isCurried;
	
	      while (++argsIndex < rangeLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        if (isUncurried || argsIndex < argsLength) {
	          result[offset + holders[holdersIndex]] = args[argsIndex++];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function copyArray(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property identifiers to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @param {Function} [customizer] The function to customize copied values.
	     * @returns {Object} Returns `object`.
	     */
	    function copyObject(source, props, object, customizer) {
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	
	        var newValue = customizer
	          ? customizer(object[key], source[key], key, object, source)
	          : undefined;
	
	        assignValue(object, key, newValue === undefined ? source[key] : newValue);
	      }
	      return object;
	    }
	
	    /**
	     * Copies own symbol properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy symbols from.
	     * @param {Object} [object={}] The object to copy symbols to.
	     * @returns {Object} Returns `object`.
	     */
	    function copySymbols(source, object) {
	      return copyObject(source, getSymbols(source), object);
	    }
	
	    /**
	     * Creates a function like `_.groupBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} [initializer] The accumulator object initializer.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};
	
	        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
	      };
	    }
	
	    /**
	     * Creates a function like `_.assign`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return baseRest(function(object, sources) {
	        var index = -1,
	            length = sources.length,
	            customizer = length > 1 ? sources[length - 1] : undefined,
	            guard = length > 2 ? sources[2] : undefined;
	
	        customizer = (assigner.length > 3 && typeof customizer == 'function')
	          ? (length--, customizer)
	          : undefined;
	
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        object = Object(object);
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, index, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        if (collection == null) {
	          return collection;
	        }
	        if (!isArrayLike(collection)) {
	          return eachFunc(collection, iteratee);
	        }
	        var length = collection.length,
	            index = fromRight ? length : -1,
	            iterable = Object(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var index = -1,
	            iterable = Object(object),
	            props = keysFunc(object),
	            length = props.length;
	
	        while (length--) {
	          var key = props[fromRight ? length : ++index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the optional `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createBind(func, bitmask, thisArg) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.lowerFirst`.
	     *
	     * @private
	     * @param {string} methodName The name of the `String` case method to use.
	     * @returns {Function} Returns the new case function.
	     */
	    function createCaseFirst(methodName) {
	      return function(string) {
	        string = toString(string);
	
	        var strSymbols = reHasComplexSymbol.test(string)
	          ? stringToArray(string)
	          : undefined;
	
	        var chr = strSymbols
	          ? strSymbols[0]
	          : string.charAt(0);
	
	        var trailing = strSymbols
	          ? castSlice(strSymbols, 1).join('')
	          : string.slice(1);
	
	        return chr[methodName]() + trailing;
	      };
	    }
	
	    /**
	     * Creates a function like `_.camelCase`.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtor(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors. See
	        // http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to enable currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {number} arity The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCurry(func, bitmask, arity) {
	      var Ctor = createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length,
	            placeholder = getHolder(wrapper);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	          ? []
	          : replaceHolders(args, placeholder);
	
	        length -= holders.length;
	        if (length < arity) {
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, undefined,
	            args, holders, undefined, undefined, arity - length);
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return apply(fn, this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} findIndexFunc The function to find the collection index.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(findIndexFunc) {
	      return function(collection, predicate, fromIndex) {
	        var iterable = Object(collection);
	        if (!isArrayLike(collection)) {
	          var iteratee = getIteratee(predicate, 3);
	          collection = keys(collection);
	          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	        }
	        var index = findIndexFunc(collection, predicate, fromIndex);
	        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return baseRest(function(funcs) {
	        funcs = baseFlatten(funcs, 1);
	
	        var length = funcs.length,
	            index = length,
	            prereq = LodashWrapper.prototype.thru;
	
	        if (fromRight) {
	          funcs.reverse();
	        }
	        while (index--) {
	          var func = funcs[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
	            var wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? index : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) &&
	                data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) &&
	                !data[4].length && data[9] == 1
	              ) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func))
	              ? wrapper[funcName]()
	              : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 &&
	              isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      });
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with optional `this`
	     * binding of `thisArg`, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided
	     *  to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	          isFlip = bitmask & FLIP_FLAG,
	          Ctor = isBindKey ? undefined : createCtor(func);
	
	      function wrapper() {
	        var length = arguments.length,
	            args = Array(length),
	            index = length;
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (isCurried) {
	          var placeholder = getHolder(wrapper),
	              holdersCount = countHolders(args, placeholder);
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders, isCurried);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	        }
	        length -= holdersCount;
	        if (isCurried && length < arity) {
	          var newHolders = replaceHolders(args, placeholder);
	          return createRecurry(
	            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	            args, newHolders, argPos, ary, arity - length
	          );
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        length = args.length;
	        if (argPos) {
	          args = reorder(args, argPos);
	        } else if (isFlip && length > 1) {
	          args.reverse();
	        }
	        if (isAry && ary < length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtor(fn);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a function like `_.invertBy`.
	     *
	     * @private
	     * @param {Function} setter The function to set accumulator values.
	     * @param {Function} toIteratee The function to resolve iteratees.
	     * @returns {Function} Returns the new inverter function.
	     */
	    function createInverter(setter, toIteratee) {
	      return function(object, iteratee) {
	        return baseInverter(object, setter, toIteratee(iteratee), {});
	      };
	    }
	
	    /**
	     * Creates a function that performs a mathematical operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @param {number} [defaultValue] The value used for `undefined` arguments.
	     * @returns {Function} Returns the new mathematical operation function.
	     */
	    function createMathOperation(operator, defaultValue) {
	      return function(value, other) {
	        var result;
	        if (value === undefined && other === undefined) {
	          return defaultValue;
	        }
	        if (value !== undefined) {
	          result = value;
	        }
	        if (other !== undefined) {
	          if (result === undefined) {
	            return other;
	          }
	          if (typeof value == 'string' || typeof other == 'string') {
	            value = baseToString(value);
	            other = baseToString(other);
	          } else {
	            value = baseToNumber(value);
	            other = baseToNumber(other);
	          }
	          result = operator(value, other);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function like `_.over`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over iteratees.
	     * @returns {Function} Returns the new over function.
	     */
	    function createOver(arrayFunc) {
	      return baseRest(function(iteratees) {
	        iteratees = (iteratees.length == 1 && isArray(iteratees[0]))
	          ? arrayMap(iteratees[0], baseUnary(getIteratee()))
	          : arrayMap(baseFlatten(iteratees, 1), baseUnary(getIteratee()));
	
	        return baseRest(function(args) {
	          var thisArg = this;
	          return arrayFunc(iteratees, function(iteratee) {
	            return apply(iteratee, thisArg, args);
	          });
	        });
	      });
	    }
	
	    /**
	     * Creates the padding for `string` based on `length`. The `chars` string
	     * is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {number} length The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padding for `string`.
	     */
	    function createPadding(length, chars) {
	      chars = chars === undefined ? ' ' : baseToString(chars);
	
	      var charsLength = chars.length;
	      if (charsLength < 2) {
	        return charsLength ? baseRepeat(chars, length) : chars;
	      }
	      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
	      return reHasComplexSymbol.test(chars)
	        ? castSlice(stringToArray(result), 0, length).join('')
	        : result.slice(0, length);
	    }
	
	    /**
	     * Creates a function that wraps `func` to invoke it with the `this` binding
	     * of `thisArg` and `partials` prepended to the arguments it receives.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to
	     *  the new function.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createPartial(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtor(func);
	
	      function wrapper() {
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength),
	            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        return apply(fn, isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.range` or `_.rangeRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new range function.
	     */
	    function createRange(fromRight) {
	      return function(start, end, step) {
	        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	          end = step = undefined;
	        }
	        // Ensure the sign of `-0` is preserved.
	        start = toNumber(start);
	        start = start === start ? start : 0;
	        if (end === undefined) {
	          end = start;
	          start = 0;
	        } else {
	          end = toNumber(end) || 0;
	        }
	        step = step === undefined ? (start < end ? 1 : -1) : (toNumber(step) || 0);
	        return baseRange(start, end, step, fromRight);
	      };
	    }
	
	    /**
	     * Creates a function that performs a relational operation on two values.
	     *
	     * @private
	     * @param {Function} operator The function to perform the operation.
	     * @returns {Function} Returns the new relational operation function.
	     */
	    function createRelationalOperation(operator) {
	      return function(value, other) {
	        if (!(typeof value == 'string' && typeof other == 'string')) {
	          value = toNumber(value);
	          other = toNumber(other);
	        }
	        return operator(value, other);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` to continue currying.
	     *
	     * @private
	     * @param {Function} func The function to wrap.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @param {Function} wrapFunc The function to create the `func` wrapper.
	     * @param {*} placeholder The placeholder value.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to
	     *  the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	      var isCurry = bitmask & CURRY_FLAG,
	          newHolders = isCurry ? holders : undefined,
	          newHoldersRight = isCurry ? undefined : holders,
	          newPartials = isCurry ? partials : undefined,
	          newPartialsRight = isCurry ? undefined : partials;
	
	      bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	      bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
	
	      if (!(bitmask & CURRY_BOUND_FLAG)) {
	        bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	      }
	      var newData = [
	        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
	        newHoldersRight, argPos, ary, arity
	      ];
	
	      var result = wrapFunc.apply(undefined, newData);
	      if (isLaziable(func)) {
	        setData(result, newData);
	      }
	      result.placeholder = placeholder;
	      return setWrapToString(result, func, bitmask);
	    }
	
	    /**
	     * Creates a function like `_.round`.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        number = toNumber(number);
	        precision = nativeMin(toInteger(precision), 292);
	        if (precision) {
	          // Shift with exponential notation to avoid floating-point issues.
	          // See [MDN](https://mdn.io/round#Examples) for more details.
	          var pair = (toString(number) + 'e').split('e'),
	              value = func(pair[0] + 'e' + (+pair[1] + precision));
	
	          pair = (toString(value) + 'e').split('e');
	          return +(pair[0] + 'e' + (+pair[1] - precision));
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a set object of `values`.
	     *
	     * @private
	     * @param {Array} values The values to add to the set.
	     * @returns {Object} Returns the new set.
	     */
	    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	      return new Set(values);
	    };
	
	    /**
	     * Creates a `_.toPairs` or `_.toPairsIn` function.
	     *
	     * @private
	     * @param {Function} keysFunc The function to get the keys of a given object.
	     * @returns {Function} Returns the new pairs function.
	     */
	    function createToPairs(keysFunc) {
	      return function(object) {
	        var tag = getTag(object);
	        if (tag == mapTag) {
	          return mapToArray(object);
	        }
	        if (tag == setTag) {
	          return setToPairs(object);
	        }
	        return baseToPairs(object, keysFunc(object));
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to wrap.
	     * @param {number} bitmask The bitmask flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     *   512 - `_.flip`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	      arity = arity === undefined ? arity : toInteger(arity);
	      length -= holders ? holders.length : 0;
	
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func);
	
	      var newData = [
	        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	        argPos, ary, arity
	      ];
	
	      if (data) {
	        mergeData(newData, data);
	      }
	      func = newData[0];
	      bitmask = newData[1];
	      thisArg = newData[2];
	      partials = newData[3];
	      holders = newData[4];
	      arity = newData[9] = newData[9] == null
	        ? (isBindKey ? 0 : func.length)
	        : nativeMax(newData[9] - length, 0);
	
	      if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	        bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	      }
	      if (!bitmask || bitmask == BIND_FLAG) {
	        var result = createBind(func, bitmask, thisArg);
	      } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	        result = createCurry(func, bitmask, arity);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	        result = createPartial(func, bitmask, thisArg, partials);
	      } else {
	        result = createHybrid.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setWrapToString(setter(result, newData), func, bitmask);
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `array` and `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(array);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var index = -1,
	          result = true,
	          seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;
	
	      stack.set(array, other);
	      stack.set(other, array);
	
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, arrValue, index, other, array, stack)
	            : customizer(arrValue, othValue, index, array, other, stack);
	        }
	        if (compared !== undefined) {
	          if (compared) {
	            continue;
	          }
	          result = false;
	          break;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (seen) {
	          if (!arraySome(other, function(othValue, othIndex) {
	                if (!seen.has(othIndex) &&
	                    (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	                  return seen.add(othIndex);
	                }
	              })) {
	            result = false;
	            break;
	          }
	        } else if (!(
	              arrValue === othValue ||
	                equalFunc(arrValue, othValue, customizer, bitmask, stack)
	            )) {
	          result = false;
	          break;
	        }
	      }
	      stack['delete'](array);
	      return result;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	      switch (tag) {
	        case dataViewTag:
	          if ((object.byteLength != other.byteLength) ||
	              (object.byteOffset != other.byteOffset)) {
	            return false;
	          }
	          object = object.buffer;
	          other = other.buffer;
	
	        case arrayBufferTag:
	          if ((object.byteLength != other.byteLength) ||
	              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	            return false;
	          }
	          return true;
	
	        case boolTag:
	        case dateTag:
	        case numberTag:
	          // Coerce booleans to `1` or `0` and dates to milliseconds.
	          // Invalid dates are coerced to `NaN`.
	          return eq(+object, +other);
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings, primitives and objects,
	          // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring
	          // for more details.
	          return object == (other + '');
	
	        case mapTag:
	          var convert = mapToArray;
	
	        case setTag:
	          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	          convert || (convert = setToArray);
	
	          if (object.size != other.size && !isPartial) {
	            return false;
	          }
	          // Assume cyclic values are equal.
	          var stacked = stack.get(object);
	          if (stacked) {
	            return stacked == other;
	          }
	          bitmask |= UNORDERED_COMPARE_FLAG;
	
	          // Recursively compare objects (susceptible to call stack limits).
	          stack.set(object, other);
	          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	          stack['delete'](object);
	          return result;
	
	        case symbolTag:
	          if (symbolValueOf) {
	            return symbolValueOf.call(object) == symbolValueOf.call(other);
	          }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} customizer The function to customize comparisons.
	     * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	     *  for more details.
	     * @param {Object} stack Tracks traversed `object` and `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	          objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isPartial) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isPartial ? key in other : baseHas(other, key))) {
	          return false;
	        }
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked && stack.get(other)) {
	        return stacked == other;
	      }
	      var result = true;
	      stack.set(object, other);
	      stack.set(other, object);
	
	      var skipCtor = isPartial;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key];
	
	        if (customizer) {
	          var compared = isPartial
	            ? customizer(othValue, objValue, key, other, object, stack)
	            : customizer(objValue, othValue, key, object, other, stack);
	        }
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(compared === undefined
	              ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	              : compared
	            )) {
	          result = false;
	          break;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (result && !skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          result = false;
	        }
	      }
	      stack['delete'](object);
	      return result;
	    }
	
	    /**
	     * Creates an array of own enumerable property names and symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeys(object) {
	      return baseGetAllKeys(object, keys, getSymbols);
	    }
	
	    /**
	     * Creates an array of own and inherited enumerable property names and
	     * symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names and symbols.
	     */
	    function getAllKeysIn(object) {
	      return baseGetAllKeys(object, keysIn, getSymbolsIn);
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = (func.name + ''),
	          array = realNames[result],
	          length = hasOwnProperty.call(realNames, result) ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the argument placeholder value for `func`.
	     *
	     * @private
	     * @param {Function} func The function to inspect.
	     * @returns {*} Returns the placeholder value.
	     */
	    function getHolder(func) {
	      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
	      return object.placeholder;
	    }
	
	    /**
	     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
	     * this function returns the custom method, otherwise it returns `baseIteratee`.
	     * If arguments are provided, the chosen function is invoked with them and
	     * its result is returned.
	     *
	     * @private
	     * @param {*} [value] The value to convert to an iteratee.
	     * @param {number} [arity] The arity of the created iteratee.
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getIteratee() {
	      var result = lodash.iteratee || iteratee;
	      result = result === iteratee ? baseIteratee : result;
	      return arguments.length ? result(arguments[0], arguments[1]) : result;
	    }
	
	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a
	     * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	     * Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');
	
	    /**
	     * Gets the data for `map`.
	     *
	     * @private
	     * @param {Object} map The map to query.
	     * @param {string} key The reference key.
	     * @returns {*} Returns the map data.
	     */
	    function getMapData(map, key) {
	      var data = map.__data__;
	      return isKeyable(key)
	        ? data[typeof key == 'string' ? 'string' : 'hash']
	        : data.map;
	    }
	
	    /**
	     * Gets the property names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = keys(object),
	          length = result.length;
	
	      while (length--) {
	        var key = result[length],
	            value = object[key];
	
	        result[length] = [key, value, isStrictComparable(value)];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = getValue(object, key);
	      return baseIsNative(value) ? value : undefined;
	    }
	
	    /**
	     * Gets the `[[Prototype]]` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {null|Object} Returns the `[[Prototype]]`.
	     */
	    var getPrototype = overArg(nativeGetPrototype, Object);
	
	    /**
	     * Creates an array of the own enumerable symbol properties of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
	
	    /**
	     * Creates an array of the own and inherited enumerable symbol properties
	     * of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbolsIn = !nativeGetSymbols ? getSymbols : function(object) {
	      var result = [];
	      while (object) {
	        arrayPush(result, getSymbols(object));
	        object = getPrototype(object);
	      }
	      return result;
	    };
	
	    /**
	     * Gets the `toStringTag` of `value`.
	     *
	     * @private
	     * @param {*} value The value to query.
	     * @returns {string} Returns the `toStringTag`.
	     */
	    var getTag = baseGetTag;
	
	    // Fallback for data views, maps, sets, and weak maps in IE 11,
	    // for data views in Edge, and promises in Node.js.
	    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	        (Map && getTag(new Map) != mapTag) ||
	        (Promise && getTag(Promise.resolve()) != promiseTag) ||
	        (Set && getTag(new Set) != setTag) ||
	        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	      getTag = function(value) {
	        var result = objectToString.call(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : undefined;
	
	        if (ctorString) {
	          switch (ctorString) {
	            case dataViewCtorString: return dataViewTag;
	            case mapCtorString: return mapTag;
	            case promiseCtorString: return promiseTag;
	            case setCtorString: return setTag;
	            case weakMapCtorString: return weakMapTag;
	          }
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Extracts wrapper details from the `source` body comment.
	     *
	     * @private
	     * @param {string} source The source to inspect.
	     * @returns {Array} Returns the wrapper details.
	     */
	    function getWrapDetails(source) {
	      var match = source.match(reWrapDetails);
	      return match ? match[1].split(reSplitDetails) : [];
	    }
	
	    /**
	     * Checks if `path` exists on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @param {Function} hasFunc The function to check properties.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     */
	    function hasPath(object, path, hasFunc) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var result,
	          index = -1,
	          length = path.length;
	
	      while (++index < length) {
	        var key = toKey(path[index]);
	        if (!(result = object != null && hasFunc(object, key))) {
	          break;
	        }
	        object = object[key];
	      }
	      if (result) {
	        return result;
	      }
	      var length = object ? object.length : 0;
	      return !!length && isLength(length) && isIndex(key, length) &&
	        (isArray(object) || isString(object) || isArguments(object));
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = array.constructor(length);
	
	      // Add properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      return (typeof object.constructor == 'function' && !isPrototype(object))
	        ? baseCreate(getPrototype(object))
	        : {};
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {Function} cloneFunc The function to clone values.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, cloneFunc, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return cloneArrayBuffer(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case dataViewTag:
	          return cloneDataView(object, isDeep);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          return cloneTypedArray(object, isDeep);
	
	        case mapTag:
	          return cloneMap(object, isDeep, cloneFunc);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          return cloneRegExp(object);
	
	        case setTag:
	          return cloneSet(object, isDeep, cloneFunc);
	
	        case symbolTag:
	          return cloneSymbol(object);
	      }
	    }
	
	    /**
	     * Creates an array of index keys for `object` values of arrays,
	     * `arguments` objects, and strings, otherwise `null` is returned.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array|null} Returns index keys, else `null`.
	     */
	    function indexKeys(object) {
	      var length = object ? object.length : undefined;
	      if (isLength(length) &&
	          (isArray(object) || isString(object) || isArguments(object))) {
	        return baseTimes(length, String);
	      }
	      return null;
	    }
	
	    /**
	     * Inserts wrapper `details` in a comment at the top of the `source` body.
	     *
	     * @private
	     * @param {string} source The source to modify.
	     * @returns {Array} details The details to insert.
	     * @returns {string} Returns the modified source.
	     */
	    function insertWrapDetails(source, details) {
	      var length = details.length,
	          lastIndex = length - 1;
	
	      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	      details = details.join(length > 2 ? ', ' : ' ');
	      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	    }
	
	    /**
	     * Checks if `value` is a flattenable `arguments` object or array.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	     */
	    function isFlattenable(value) {
	      return isArray(value) || isArguments(value) ||
	        !!(spreadableSymbol && value && value[spreadableSymbol])
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return !!length &&
	        (typeof value == 'number' || reIsUint.test(value)) &&
	        (value > -1 && value % 1 == 0 && value < length);
	    }
	
	    /**
	     * Checks if the given arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	     *  else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	            ? (isArrayLike(object) && isIndex(index, object.length))
	            : (type == 'string' && index in object)
	          ) {
	        return eq(object[index], value);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      if (isArray(value)) {
	        return false;
	      }
	      var type = typeof value;
	      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	          value == null || isSymbol(value)) {
	        return true;
	      }
	      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	        (object != null && value in Object(object));
	    }
	
	    /**
	     * Checks if `value` is suitable for use as unique object key.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	     */
	    function isKeyable(value) {
	      var type = typeof value;
	      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	        ? (value !== '__proto__')
	        : (value === null);
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	     *  else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func),
	          other = lodash[funcName];
	
	      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `func` has its source masked.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	     */
	    function isMasked(func) {
	      return !!maskSrcKey && (maskSrcKey in func);
	    }
	
	    /**
	     * Checks if `func` is capable of being masked.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
	     */
	    var isMaskable = coreJsData ? isFunction : stubFalse;
	
	    /**
	     * Checks if `value` is likely a prototype object.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	     */
	    function isPrototype(value) {
	      var Ctor = value && value.constructor,
	          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	      return value === proto;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * A specialized version of `matchesProperty` for source values suitable
	     * for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     */
	    function matchesStrictComparable(key, srcValue) {
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        return object[key] === srcValue &&
	          (srcValue !== undefined || (key in Object(object)));
	      };
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers used to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and
	     * `_.rearg` modify function arguments, making the order in which they are
	     * executed important, preventing the merging of metadata. However, we make
	     * an exception for a safe combined case where curried functions have `_.ary`
	     * and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
	
	      var isCombo =
	        ((srcBitmask == ARY_FLAG) && (bitmask == CURRY_FLAG)) ||
	        ((srcBitmask == ARY_FLAG) && (bitmask == REARG_FLAG) && (data[7].length <= source[8])) ||
	        ((srcBitmask == (ARY_FLAG | REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == CURRY_FLAG));
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = value;
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objValue The destination value.
	     * @param {*} srcValue The source value.
	     * @param {string} key The key of the property to merge.
	     * @param {Object} object The parent object of `objValue`.
	     * @param {Object} source The parent object of `srcValue`.
	     * @param {Object} [stack] Tracks traversed source values and their merged
	     *  counterparts.
	     * @returns {*} Returns the value to assign.
	     */
	    function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	      if (isObject(objValue) && isObject(srcValue)) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        stack.set(srcValue, objValue);
	        baseMerge(objValue, srcValue, undefined, mergeDefaults, stack);
	        stack['delete'](srcValue);
	      }
	      return objValue;
	    }
	
	    /**
	     * Gets the parent value at `path` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path to get the parent value of.
	     * @returns {*} Returns the parent value.
	     */
	    function parent(object, path) {
	      return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = copyArray(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity
	     * function to avoid garbage collection pauses in V8. See
	     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;
	
	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());
	
	    /**
	     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	     * with wrapper details in a comment at the top of the source body.
	     *
	     * @private
	     * @param {Function} wrapper The function to modify.
	     * @param {Function} reference The reference function.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Function} Returns `wrapper`.
	     */
	    var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
	      var source = (reference + '');
	      return defineProperty(wrapper, 'toString', {
	        'configurable': true,
	        'enumerable': false,
	        'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
	      });
	    };
	
	    /**
	     * Converts `string` to a property path array.
	     *
	     * @private
	     * @param {string} string The string to convert.
	     * @returns {Array} Returns the property path array.
	     */
	    var stringToPath = memoize(function(string) {
	      var result = [];
	      toString(string).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    });
	
	    /**
	     * Converts `value` to a string key if it's not a string or symbol.
	     *
	     * @private
	     * @param {*} value The value to inspect.
	     * @returns {string|symbol} Returns the key.
	     */
	    function toKey(value) {
	      if (typeof value == 'string' || isSymbol(value)) {
	        return value;
	      }
	      var result = (value + '');
	      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	    }
	
	    /**
	     * Converts `func` to its source code.
	     *
	     * @private
	     * @param {Function} func The function to process.
	     * @returns {string} Returns the source code.
	     */
	    function toSource(func) {
	      if (func != null) {
	        try {
	          return funcToString.call(func);
	        } catch (e) {}
	        try {
	          return (func + '');
	        } catch (e) {}
	      }
	      return '';
	    }
	
	    /**
	     * Updates wrapper `details` based on `bitmask` flags.
	     *
	     * @private
	     * @returns {Array} details The details to modify.
	     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	     * @returns {Array} Returns `details`.
	     */
	    function updateWrapDetails(details, bitmask) {
	      arrayEach(wrapFlags, function(pair) {
	        var value = '_.' + pair[0];
	        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	          details.push(value);
	        }
	      });
	      return details.sort();
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      if (wrapper instanceof LazyWrapper) {
	        return wrapper.clone();
	      }
	      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
	      result.__actions__ = copyArray(wrapper.__actions__);
	      result.__index__  = wrapper.__index__;
	      result.__values__ = wrapper.__values__;
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `array` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the new array of chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
	        size = 1;
	      } else {
	        size = nativeMax(toInteger(size), 0);
	      }
	      var length = array ? array.length : 0;
	      if (!length || size < 1) {
	        return [];
	      }
	      var index = 0,
	          resIndex = 0,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[resIndex++] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = 0,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[resIndex++] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates a new array concatenating `array` with any additional arrays
	     * and/or values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to concatenate.
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var other = _.concat(array, 2, [3], [[4]]);
	     *
	     * console.log(other);
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    function concat() {
	      var length = arguments.length,
	          args = Array(length ? length - 1 : 0),
	          array = arguments[0],
	          index = length;
	
	      while (index--) {
	        args[index - 1] = arguments[index];
	      }
	      return length
	        ? arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1))
	        : [];
	    }
	
	    /**
	     * Creates an array of `array` values not included in the other given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * **Note:** Unlike `_.pullAll`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.without, _.xor
	     * @example
	     *
	     * _.difference([2, 1], [2, 3]);
	     * // => [1]
	     */
	    var difference = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `iteratee` which
	     * is invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var differenceBy = baseRest(function(array, values) {
	      var iteratee = last(values);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.difference` except that it accepts `comparator`
	     * which is invoked to compare elements of `array` to `values`. Result values
	     * are chosen from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The values to exclude.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     *
	     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }]
	     */
	    var differenceWith = baseRest(function(array, values) {
	      var comparator = last(values);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return isArrayLikeObject(array)
	        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.dropRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropRightWhile(users, ['active', false]);
	     * // => objects for ['barney']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropRightWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.dropWhile(users, function(o) { return !o.active; });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.dropWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.dropWhile(users, ['active', false]);
	     * // => objects for ['pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.dropWhile(users, 'active');
	     * // => objects for ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8, 10], '*', 1, 3);
	     * // => [4, '*', '*', 10]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(o) { return o.user == 'barney'; });
	     * // => 0
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findIndex(users, ['active', false]);
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    function findIndex(array, predicate, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index);
	    }
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
	     * // => 2
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastIndex(users, ['active', false]);
	     * // => 2
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    function findLastIndex(array, predicate, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length - 1;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = fromIndex < 0
	          ? nativeMax(length + index, 0)
	          : nativeMin(index, length - 1);
	      }
	      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
	    }
	
	    /**
	     * Flattens `array` a single level deep.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, [3, [4]], 5]
	     */
	    function flatten(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, 1) : [];
	    }
	
	    /**
	     * Recursively flattens `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, [3, [4]], 5]]);
	     * // => [1, 2, 3, 4, 5]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, INFINITY) : [];
	    }
	
	    /**
	     * Recursively flatten `array` up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * var array = [1, [2, [3, [4]], 5]];
	     *
	     * _.flattenDepth(array, 1);
	     * // => [1, 2, [3, [4]], 5]
	     *
	     * _.flattenDepth(array, 2);
	     * // => [1, 2, 3, [4], 5]
	     */
	    function flattenDepth(array, depth) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(array, depth);
	    }
	
	    /**
	     * The inverse of `_.toPairs`; this method returns an object composed
	     * from key-value `pairs`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} pairs The key-value pairs.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.fromPairs([['a', 1], ['b', 2]]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function fromPairs(pairs) {
	      var index = -1,
	          length = pairs ? pairs.length : 0,
	          result = {};
	
	      while (++index < length) {
	        var pair = pairs[index];
	        result[pair[0]] = pair[1];
	      }
	      return result;
	    }
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias first
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.head([1, 2, 3]);
	     * // => 1
	     *
	     * _.head([]);
	     * // => undefined
	     */
	    function head(array) {
	      return (array && array.length) ? array[0] : undefined;
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it's used as the
	     * offset from the end of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // Search from the `fromIndex`.
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = fromIndex == null ? 0 : toInteger(fromIndex);
	      if (index < 0) {
	        index = nativeMax(length + index, 0);
	      }
	      return baseIndexOf(array, value, index);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }
	
	    /**
	     * Creates an array of unique values that are included in all given arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. The order of result values is determined by the
	     * order they occur in the first array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersection([2, 1], [2, 3]);
	     * // => [2]
	     */
	    var intersection = baseRest(function(arrays) {
	      var mapped = arrayMap(arrays, castArrayLikeObject);
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped)
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `iteratee`
	     * which is invoked for each element of each `arrays` to generate the criterion
	     * by which they're compared. Result values are chosen from the first array.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [2.1]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }]
	     */
	    var intersectionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      if (iteratee === last(mapped)) {
	        iteratee = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, getIteratee(iteratee, 2))
	        : [];
	    });
	
	    /**
	     * This method is like `_.intersection` except that it accepts `comparator`
	     * which is invoked to compare elements of `arrays`. Result values are chosen
	     * from the first array. The comparator is invoked with two arguments:
	     * (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of intersecting values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.intersectionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }]
	     */
	    var intersectionWith = baseRest(function(arrays) {
	      var comparator = last(arrays),
	          mapped = arrayMap(arrays, castArrayLikeObject);
	
	      if (comparator === last(mapped)) {
	        comparator = undefined;
	      } else {
	        mapped.pop();
	      }
	      return (mapped.length && mapped[0] === arrays[0])
	        ? baseIntersection(mapped, undefined, comparator)
	        : [];
	    });
	
	    /**
	     * Converts all elements in `array` into a string separated by `separator`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to convert.
	     * @param {string} [separator=','] The element separator.
	     * @returns {string} Returns the joined string.
	     * @example
	     *
	     * _.join(['a', 'b', 'c'], '~');
	     * // => 'a~b~c'
	     */
	    function join(array, separator) {
	      return array ? nativeJoin.call(array, separator) : '';
	    }
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=array.length-1] The index to search from.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // Search from the `fromIndex`.
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (fromIndex !== undefined) {
	        index = toInteger(fromIndex);
	        index = (
	          index < 0
	            ? nativeMax(length + index, 0)
	            : nativeMin(index, length - 1)
	        ) + 1;
	      }
	      if (value !== value) {
	        return baseFindIndex(array, baseIsNaN, index - 1, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Gets the element at index `n` of `array`. If `n` is negative, the nth
	     * element from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.11.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=0] The index of the element to return.
	     * @returns {*} Returns the nth element of `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     *
	     * _.nth(array, 1);
	     * // => 'b'
	     *
	     * _.nth(array, -2);
	     * // => 'c';
	     */
	    function nth(array, n) {
	      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
	    }
	
	    /**
	     * Removes all given values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	     * to remove elements from an array by predicate.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pull(array, 'a', 'c');
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    var pull = baseRest(pullAll);
	
	    /**
	     * This method is like `_.pull` except that it accepts an array of values to remove.
	     *
	     * **Note:** Unlike `_.difference`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	     *
	     * _.pullAll(array, ['a', 'c']);
	     * console.log(array);
	     * // => ['b', 'b']
	     */
	    function pullAll(array, values) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values)
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `iteratee` which is
	     * invoked for each element of `array` and `values` to generate the criterion
	     * by which they're compared. The iteratee is invoked with one argument: (value).
	     *
	     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
	     *
	     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
	     * console.log(array);
	     * // => [{ 'x': 2 }]
	     */
	    function pullAllBy(array, values, iteratee) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, getIteratee(iteratee, 2))
	        : array;
	    }
	
	    /**
	     * This method is like `_.pullAll` except that it accepts `comparator` which
	     * is invoked to compare elements of `array` to `values`. The comparator is
	     * invoked with two arguments: (arrVal, othVal).
	     *
	     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to remove.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
	     *
	     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
	     * console.log(array);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
	     */
	    function pullAllWith(array, values, comparator) {
	      return (array && array.length && values && values.length)
	        ? basePullAll(array, values, undefined, comparator)
	        : array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to `indexes` and returns an
	     * array of removed elements.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = ['a', 'b', 'c', 'd'];
	     * var pulled = _.pullAt(array, [1, 3]);
	     *
	     * console.log(array);
	     * // => ['a', 'c']
	     *
	     * console.log(pulled);
	     * // => ['b', 'd']
	     */
	    var pullAt = baseRest(function(array, indexes) {
	      indexes = baseFlatten(indexes, 1);
	
	      var length = array ? array.length : 0,
	          result = baseAt(array, indexes);
	
	      basePullAt(array, arrayMap(indexes, function(index) {
	        return isIndex(index, length) ? +index : index;
	      }).sort(compareAscending));
	
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is invoked
	     * with three arguments: (value, index, array).
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
	     * to pull elements from an array by value.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getIteratee(predicate, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Reverses `array` so that the first element becomes the last, the second
	     * element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates `array` and is based on
	     * [`Array#reverse`](https://mdn.io/Array/reverse).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.reverse(array);
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function reverse(array) {
	      return array ? nativeReverse.call(array) : array;
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of
	     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
	     * returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      else {
	        start = start == null ? 0 : toInteger(start);
	        end = end === undefined ? length : toInteger(end);
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     */
	    function sortedIndex(array, value) {
	      return baseSortedIndex(array, value);
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 0
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 0
	     */
	    function sortedIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 1
	     */
	    function sortedIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value);
	        if (index < length && eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
	     * // => 4
	     */
	    function sortedLastIndex(array, value) {
	      return baseSortedIndex(array, value, true);
	    }
	
	    /**
	     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
	     * which is invoked for `value` and each element of `array` to compute their
	     * sort ranking. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * var objects = [{ 'x': 4 }, { 'x': 5 }];
	     *
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
	     * // => 1
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
	     * // => 1
	     */
	    function sortedLastIndexBy(array, value, iteratee) {
	      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
	    }
	
	    /**
	     * This method is like `_.lastIndexOf` except that it performs a binary
	     * search on a sorted `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
	     * // => 3
	     */
	    function sortedLastIndexOf(array, value) {
	      var length = array ? array.length : 0;
	      if (length) {
	        var index = baseSortedIndex(array, value, true) - 1;
	        if (eq(array[index], value)) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * This method is like `_.uniq` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniq([1, 1, 2]);
	     * // => [1, 2]
	     */
	    function sortedUniq(array) {
	      return (array && array.length)
	        ? baseSortedUniq(array)
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniqBy` except that it's designed and optimized
	     * for sorted arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
	     * // => [1.1, 2.3]
	     */
	    function sortedUniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSortedUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.tail([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function tail(array) {
	      return drop(array, 1);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      n = (guard || n === undefined) ? 1 : toInteger(n);
	      n = length - n;
	      return baseSlice(array, n < 0 ? 0 : n, length);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.takeRightWhile(users, function(o) { return !o.active; });
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
	     * // => objects for ['pebbles']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeRightWhile(users, ['active', false]);
	     * // => objects for ['fred', 'pebbles']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeRightWhile(users, 'active');
	     * // => []
	     */
	    function takeRightWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is invoked with
	     * three arguments: (value, index, array).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.takeWhile(users, function(o) { return !o.active; });
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.takeWhile(users, { 'user': 'barney', 'active': false });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.takeWhile(users, ['active', false]);
	     * // => objects for ['barney', 'fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.takeWhile(users, 'active');
	     * // => []
	     */
	    function takeWhile(array, predicate) {
	      return (array && array.length)
	        ? baseWhile(array, getIteratee(predicate, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all given arrays using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([2], [1, 2]);
	     * // => [2, 1]
	     */
	    var union = baseRest(function(arrays) {
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which uniqueness is computed. Result values are chosen from the first
	     * array in which the value occurs. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    var unionBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.union` except that it accepts `comparator` which
	     * is invoked to compare elements of `arrays`. Result values are chosen from
	     * the first array in which the value occurs. The comparator is invoked
	     * with two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.unionWith(objects, others, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var unionWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurrence of each
	     * element is kept.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     */
	    function uniq(array) {
	      return (array && array.length)
	        ? baseUniq(array)
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * uniqueness is computed. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
	     * // => [2.1, 1.2]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniqBy(array, iteratee) {
	      return (array && array.length)
	        ? baseUniq(array, getIteratee(iteratee, 2))
	        : [];
	    }
	
	    /**
	     * This method is like `_.uniq` except that it accepts `comparator` which
	     * is invoked to compare elements of `array`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new duplicate free array.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.uniqWith(objects, _.isEqual);
	     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
	     */
	    function uniqWith(array, comparator) {
	      return (array && array.length)
	        ? baseUniq(array, undefined, comparator)
	        : [];
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.2.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['a', 'b'], [1, 2], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var length = 0;
	      array = arrayFilter(array, function(group) {
	        if (isArrayLikeObject(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      return baseTimes(length, function(index) {
	        return arrayMap(array, baseProperty(index));
	      });
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts `iteratee` to specify
	     * how regrouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee=_.identity] The function to combine
	     *  regrouped values.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      return arrayMap(result, function(group) {
	        return apply(iteratee, undefined, group);
	      });
	    }
	
	    /**
	     * Creates an array excluding all given values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.pull`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.xor
	     * @example
	     *
	     * _.without([2, 1, 2, 3], 1, 2);
	     * // => [3]
	     */
	    var without = baseRest(function(array, values) {
	      return isArrayLikeObject(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the
	     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the given arrays. The order of result values is determined by the order
	     * they occur in the arrays.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of filtered values.
	     * @see _.difference, _.without
	     * @example
	     *
	     * _.xor([2, 1], [2, 3]);
	     * // => [1, 3]
	     */
	    var xor = baseRest(function(arrays) {
	      return baseXor(arrayFilter(arrays, isArrayLikeObject));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `iteratee` which is
	     * invoked for each element of each `arrays` to generate the criterion by
	     * which by which they're compared. The iteratee is invoked with one argument:
	     * (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
	     * // => [1.2, 3.4]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 2 }]
	     */
	    var xorBy = baseRest(function(arrays) {
	      var iteratee = last(arrays);
	      if (isArrayLikeObject(iteratee)) {
	        iteratee = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
	    });
	
	    /**
	     * This method is like `_.xor` except that it accepts `comparator` which is
	     * invoked to compare elements of `arrays`. The comparator is invoked with
	     * two arguments: (arrVal, othVal).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @param {Function} [comparator] The comparator invoked per element.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
	     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
	     *
	     * _.xorWith(objects, others, _.isEqual);
	     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
	     */
	    var xorWith = baseRest(function(arrays) {
	      var comparator = last(arrays);
	      if (isArrayLikeObject(comparator)) {
	        comparator = undefined;
	      }
	      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
	    });
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the
	     * first elements of the given arrays, the second of which contains the
	     * second elements of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['a', 'b'], [1, 2], [true, false]);
	     * // => [['a', 1, true], ['b', 2, false]]
	     */
	    var zip = baseRest(unzip);
	
	    /**
	     * This method is like `_.fromPairs` except that it accepts two arrays,
	     * one of property identifiers and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.4.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject(['a', 'b'], [1, 2]);
	     * // => { 'a': 1, 'b': 2 }
	     */
	    function zipObject(props, values) {
	      return baseZipObject(props || [], values || [], assignValue);
	    }
	
	    /**
	     * This method is like `_.zipObject` except that it supports property paths.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Array
	     * @param {Array} [props=[]] The property identifiers.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
	     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
	     */
	    function zipObjectDeep(props, values) {
	      return baseZipObject(props || [], values || [], baseSet);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts `iteratee` to specify
	     * how grouped values should be combined. The iteratee is invoked with the
	     * elements of each group: (...group).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee=_.identity] The function to combine grouped values.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
	     *   return a + b + c;
	     * });
	     * // => [111, 222]
	     */
	    var zipWith = baseRest(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 1 ? arrays[length - 1] : undefined;
	
	      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
	      return unzipWith(arrays, iteratee);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
	     * chain sequences enabled. The result of such sequences must be unwrapped
	     * with `_#value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Seq
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _
	     *   .chain(users)
	     *   .sortBy('age')
	     *   .map(function(o) {
	     *     return o.user + ' is ' + o.age;
	     *   })
	     *   .head()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor
	     * is invoked with one argument; (value). The purpose of this method is to
	     * "tap into" a method chain sequence in order to modify intermediate results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    // Mutate input array.
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor) {
	      interceptor(value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     * The purpose of this method is to "pass thru" values replacing intermediate
	     * results in a method chain sequence.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Seq
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor) {
	      return interceptor(value);
	    }
	
	    /**
	     * This method is the wrapper version of `_.at`.
	     *
	     * @name at
	     * @memberOf _
	     * @since 1.0.0
	     * @category Seq
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _(object).at(['a[0].b.c', 'a[1]']).value();
	     * // => [3, 4]
	     */
	    var wrapperAt = baseRest(function(paths) {
	      paths = baseFlatten(paths, 1);
	      var length = paths.length,
	          start = length ? paths[0] : 0,
	          value = this.__wrapped__,
	          interceptor = function(object) { return baseAt(object, paths); };
	
	      if (length > 1 || this.__actions__.length ||
	          !(value instanceof LazyWrapper) || !isIndex(start)) {
	        return this.thru(interceptor);
	      }
	      value = value.slice(start, +start + (length ? 1 : 0));
	      value.__actions__.push({
	        'func': thru,
	        'args': [interceptor],
	        'thisArg': undefined
	      });
	      return new LodashWrapper(value, this.__chain__).thru(function(array) {
	        if (length && !array.length) {
	          array.push(undefined);
	        }
	        return array;
	      });
	    });
	
	    /**
	     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
	     *
	     * @name chain
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // A sequence without explicit chaining.
	     * _(users).head();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // A sequence with explicit chaining.
	     * _(users)
	     *   .chain()
	     *   .head()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chain sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Gets the next value on a wrapped object following the
	     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
	     *
	     * @name next
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the next iterator value.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 1 }
	     *
	     * wrapped.next();
	     * // => { 'done': false, 'value': 2 }
	     *
	     * wrapped.next();
	     * // => { 'done': true, 'value': undefined }
	     */
	    function wrapperNext() {
	      if (this.__values__ === undefined) {
	        this.__values__ = toArray(this.value());
	      }
	      var done = this.__index__ >= this.__values__.length,
	          value = done ? undefined : this.__values__[this.__index__++];
	
	      return { 'done': done, 'value': value };
	    }
	
	    /**
	     * Enables the wrapper to be iterable.
	     *
	     * @name Symbol.iterator
	     * @memberOf _
	     * @since 4.0.0
	     * @category Seq
	     * @returns {Object} Returns the wrapper object.
	     * @example
	     *
	     * var wrapped = _([1, 2]);
	     *
	     * wrapped[Symbol.iterator]() === wrapped;
	     * // => true
	     *
	     * Array.from(wrapped);
	     * // => [1, 2]
	     */
	    function wrapperToIterator() {
	      return this;
	    }
	
	    /**
	     * Creates a clone of the chain sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @since 3.2.0
	     * @category Seq
	     * @param {*} value The value to plant.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var wrapped = _([1, 2]).map(square);
	     * var other = wrapped.plant([3, 4]);
	     *
	     * other.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        clone.__index__ = 0;
	        clone.__values__ = undefined;
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * This method is the wrapper version of `_.reverse`.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @since 0.1.0
	     * @category Seq
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({
	          'func': thru,
	          'args': [reverse],
	          'thisArg': undefined
	        });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(reverse);
	    }
	
	    /**
	     * Executes the chain sequence to resolve the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @since 0.1.0
	     * @alias toJSON, valueOf
	     * @category Seq
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the number of times the key was returned by `iteratee`. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': 1, '6': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * Iteration is stopped once `predicate` returns falsey. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.every(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, guard) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * **Note:** Unlike `_.remove`, this method returns a new array.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.reject
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, { 'age': 36, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.filter(users, 'active');
	     * // => objects for ['barney']
	     */
	    function filter(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.find(users, function(o) { return o.age < 40; });
	     * // => object for 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.find(users, { 'age': 1, 'active': true });
	     * // => object for 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.find(users, ['active', false]);
	     * // => object for 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.find(users, 'active');
	     * // => object for 'barney'
	     */
	    var find = createFind(findIndex);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to search.
	     * @param {Function} [predicate=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [fromIndex=collection.length-1] The index to search from.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(findLastIndex);
	
	    /**
	     * Creates a flattened array of values by running each element in `collection`
	     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [n, n];
	     * }
	     *
	     * _.flatMap([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMap(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), 1);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDeep([1, 2], duplicate);
	     * // => [1, 1, 2, 2]
	     */
	    function flatMapDeep(collection, iteratee) {
	      return baseFlatten(map(collection, iteratee), INFINITY);
	    }
	
	    /**
	     * This method is like `_.flatMap` except that it recursively flattens the
	     * mapped results up to `depth` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The function invoked per iteration.
	     * @param {number} [depth=1] The maximum recursion depth.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * function duplicate(n) {
	     *   return [[[n, n]]];
	     * }
	     *
	     * _.flatMapDepth([1, 2], duplicate, 2);
	     * // => [[1, 1], [2, 2]]
	     */
	    function flatMapDepth(collection, iteratee, depth) {
	      depth = depth === undefined ? 1 : toInteger(depth);
	      return baseFlatten(map(collection, iteratee), depth);
	    }
	
	    /**
	     * Iterates over elements of `collection` and invokes `iteratee` for each element.
	     * The iteratee is invoked with three arguments: (value, index|key, collection).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length"
	     * property are iterated like arrays. To avoid this behavior use `_.forIn`
	     * or `_.forOwn` for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @alias each
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEachRight
	     * @example
	     *
	     * _([1, 2]).forEach(function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `1` then `2`.
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forEach(collection, iteratee) {
	      var func = isArray(collection) ? arrayEach : baseEach;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array|Object} Returns `collection`.
	     * @see _.forEach
	     * @example
	     *
	     * _.forEachRight([1, 2], function(value) {
	     *   console.log(value);
	     * });
	     * // => Logs `2` then `1`.
	     */
	    function forEachRight(collection, iteratee) {
	      var func = isArray(collection) ? arrayEachRight : baseEachRight;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The order of grouped values
	     * is determined by the order they occur in `collection`. The corresponding
	     * value of each key is an array of elements responsible for generating the
	     * key. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	     * // => { '4': [4.2], '6': [6.1, 6.3] }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection`. If `collection` is a string, it's
	     * checked for a substring of `value`, otherwise
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * is used for equality comparisons. If `fromIndex` is negative, it's used as
	     * the offset from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} value The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {boolean} Returns `true` if `value` is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'a': 1, 'b': 2 }, 1);
	     * // => true
	     *
	     * _.includes('abcd', 'bc');
	     * // => true
	     */
	    function includes(collection, value, fromIndex, guard) {
	      collection = isArrayLike(collection) ? collection : values(collection);
	      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;
	
	      var length = collection.length;
	      if (fromIndex < 0) {
	        fromIndex = nativeMax(length + fromIndex, 0);
	      }
	      return isString(collection)
	        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
	        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
	    }
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `path` is a function, it's invoked
	     * for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke each method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invokeMap([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invokeMap = baseRest(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` thru `iteratee`. The corresponding value of
	     * each key is the last element responsible for generating the key. The
	     * iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity]
	     *  The iteratee to transform keys.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var array = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.keyBy(array, function(o) {
	     *   return String.fromCharCode(o.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.keyBy(array, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     */
	    var keyBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * _.map([4, 8], square);
	     * // => [16, 64]
	     *
	     * _.map({ 'a': 4, 'b': 8 }, square);
	     * // => [16, 64] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      return func(collection, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it allows specifying the sort
	     * orders of the iteratees to sort by. If `orders` is unspecified, all values
	     * are sorted in ascending order. Otherwise, specify an order of "desc" for
	     * descending or "asc" for ascending sort order of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @param {string[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // Sort by `user` in ascending order and by `age` in descending order.
	     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    function orderBy(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      orders = guard ? undefined : orders;
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseOrderBy(collection, iteratees, orders);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, the second of which
	     * contains elements `predicate` returns falsey for. The predicate is
	     * invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * _.partition(users, function(o) { return o.active; });
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.partition(users, { 'age': 1, 'active': false });
	     * // => objects for [['pebbles'], ['barney', 'fred']]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.partition(users, ['active', false]);
	     * // => objects for [['barney', 'pebbles'], ['fred']]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.partition(users, 'active');
	     * // => objects for [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` thru `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not given, the first element of `collection` is used as the initial
	     * value. The iteratee is invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	     * and `sortBy`
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduceRight
	     * @example
	     *
	     * _.reduce([1, 2], function(sum, n) {
	     *   return sum + n;
	     * }, 0);
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     *   return result;
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	     */
	    function reduce(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduce : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	    }
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @returns {*} Returns the accumulated value.
	     * @see _.reduce
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    function reduceRight(collection, iteratee, accumulator) {
	      var func = isArray(collection) ? arrayReduceRight : baseReduce,
	          initAccum = arguments.length < 3;
	
	      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
	    }
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     * @see _.filter
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * _.reject(users, function(o) { return !o.active; });
	     * // => objects for ['fred']
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.reject(users, { 'age': 40, 'active': true });
	     * // => objects for ['barney']
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.reject(users, ['active', false]);
	     * // => objects for ['fred']
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.reject(users, 'active');
	     * // => objects for ['barney']
	     */
	    function reject(collection, predicate) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      return func(collection, negate(getIteratee(predicate, 3)));
	    }
	
	    /**
	     * Gets a random element from `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @returns {*} Returns the random element.
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     */
	    function sample(collection) {
	      var array = isArrayLike(collection) ? collection : values(collection),
	          length = array.length;
	
	      return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
	    }
	
	    /**
	     * Gets `n` random elements at unique keys from `collection` up to the
	     * size of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to sample.
	     * @param {number} [n=1] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the random elements.
	     * @example
	     *
	     * _.sampleSize([1, 2, 3], 2);
	     * // => [3, 1]
	     *
	     * _.sampleSize([1, 2, 3], 4);
	     * // => [2, 3, 1]
	     */
	    function sampleSize(collection, n, guard) {
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;
	
	      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = baseClamp(toInteger(n), 0, length);
	      }
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];
	
	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sampleSize(collection, MAX_ARRAY_LENGTH);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable string keyed properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to inspect.
	     * @returns {number} Returns the collection size.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      if (collection == null) {
	        return 0;
	      }
	      if (isArrayLike(collection)) {
	        var result = collection.length;
	        return (result && isString(collection)) ? stringSize(collection) : result;
	      }
	      if (isObjectLike(collection)) {
	        var tag = getTag(collection);
	        if (tag == mapTag || tag == setTag) {
	          return collection.size;
	        }
	      }
	      return keys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * Iteration is stopped once `predicate` returns truthy. The predicate is
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.some(users, ['active', false]);
	     * // => true
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, guard) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (guard && isIterateeCall(collection, predicate, guard)) {
	        predicate = undefined;
	      }
	      return func(collection, getIteratee(predicate, 3));
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection thru each iteratee. This method
	     * performs a stable sort, that is, it preserves the original sort order of
	     * equal elements. The iteratees are invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Collection
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to sort by.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.sortBy(users, function(o) { return o.user; });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     *
	     * _.sortBy(users, ['user', 'age']);
	     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	     *
	     * _.sortBy(users, 'user', function(o) {
	     *   return Math.floor(o.age / 10);
	     * });
	     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	     */
	    var sortBy = baseRest(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var length = iteratees.length;
	      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	        iteratees = [];
	      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	        iteratees = [iteratees[0]];
	      }
	      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the timestamp of the number of milliseconds that have elapsed since
	     * the Unix epoch (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Date
	     * @returns {number} Returns the timestamp.
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => Logs the number of milliseconds it took for the deferred invocation.
	     */
	    function now() {
	      return Date.now();
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it's called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => Logs 'done saving!' after the two async saves have completed.
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func`, with up to `n` arguments,
	     * ignoring any additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      n = guard ? undefined : n;
	      n = (func && n == null) ? func.length : n;
	      return createWrap(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it's called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery(element).on('click', _.before(5, addContactToList));
	     * // => Allows adding up to 4 contacts to the list.
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      n = toInteger(n);
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and `partials` prepended to the arguments it receives.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * function greet(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * }
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = baseRest(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bind));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrap(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` with `partials`
	     * prepended to the arguments it receives.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist. See
	     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Function
	     * @param {Object} object The object to invoke the method on.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // Bound with placeholders.
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = baseRest(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, getHolder(bindKey));
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrap(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts arguments of `func` and either invokes
	     * `func` returning its result, if at least `arity` number of arguments have
	     * been provided, or returns a function that accepts the remaining `func`
	     * arguments, and so on. The arity of `func` may be specified if `func.length`
	     * is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    function curry(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curry.placeholder;
	      return result;
	    }
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // Curried with placeholders.
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    function curryRight(func, arity, guard) {
	      arity = guard ? undefined : arity;
	      var result = createWrap(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	      result.placeholder = curryRight.placeholder;
	      return result;
	    }
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed `func` invocations and a `flush` method to immediately invoke them.
	     * Provide an options object to indicate whether `func` should be invoked on
	     * the leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	     * with the last arguments provided to the debounced function. Subsequent calls
	     * to the debounced function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=false]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {number} [options.maxWait]
	     *  The maximum time `func` is allowed to be delayed before it's invoked.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // Avoid costly calculations while the window size is in flux.
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	     * jQuery(element).on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', debounced);
	     *
	     * // Cancel the trailing debounced invocation.
	     * jQuery(window).on('popstate', debounced.cancel);
	     */
	    function debounce(func, wait, options) {
	      var lastArgs,
	          lastThis,
	          maxWait,
	          result,
	          timerId,
	          lastCallTime,
	          lastInvokeTime = 0,
	          leading = false,
	          maxing = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = toNumber(wait) || 0;
	      if (isObject(options)) {
	        leading = !!options.leading;
	        maxing = 'maxWait' in options;
	        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function invokeFunc(time) {
	        var args = lastArgs,
	            thisArg = lastThis;
	
	        lastArgs = lastThis = undefined;
	        lastInvokeTime = time;
	        result = func.apply(thisArg, args);
	        return result;
	      }
	
	      function leadingEdge(time) {
	        // Reset any `maxWait` timer.
	        lastInvokeTime = time;
	        // Start the timer for the trailing edge.
	        timerId = setTimeout(timerExpired, wait);
	        // Invoke the leading edge.
	        return leading ? invokeFunc(time) : result;
	      }
	
	      function remainingWait(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime,
	            result = wait - timeSinceLastCall;
	
	        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	      }
	
	      function shouldInvoke(time) {
	        var timeSinceLastCall = time - lastCallTime,
	            timeSinceLastInvoke = time - lastInvokeTime;
	
	        // Either this is the first call, activity has stopped and we're at the
	        // trailing edge, the system time has gone backwards and we're treating
	        // it as the trailing edge, or we've hit the `maxWait` limit.
	        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	      }
	
	      function timerExpired() {
	        var time = now();
	        if (shouldInvoke(time)) {
	          return trailingEdge(time);
	        }
	        // Restart the timer.
	        timerId = setTimeout(timerExpired, remainingWait(time));
	      }
	
	      function trailingEdge(time) {
	        timerId = undefined;
	
	        // Only invoke if we have `lastArgs` which means `func` has been
	        // debounced at least once.
	        if (trailing && lastArgs) {
	          return invokeFunc(time);
	        }
	        lastArgs = lastThis = undefined;
	        return result;
	      }
	
	      function cancel() {
	        if (timerId !== undefined) {
	          clearTimeout(timerId);
	        }
	        lastInvokeTime = 0;
	        lastArgs = lastCallTime = lastThis = timerId = undefined;
	      }
	
	      function flush() {
	        return timerId === undefined ? result : trailingEdge(now());
	      }
	
	      function debounced() {
	        var time = now(),
	            isInvoking = shouldInvoke(time);
	
	        lastArgs = arguments;
	        lastThis = this;
	        lastCallTime = time;
	
	        if (isInvoking) {
	          if (timerId === undefined) {
	            return leadingEdge(lastCallTime);
	          }
	          if (maxing) {
	            // Handle invocations in a tight loop.
	            timerId = setTimeout(timerExpired, wait);
	            return invokeFunc(lastCallTime);
	          }
	        }
	        if (timerId === undefined) {
	          timerId = setTimeout(timerExpired, wait);
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      debounced.flush = flush;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // => Logs 'deferred' after one or more milliseconds.
	     */
	    var defer = baseRest(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => Logs 'later' after one second.
	     */
	    var delay = baseRest(function(func, wait, args) {
	      return baseDelay(func, toNumber(wait) || 0, args);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments reversed.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to flip arguments for.
	     * @returns {Function} Returns the new flipped function.
	     * @example
	     *
	     * var flipped = _.flip(function() {
	     *   return _.toArray(arguments);
	     * });
	     *
	     * flipped('a', 'b', 'c', 'd');
	     * // => ['d', 'c', 'b', 'a']
	     */
	    function flip(func) {
	      return createWrap(func, FLIP_FLAG);
	    }
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided, it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is used as the map cache key. The `func`
	     * is invoked with the `this` binding of the memoized function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the
	     * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `delete`, `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoized function.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     * var other = { 'c': 3, 'd': 4 };
	     *
	     * var values = _.memoize(_.values);
	     * values(object);
	     * // => [1, 2]
	     *
	     * values(other);
	     * // => [3, 4]
	     *
	     * object.a = 2;
	     * values(object);
	     * // => [1, 2]
	     *
	     * // Modify the result cache.
	     * values.cache.set(object, ['a', 'b']);
	     * values(object);
	     * // => ['a', 'b']
	     *
	     * // Replace `_.memoize.Cache`.
	     * _.memoize.Cache = WeakMap;
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new (memoize.Cache || MapCache);
	      return memoized;
	    }
	
	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new negated function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        var args = arguments;
	        switch (args.length) {
	          case 0: return !predicate.call(this);
	          case 1: return !predicate.call(this, args[0]);
	          case 2: return !predicate.call(this, args[0], args[1]);
	          case 3: return !predicate.call(this, args[0], args[1], args[2]);
	        }
	        return !predicate.apply(this, args);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first invocation. The `func` is
	     * invoked with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // => `createApplication` is invoked once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with its arguments transformed.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms=[_.identity]]
	     *  The argument transforms.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var func = _.overArgs(function(x, y) {
	     *   return [x, y];
	     * }, [square, doubled]);
	     *
	     * func(9, 3);
	     * // => [81, 6]
	     *
	     * func(10, 5);
	     * // => [100, 10]
	     */
	    var overArgs = baseRest(function(func, transforms) {
	      transforms = (transforms.length == 1 && isArray(transforms[0]))
	        ? arrayMap(transforms[0], baseUnary(getIteratee()))
	        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
	
	      var funcsLength = transforms.length;
	      return baseRest(function(args) {
	        var index = -1,
	            length = nativeMin(args.length, funcsLength);
	
	        while (++index < length) {
	          args[index] = transforms[index].call(this, args[index]);
	        }
	        return apply(func, this, args);
	      });
	    });
	
	    /**
	     * Creates a function that invokes `func` with `partials` prepended to the
	     * arguments it receives. This method is like `_.bind` except it does **not**
	     * alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.2.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // Partially applied with placeholders.
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partial));
	      return createWrap(func, PARTIAL_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to the arguments it receives.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method doesn't set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * function greet(greeting, name) {
	     *   return greeting + ' ' + name;
	     * }
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // Partially applied with placeholders.
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = baseRest(function(func, partials) {
	      var holders = replaceHolders(partials, getHolder(partialRight));
	      return createWrap(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
	    });
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified `indexes` where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, [2, 0, 1]);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     */
	    var rearg = baseRest(function(func, indexes) {
	      return createWrap(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as
	     * an array.
	     *
	     * **Note:** This method is based on the
	     * [rest parameter](https://mdn.io/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.rest(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function rest(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? start : toInteger(start);
	      return baseRest(func, start);
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * create function and an array of arguments much like
	     * [`Function#apply`](http://www.ecma-international.org/ecma-262/6.0/#sec-function.prototype.apply).
	     *
	     * **Note:** This method is based on the
	     * [spread operator](https://mdn.io/spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @param {number} [start=0] The start position of the spread.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
	      return baseRest(function(args) {
	        var array = args[start],
	            otherArgs = castSlice(args, 0, start);
	
	        if (array) {
	          arrayPush(otherArgs, array);
	        }
	        return apply(func, this, otherArgs);
	      });
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed `func` invocations and a `flush` method to
	     * immediately invoke them. Provide an options object to indicate whether
	     * `func` should be invoked on the leading and/or trailing edge of the `wait`
	     * timeout. The `func` is invoked with the last arguments provided to the
	     * throttled function. Subsequent calls to the throttled function return the
	     * result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is
	     * invoked on the trailing edge of the timeout only if the throttled function
	     * is invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.leading=true]
	     *  Specify invoking on the leading edge of the timeout.
	     * @param {boolean} [options.trailing=true]
	     *  Specify invoking on the trailing edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // Avoid excessively updating the position while scrolling.
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	     * jQuery(element).on('click', throttled);
	     *
	     * // Cancel the trailing throttled invocation.
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, {
	        'leading': leading,
	        'maxWait': wait,
	        'trailing': trailing
	      });
	    }
	
	    /**
	     * Creates a function that accepts up to one argument, ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @returns {Function} Returns the new capped function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.unary(parseInt));
	     * // => [6, 8, 10]
	     */
	    function unary(func) {
	      return ary(func, 1);
	    }
	
	    /**
	     * Creates a function that provides `value` to `wrapper` as its first
	     * argument. Any additional arguments provided to the function are appended
	     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
	     * binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} [wrapper=identity] The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return partial(wrapper, value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Casts `value` as an array if it's not one.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.4.0
	     * @category Lang
	     * @param {*} value The value to inspect.
	     * @returns {Array} Returns the cast array.
	     * @example
	     *
	     * _.castArray(1);
	     * // => [1]
	     *
	     * _.castArray({ 'a': 1 });
	     * // => [{ 'a': 1 }]
	     *
	     * _.castArray('abc');
	     * // => ['abc']
	     *
	     * _.castArray(null);
	     * // => [null]
	     *
	     * _.castArray(undefined);
	     * // => [undefined]
	     *
	     * _.castArray();
	     * // => []
	     *
	     * var array = [1, 2, 3];
	     * console.log(_.castArray(array) === array);
	     * // => true
	     */
	    function castArray() {
	      if (!arguments.length) {
	        return [];
	      }
	      var value = arguments[0];
	      return isArray(value) ? value : [value];
	    }
	
	    /**
	     * Creates a shallow clone of `value`.
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	     * and supports cloning arrays, array buffers, booleans, date objects, maps,
	     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	     * arrays. The own enumerable properties of `arguments` objects are cloned
	     * as plain objects. An empty object is returned for uncloneable values such
	     * as error objects, functions, DOM nodes, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeep
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var shallow = _.clone(objects);
	     * console.log(shallow[0] === objects[0]);
	     * // => true
	     */
	    function clone(value) {
	      return baseClone(value, false, true);
	    }
	
	    /**
	     * This method is like `_.clone` except that it accepts `customizer` which
	     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
	     * cloning is handled by the method instead. The `customizer` is invoked with
	     * up to four arguments; (value [, index|key, object, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the cloned value.
	     * @see _.cloneDeepWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * }
	     *
	     * var el = _.cloneWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 0
	     */
	    function cloneWith(value, customizer) {
	      return baseClone(value, false, true, customizer);
	    }
	
	    /**
	     * This method is like `_.clone` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.clone
	     * @example
	     *
	     * var objects = [{ 'a': 1 }, { 'b': 2 }];
	     *
	     * var deep = _.cloneDeep(objects);
	     * console.log(deep[0] === objects[0]);
	     * // => false
	     */
	    function cloneDeep(value) {
	      return baseClone(value, true, true);
	    }
	
	    /**
	     * This method is like `_.cloneWith` except that it recursively clones `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to recursively clone.
	     * @param {Function} [customizer] The function to customize cloning.
	     * @returns {*} Returns the deep cloned value.
	     * @see _.cloneWith
	     * @example
	     *
	     * function customizer(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * }
	     *
	     * var el = _.cloneDeepWith(document.body, customizer);
	     *
	     * console.log(el === document.body);
	     * // => false
	     * console.log(el.nodeName);
	     * // => 'BODY'
	     * console.log(el.childNodes.length);
	     * // => 20
	     */
	    function cloneDeepWith(value, customizer) {
	      return baseClone(value, true, true, customizer);
	    }
	
	    /**
	     * Checks if `object` conforms to `source` by invoking the predicate properties
	     * of `source` with the corresponding property values of `object`. This method
	     * is equivalent to a `_.conforms` function when `source` is partially applied.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
	     * // => true
	     *
	     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
	     * // => false
	     */
	    function conformsTo(object, source) {
	      return source == null || baseConformsTo(object, source, keys(source));
	    }
	
	    /**
	     * Performs a
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * comparison between two values to determine if they are equivalent.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.eq(object, object);
	     * // => true
	     *
	     * _.eq(object, other);
	     * // => false
	     *
	     * _.eq('a', 'a');
	     * // => true
	     *
	     * _.eq('a', Object('a'));
	     * // => false
	     *
	     * _.eq(NaN, NaN);
	     * // => true
	     */
	    function eq(value, other) {
	      return value === other || (value !== value && other !== other);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`,
	     *  else `false`.
	     * @see _.lt
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    var gt = createRelationalOperation(baseGt);
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to
	     *  `other`, else `false`.
	     * @see _.lte
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    var gte = createRelationalOperation(function(value, other) {
	      return value >= other;
	    });
	
	    /**
	     * Checks if `value` is likely an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	      return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	        (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	    }
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(document.body.children);
	     * // => false
	     *
	     * _.isArray('abc');
	     * // => false
	     *
	     * _.isArray(_.noop);
	     * // => false
	     */
	    var isArray = Array.isArray;
	
	    /**
	     * Checks if `value` is classified as an `ArrayBuffer` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
	     * @example
	     *
	     * _.isArrayBuffer(new ArrayBuffer(2));
	     * // => true
	     *
	     * _.isArrayBuffer(new Array(2));
	     * // => false
	     */
	    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
	
	    /**
	     * Checks if `value` is array-like. A value is considered array-like if it's
	     * not a function and has a `value.length` that's an integer greater than or
	     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     * @example
	     *
	     * _.isArrayLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLike(document.body.children);
	     * // => true
	     *
	     * _.isArrayLike('abc');
	     * // => true
	     *
	     * _.isArrayLike(_.noop);
	     * // => false
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value)) && !isFunction(value);
	    }
	
	    /**
	     * This method is like `_.isArrayLike` except that it also checks if `value`
	     * is an object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an array-like object,
	     *  else `false`.
	     * @example
	     *
	     * _.isArrayLikeObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isArrayLikeObject(document.body.children);
	     * // => true
	     *
	     * _.isArrayLikeObject('abc');
	     * // => false
	     *
	     * _.isArrayLikeObject(_.noop);
	     * // => false
	     */
	    function isArrayLikeObject(value) {
	      return isObjectLike(value) && isArrayLike(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false ||
	        (isObjectLike(value) && objectToString.call(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is a buffer.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	     * @example
	     *
	     * _.isBuffer(new Buffer(2));
	     * // => true
	     *
	     * _.isBuffer(new Uint8Array(2));
	     * // => false
	     */
	    var isBuffer = nativeIsBuffer || stubFalse;
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
	
	    /**
	     * Checks if `value` is likely a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element,
	     *  else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is an empty object, collection, map, or set.
	     *
	     * Objects are considered empty if they have no own enumerable string keyed
	     * properties.
	     *
	     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	     * jQuery-like collections are considered empty if they have a `length` of `0`.
	     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (isArrayLike(value) &&
	          (isArray(value) || isString(value) || isFunction(value.splice) ||
	            isArguments(value) || isBuffer(value))) {
	        return !value.length;
	      }
	      if (isObjectLike(value)) {
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	      }
	      for (var key in value) {
	        if (hasOwnProperty.call(value, key)) {
	          return false;
	        }
	      }
	      return !(nonEnumShadows && keys(value).length);
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent.
	     *
	     * **Note:** This method supports comparing arrays, array buffers, booleans,
	     * date objects, error objects, maps, numbers, `Object` objects, regexes,
	     * sets, strings, symbols, and typed arrays. `Object` objects are compared
	     * by their own, not inherited, enumerable properties. Functions and DOM
	     * nodes are **not** supported.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     * var other = { 'a': 1 };
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * object === other;
	     * // => false
	     */
	    function isEqual(value, other) {
	      return baseIsEqual(value, other);
	    }
	
	    /**
	     * This method is like `_.isEqual` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with up to
	     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if the values are equivalent,
	     *  else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, othValue) {
	     *   if (isGreeting(objValue) && isGreeting(othValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqualWith(array, other, customizer);
	     * // => true
	     */
	    function isEqualWith(value, other, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object,
	     *  else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      if (!isObjectLike(value)) {
	        return false;
	      }
	      return (objectToString.call(value) == errorTag) ||
	        (typeof value.message == 'string' && typeof value.name == 'string');
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on
	     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number,
	     *  else `false`.
	     * @example
	     *
	     * _.isFinite(3);
	     * // => true
	     *
	     * _.isFinite(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     *
	     * _.isFinite('3');
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in Safari 8 which returns 'object' for typed array and weak map constructors,
	      // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	      var tag = isObject(value) ? objectToString.call(value) : '';
	      return tag == funcTag || tag == genTag;
	    }
	
	    /**
	     * Checks if `value` is an integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	     * @example
	     *
	     * _.isInteger(3);
	     * // => true
	     *
	     * _.isInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isInteger(Infinity);
	     * // => false
	     *
	     * _.isInteger('3');
	     * // => false
	     */
	    function isInteger(value) {
	      return typeof value == 'number' && value == toInteger(value);
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is loosely based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length,
	     *  else `false`.
	     * @example
	     *
	     * _.isLength(3);
	     * // => true
	     *
	     * _.isLength(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isLength(Infinity);
	     * // => false
	     *
	     * _.isLength('3');
	     * // => false
	     */
	    function isLength(value) {
	      return typeof value == 'number' &&
	        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is the
	     * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(_.noop);
	     * // => true
	     *
	     * _.isObject(null);
	     * // => false
	     */
	    function isObject(value) {
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Checks if `value` is object-like. A value is object-like if it's not `null`
	     * and has a `typeof` result of "object".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	     * @example
	     *
	     * _.isObjectLike({});
	     * // => true
	     *
	     * _.isObjectLike([1, 2, 3]);
	     * // => true
	     *
	     * _.isObjectLike(_.noop);
	     * // => false
	     *
	     * _.isObjectLike(null);
	     * // => false
	     */
	    function isObjectLike(value) {
	      return !!value && typeof value == 'object';
	    }
	
	    /**
	     * Checks if `value` is classified as a `Map` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	     * @example
	     *
	     * _.isMap(new Map);
	     * // => true
	     *
	     * _.isMap(new WeakMap);
	     * // => false
	     */
	    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
	
	    /**
	     * Performs a partial deep comparison between `object` and `source` to
	     * determine if `object` contains equivalent property values. This method is
	     * equivalent to a `_.matches` function when `source` is partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2 };
	     *
	     * _.isMatch(object, { 'b': 2 });
	     * // => true
	     *
	     * _.isMatch(object, { 'b': 1 });
	     * // => false
	     */
	    function isMatch(object, source) {
	      return object === source || baseIsMatch(object, source, getMatchData(source));
	    }
	
	    /**
	     * This method is like `_.isMatch` except that it accepts `customizer` which
	     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	     * are handled by the method instead. The `customizer` is invoked with five
	     * arguments: (objValue, srcValue, index|key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize comparisons.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * function isGreeting(value) {
	     *   return /^h(?:i|ello)$/.test(value);
	     * }
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
	     *     return true;
	     *   }
	     * }
	     *
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatchWith(object, source, customizer);
	     * // => true
	     */
	    function isMatchWith(object, source, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return baseIsMatch(object, source, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is based on
	     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	     * `undefined` and other non-number values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some
	      // ActiveX objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a pristine native function.
	     *
	     * **Note:** This method can't reliably detect native functions in the presence
	     * of the core-js package because core-js circumvents this kind of detection.
	     * Despite multiple requests, the core-js maintainer has made it clear: any
	     * attempt to fix the detection will be obstructed. As a result, we're left
	     * with little choice but to throw an error. Unfortunately, this also affects
	     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
	     * which rely on core-js.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function,
	     *  else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (isMaskable(value)) {
	        throw new Error('This method is not supported with core-js. Try https://github.com/es-shims.');
	      }
	      return baseIsNative(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is `null` or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	     * @example
	     *
	     * _.isNil(null);
	     * // => true
	     *
	     * _.isNil(void 0);
	     * // => true
	     *
	     * _.isNil(NaN);
	     * // => false
	     */
	    function isNil(value) {
	      return value == null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	     * classified as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	     * @example
	     *
	     * _.isNumber(3);
	     * // => true
	     *
	     * _.isNumber(Number.MIN_VALUE);
	     * // => true
	     *
	     * _.isNumber(Infinity);
	     * // => true
	     *
	     * _.isNumber('3');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' ||
	        (isObjectLike(value) && objectToString.call(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.8.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object,
	     *  else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      if (!isObjectLike(value) ||
	          objectToString.call(value) != objectTag || isHostObject(value)) {
	        return false;
	      }
	      var proto = getPrototype(value);
	      if (proto === null) {
	        return true;
	      }
	      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	      return (typeof Ctor == 'function' &&
	        Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.1.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
	
	    /**
	     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
	     * double precision number which isn't the result of a rounded unsafe integer.
	     *
	     * **Note:** This method is based on
	     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a safe integer,
	     *  else `false`.
	     * @example
	     *
	     * _.isSafeInteger(3);
	     * // => true
	     *
	     * _.isSafeInteger(Number.MIN_VALUE);
	     * // => false
	     *
	     * _.isSafeInteger(Infinity);
	     * // => false
	     *
	     * _.isSafeInteger('3');
	     * // => false
	     */
	    function isSafeInteger(value) {
	      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Set` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	     * @example
	     *
	     * _.isSet(new Set);
	     * // => true
	     *
	     * _.isSet(new WeakSet);
	     * // => false
	     */
	    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' ||
	        (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Symbol` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	     * @example
	     *
	     * _.isSymbol(Symbol.iterator);
	     * // => true
	     *
	     * _.isSymbol('abc');
	     * // => false
	     */
	    function isSymbol(value) {
	      return typeof value == 'symbol' ||
	        (isObjectLike(value) && objectToString.call(value) == symbolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakMap` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	     * @example
	     *
	     * _.isWeakMap(new WeakMap);
	     * // => true
	     *
	     * _.isWeakMap(new Map);
	     * // => false
	     */
	    function isWeakMap(value) {
	      return isObjectLike(value) && getTag(value) == weakMapTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `WeakSet` object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.3.0
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
	     * @example
	     *
	     * _.isWeakSet(new WeakSet);
	     * // => true
	     *
	     * _.isWeakSet(new Set);
	     * // => false
	     */
	    function isWeakSet(value) {
	      return isObjectLike(value) && objectToString.call(value) == weakSetTag;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`,
	     *  else `false`.
	     * @see _.gt
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    var lt = createRelationalOperation(baseLt);
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.9.0
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to
	     *  `other`, else `false`.
	     * @see _.gte
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    var lte = createRelationalOperation(function(value, other) {
	      return value <= other;
	    });
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * _.toArray({ 'a': 1, 'b': 2 });
	     * // => [1, 2]
	     *
	     * _.toArray('abc');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toArray(1);
	     * // => []
	     *
	     * _.toArray(null);
	     * // => []
	     */
	    function toArray(value) {
	      if (!value) {
	        return [];
	      }
	      if (isArrayLike(value)) {
	        return isString(value) ? stringToArray(value) : copyArray(value);
	      }
	      if (iteratorSymbol && value[iteratorSymbol]) {
	        return iteratorToArray(value[iteratorSymbol]());
	      }
	      var tag = getTag(value),
	          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);
	
	      return func(value);
	    }
	
	    /**
	     * Converts `value` to a finite number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.12.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted number.
	     * @example
	     *
	     * _.toFinite(3.2);
	     * // => 3.2
	     *
	     * _.toFinite(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toFinite(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toFinite('3.2');
	     * // => 3.2
	     */
	    function toFinite(value) {
	      if (!value) {
	        return value === 0 ? value : 0;
	      }
	      value = toNumber(value);
	      if (value === INFINITY || value === -INFINITY) {
	        var sign = (value < 0 ? -1 : 1);
	        return sign * MAX_INTEGER;
	      }
	      return value === value ? value : 0;
	    }
	
	    /**
	     * Converts `value` to an integer.
	     *
	     * **Note:** This method is loosely based on
	     * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toInteger(3.2);
	     * // => 3
	     *
	     * _.toInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toInteger(Infinity);
	     * // => 1.7976931348623157e+308
	     *
	     * _.toInteger('3.2');
	     * // => 3
	     */
	    function toInteger(value) {
	      var result = toFinite(value),
	          remainder = result % 1;
	
	      return result === result ? (remainder ? result - remainder : result) : 0;
	    }
	
	    /**
	     * Converts `value` to an integer suitable for use as the length of an
	     * array-like object.
	     *
	     * **Note:** This method is based on
	     * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toLength(3.2);
	     * // => 3
	     *
	     * _.toLength(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toLength(Infinity);
	     * // => 4294967295
	     *
	     * _.toLength('3.2');
	     * // => 3
	     */
	    function toLength(value) {
	      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
	    }
	
	    /**
	     * Converts `value` to a number.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {number} Returns the number.
	     * @example
	     *
	     * _.toNumber(3.2);
	     * // => 3.2
	     *
	     * _.toNumber(Number.MIN_VALUE);
	     * // => 5e-324
	     *
	     * _.toNumber(Infinity);
	     * // => Infinity
	     *
	     * _.toNumber('3.2');
	     * // => 3.2
	     */
	    function toNumber(value) {
	      if (typeof value == 'number') {
	        return value;
	      }
	      if (isSymbol(value)) {
	        return NAN;
	      }
	      if (isObject(value)) {
	        var other = isFunction(value.valueOf) ? value.valueOf() : value;
	        value = isObject(other) ? (other + '') : other;
	      }
	      if (typeof value != 'string') {
	        return value === 0 ? value : +value;
	      }
	      value = value.replace(reTrim, '');
	      var isBinary = reIsBinary.test(value);
	      return (isBinary || reIsOctal.test(value))
	        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	        : (reIsBadHex.test(value) ? NAN : +value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable string
	     * keyed properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return copyObject(value, keysIn(value));
	    }
	
	    /**
	     * Converts `value` to a safe integer. A safe integer can be compared and
	     * represented correctly.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.toSafeInteger(3.2);
	     * // => 3
	     *
	     * _.toSafeInteger(Number.MIN_VALUE);
	     * // => 0
	     *
	     * _.toSafeInteger(Infinity);
	     * // => 9007199254740991
	     *
	     * _.toSafeInteger('3.2');
	     * // => 3
	     */
	    function toSafeInteger(value) {
	      return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	    }
	
	    /**
	     * Converts `value` to a string. An empty string is returned for `null`
	     * and `undefined` values. The sign of `-0` is preserved.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Lang
	     * @param {*} value The value to process.
	     * @returns {string} Returns the string.
	     * @example
	     *
	     * _.toString(null);
	     * // => ''
	     *
	     * _.toString(-0);
	     * // => '-0'
	     *
	     * _.toString([1, 2, 3]);
	     * // => '1,2,3'
	     */
	    function toString(value) {
	      return value == null ? '' : baseToString(value);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Assigns own enumerable string keyed properties of source objects to the
	     * destination object. Source objects are applied from left to right.
	     * Subsequent sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object` and is loosely based on
	     * [`Object.assign`](https://mdn.io/Object/assign).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assignIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assign({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var assign = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keys(source), object);
	        return;
	      }
	      for (var key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          assignValue(object, key, source[key]);
	        }
	      }
	    });
	
	    /**
	     * This method is like `_.assign` except that it iterates over own and
	     * inherited source properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.assign
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * function Bar() {
	     *   this.c = 3;
	     * }
	     *
	     * Foo.prototype.b = 2;
	     * Bar.prototype.d = 4;
	     *
	     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
	     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
	     */
	    var assignIn = createAssigner(function(object, source) {
	      if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	        copyObject(source, keysIn(source), object);
	        return;
	      }
	      for (var key in source) {
	        assignValue(object, key, source[key]);
	      }
	    });
	
	    /**
	     * This method is like `_.assignIn` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias extendWith
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignInWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keysIn(source), object, customizer);
	    });
	
	    /**
	     * This method is like `_.assign` except that it accepts `customizer`
	     * which is invoked to produce the assigned values. If `customizer` returns
	     * `undefined`, assignment is handled by the method instead. The `customizer`
	     * is invoked with five arguments: (objValue, srcValue, key, object, source).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @see _.assignInWith
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   return _.isUndefined(objValue) ? srcValue : objValue;
	     * }
	     *
	     * var defaults = _.partialRight(_.assignWith, customizer);
	     *
	     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
	      copyObject(source, keys(source), object, customizer);
	    });
	
	    /**
	     * Creates an array of values corresponding to `paths` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {...(string|string[])} [paths] The property paths of elements to pick.
	     * @returns {Array} Returns the picked values.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
	     *
	     * _.at(object, ['a[0].b.c', 'a[1]']);
	     * // => [3, 4]
	     */
	    var at = baseRest(function(object, paths) {
	      return baseAt(object, baseFlatten(paths, 1));
	    });
	
	    /**
	     * Creates an object that inherits from the `prototype` object. If a
	     * `properties` object is given, its own enumerable string keyed properties
	     * are assigned to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties) {
	      var result = baseCreate(prototype);
	      return properties ? baseAssign(result, properties) : result;
	    }
	
	    /**
	     * Assigns own and inherited enumerable string keyed properties of source
	     * objects to the destination object for all destination properties that
	     * resolve to `undefined`. Source objects are applied from left to right.
	     * Once a property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaultsDeep
	     * @example
	     *
	     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	     * // => { 'a': 1, 'b': 2 }
	     */
	    var defaults = baseRest(function(args) {
	      args.push(undefined, assignInDefaults);
	      return apply(assignInWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @see _.defaults
	     * @example
	     *
	     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
	     * // => { 'a': { 'b': 2, 'c': 3 } }
	     */
	    var defaultsDeep = baseRest(function(args) {
	      args.push(undefined, mergeDefaults);
	      return apply(mergeWith, undefined, args);
	    });
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(o) { return o.age < 40; });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    function findKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
	    }
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function} [predicate=_.identity] The function invoked per iteration.
	     * @returns {string|undefined} Returns the key of the matched element,
	     *  else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(o) { return o.age < 40; });
	     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.findLastKey(users, ['active', false]);
	     * // => 'fred'
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    function findLastKey(object, predicate) {
	      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
	    }
	
	    /**
	     * Iterates over own and inherited enumerable string keyed properties of an
	     * object and invokes `iteratee` for each property. The iteratee is invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forInRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	     */
	    function forIn(object, iteratee) {
	      return object == null
	        ? object
	        : baseFor(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
	     */
	    function forInRight(object, iteratee) {
	      return object == null
	        ? object
	        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
	    }
	
	    /**
	     * Iterates over own enumerable string keyed properties of an object and
	     * invokes `iteratee` for each property. The iteratee is invoked with three
	     * arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwnRight
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	     */
	    function forOwn(object, iteratee) {
	      return object && baseForOwn(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.0.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     * @see _.forOwn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
	     */
	    function forOwnRight(object, iteratee) {
	      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
	    }
	
	    /**
	     * Creates an array of function property names from own enumerable properties
	     * of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functionsIn
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functions(new Foo);
	     * // => ['a', 'b']
	     */
	    function functions(object) {
	      return object == null ? [] : baseFunctions(object, keys(object));
	    }
	
	    /**
	     * Creates an array of function property names from own and inherited
	     * enumerable properties of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the function names.
	     * @see _.functions
	     * @example
	     *
	     * function Foo() {
	     *   this.a = _.constant('a');
	     *   this.b = _.constant('b');
	     * }
	     *
	     * Foo.prototype.c = _.constant('c');
	     *
	     * _.functionsIn(new Foo);
	     * // => ['a', 'b', 'c']
	     */
	    function functionsIn(object) {
	      return object == null ? [] : baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the value at `path` of `object`. If the resolved value is
	     * `undefined`, the `defaultValue` is returned in its place.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, path);
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property of `object`.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': 2 } };
	     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b');
	     * // => true
	     *
	     * _.has(object, ['a', 'b']);
	     * // => true
	     *
	     * _.has(other, 'a');
	     * // => false
	     */
	    function has(object, path) {
	      return object != null && hasPath(object, path, baseHas);
	    }
	
	    /**
	     * Checks if `path` is a direct or inherited property of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` exists, else `false`.
	     * @example
	     *
	     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	     *
	     * _.hasIn(object, 'a');
	     * // => true
	     *
	     * _.hasIn(object, 'a.b');
	     * // => true
	     *
	     * _.hasIn(object, ['a', 'b']);
	     * // => true
	     *
	     * _.hasIn(object, 'b');
	     * // => false
	     */
	    function hasIn(object, path) {
	      return object != null && hasPath(object, path, baseHasIn);
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite
	     * property assignments of previous values.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     */
	    var invert = createInverter(function(result, value, key) {
	      result[value] = key;
	    }, constant(identity));
	
	    /**
	     * This method is like `_.invert` except that the inverted object is generated
	     * from the results of running each element of `object` thru `iteratee`. The
	     * corresponding inverted value of each inverted key is an array of keys
	     * responsible for generating the inverted value. The iteratee is invoked
	     * with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.1.0
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invertBy(object);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     *
	     * _.invertBy(object, function(value) {
	     *   return 'group' + value;
	     * });
	     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
	     */
	    var invertBy = createInverter(function(result, value, key) {
	      if (hasOwnProperty.call(result, value)) {
	        result[value].push(key);
	      } else {
	        result[value] = [key];
	      }
	    }, getIteratee);
	
	    /**
	     * Invokes the method at `path` of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
	     *
	     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
	     * // => [2, 3]
	     */
	    var invoke = baseRest(baseInvoke);
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    function keys(object) {
	      var isProto = isPrototype(object);
	      if (!(isProto || isArrayLike(object))) {
	        return baseKeys(object);
	      }
	      var indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;
	
	      for (var key in object) {
	        if (baseHas(object, key) &&
	            !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(isProto && key == 'constructor')) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      var index = -1,
	          isProto = isPrototype(object),
	          props = baseKeysIn(object),
	          propsLength = props.length,
	          indexes = indexKeys(object),
	          skipIndexes = !!indexes,
	          result = indexes || [],
	          length = result.length;
	
	      while (++index < propsLength) {
	        var key = props[index];
	        if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
	     * with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.8.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapValues
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    function mapKeys(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        result[iteratee(value, key, object)] = value;
	      });
	      return result;
	    }
	
	    /**
	     * Creates an object with the same keys as `object` and values generated
	     * by running each own enumerable string keyed property of `object` thru
	     * `iteratee`. The iteratee is invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Object} Returns the new mapped object.
	     * @see _.mapKeys
	     * @example
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * _.mapValues(users, function(o) { return o.age; });
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee) {
	      var result = {};
	      iteratee = getIteratee(iteratee, 3);
	
	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }
	
	    /**
	     * This method is like `_.assign` except that it recursively merges own and
	     * inherited enumerable string keyed properties of source objects into the
	     * destination object. Source properties that resolve to `undefined` are
	     * skipped if a destination value exists. Array and plain object properties
	     * are merged recursively. Other objects and value types are overridden by
	     * assignment. Source objects are applied from left to right. Subsequent
	     * sources overwrite property assignments of previous sources.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.5.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {
	     *   'a': [{ 'b': 2 }, { 'd': 4 }]
	     * };
	     *
	     * var other = {
	     *   'a': [{ 'c': 3 }, { 'e': 5 }]
	     * };
	     *
	     * _.merge(object, other);
	     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	     */
	    var merge = createAssigner(function(object, source, srcIndex) {
	      baseMerge(object, source, srcIndex);
	    });
	
	    /**
	     * This method is like `_.merge` except that it accepts `customizer` which
	     * is invoked to produce the merged values of the destination and source
	     * properties. If `customizer` returns `undefined`, merging is handled by the
	     * method instead. The `customizer` is invoked with seven arguments:
	     * (objValue, srcValue, key, object, source, stack).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} sources The source objects.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function customizer(objValue, srcValue) {
	     *   if (_.isArray(objValue)) {
	     *     return objValue.concat(srcValue);
	     *   }
	     * }
	     *
	     * var object = { 'a': [1], 'b': [2] };
	     * var other = { 'a': [3], 'b': [4] };
	     *
	     * _.mergeWith(object, other, customizer);
	     * // => { 'a': [1, 3], 'b': [2, 4] }
	     */
	    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	      baseMerge(object, source, srcIndex, customizer);
	    });
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable string keyed properties of `object` that are
	     * not omitted.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to omit.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omit(object, ['a', 'c']);
	     * // => { 'b': '2' }
	     */
	    var omit = baseRest(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      props = arrayMap(baseFlatten(props, 1), toKey);
	      return basePick(object, baseDifference(getAllKeysIn(object), props));
	    });
	
	    /**
	     * The opposite of `_.pickBy`; this method creates an object composed of
	     * the own and inherited enumerable string keyed properties of `object` that
	     * `predicate` doesn't return truthy for. The predicate is invoked with two
	     * arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.omitBy(object, _.isNumber);
	     * // => { 'b': '2' }
	     */
	    function omitBy(object, predicate) {
	      return pickBy(object, negate(getIteratee(predicate)));
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {...(string|string[])} [props] The property identifiers to pick.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pick(object, ['a', 'c']);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    var pick = baseRest(function(object, props) {
	      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
	    });
	
	    /**
	     * Creates an object composed of the `object` properties `predicate` returns
	     * truthy for. The predicate is invoked with two arguments: (value, key).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function} [predicate=_.identity] The function invoked per property.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': '2', 'c': 3 };
	     *
	     * _.pickBy(object, _.isNumber);
	     * // => { 'a': 1, 'c': 3 }
	     */
	    function pickBy(object, predicate) {
	      return object == null ? {} : basePickBy(object, getAllKeysIn(object), getIteratee(predicate));
	    }
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a
	     * function it's invoked with the `this` binding of its parent object and
	     * its result is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a[0].b.c3', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a[0].b.c3', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      path = isKey(path, object) ? [path] : castPath(path);
	
	      var index = -1,
	          length = path.length;
	
	      // Ensure the loop is entered when path is empty.
	      if (!length) {
	        object = undefined;
	        length = 1;
	      }
	      while (++index < length) {
	        var value = object == null ? undefined : object[toKey(path[index])];
	        if (value === undefined) {
	          index = length;
	          value = defaultValue;
	        }
	        object = isFunction(value) ? value.call(object) : value;
	      }
	      return object;
	    }
	
	    /**
	     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	     * it's created. Arrays are created for missing index properties while objects
	     * are created for all other missing properties. Use `_.setWith` to customize
	     * `path` creation.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, ['x', '0', 'y', 'z'], 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      return object == null ? object : baseSet(object, path, value);
	    }
	
	    /**
	     * This method is like `_.set` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.setWith(object, '[0][1]', 'a', Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function setWith(object, path, value, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseSet(object, path, value, customizer);
	    }
	
	    /**
	     * Creates an array of own enumerable string keyed-value pairs for `object`
	     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	     * entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entries
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairs(new Foo);
	     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	     */
	    var toPairs = createToPairs(keys);
	
	    /**
	     * Creates an array of own and inherited enumerable string keyed-value pairs
	     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
	     * or set, its entries are returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @alias entriesIn
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the key-value pairs.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.toPairsIn(new Foo);
	     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
	     */
	    var toPairsIn = createToPairs(keysIn);
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own
	     * enumerable string keyed properties thru `iteratee`, with each invocation
	     * potentially mutating the `accumulator` object. If `accumulator` is not
	     * provided, a new object with the same `[[Prototype]]` will be used. The
	     * iteratee is invoked with four arguments: (accumulator, value, key, object).
	     * Iteratee functions may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.3.0
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * }, []);
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	     *   (result[value] || (result[value] = [])).push(key);
	     * }, {});
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function transform(object, iteratee, accumulator) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getIteratee(iteratee, 4);
	
	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Removes the property at `path` of `object`.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to unset.
	     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
	     * _.unset(object, 'a[0].b.c');
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     *
	     * _.unset(object, ['a', '0', 'b', 'c']);
	     * // => true
	     *
	     * console.log(object);
	     * // => { 'a': [{ 'b': {} }] };
	     */
	    function unset(object, path) {
	      return object == null ? true : baseUnset(object, path);
	    }
	
	    /**
	     * This method is like `_.set` except that accepts `updater` to produce the
	     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	     * is invoked with one argument: (value).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	     * console.log(object.a[0].b.c);
	     * // => 9
	     *
	     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	     * console.log(object.x[0].y.z);
	     * // => 0
	     */
	    function update(object, path, updater) {
	      return object == null ? object : baseUpdate(object, path, castFunction(updater));
	    }
	
	    /**
	     * This method is like `_.update` except that it accepts `customizer` which is
	     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
	     * path creation is handled by the method instead. The `customizer` is invoked
	     * with three arguments: (nsValue, key, nsObject).
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.6.0
	     * @category Object
	     * @param {Object} object The object to modify.
	     * @param {Array|string} path The path of the property to set.
	     * @param {Function} updater The function to produce the updated value.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = {};
	     *
	     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
	     * // => { '0': { '1': 'a' } }
	     */
	    function updateWith(object, path, updater, customizer) {
	      customizer = typeof customizer == 'function' ? customizer : undefined;
	      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
	    }
	
	    /**
	     * Creates an array of the own enumerable string keyed property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return object ? baseValues(object, keys(object)) : [];
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable string keyed property
	     * values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return object == null ? [] : baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Clamps `number` within the inclusive `lower` and `upper` bounds.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Number
	     * @param {number} number The number to clamp.
	     * @param {number} [lower] The lower bound.
	     * @param {number} upper The upper bound.
	     * @returns {number} Returns the clamped number.
	     * @example
	     *
	     * _.clamp(-10, -5, 5);
	     * // => -5
	     *
	     * _.clamp(10, -5, 5);
	     * // => 5
	     */
	    function clamp(number, lower, upper) {
	      if (upper === undefined) {
	        upper = lower;
	        lower = undefined;
	      }
	      if (upper !== undefined) {
	        upper = toNumber(upper);
	        upper = upper === upper ? upper : 0;
	      }
	      if (lower !== undefined) {
	        lower = toNumber(lower);
	        lower = lower === lower ? lower : 0;
	      }
	      return baseClamp(toNumber(number), lower, upper);
	    }
	
	    /**
	     * Checks if `n` is between `start` and up to, but not including, `end`. If
	     * `end` is not specified, it's set to `start` with `start` then set to `0`.
	     * If `start` is greater than `end` the params are swapped to support
	     * negative ranges.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.3.0
	     * @category Number
	     * @param {number} number The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
	     * @see _.range, _.rangeRight
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     *
	     * _.inRange(-3, -2, -6);
	     * // => true
	     */
	    function inRange(number, start, end) {
	      start = toNumber(start) || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = toNumber(end) || 0;
	      }
	      number = toNumber(number);
	      return baseInRange(number, start, end);
	    }
	
	    /**
	     * Produces a random number between the inclusive `lower` and `upper` bounds.
	     * If only one argument is provided a number between `0` and the given number
	     * is returned. If `floating` is `true`, or either `lower` or `upper` are
	     * floats, a floating-point number is returned instead of an integer.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @memberOf _
	     * @since 0.7.0
	     * @category Number
	     * @param {number} [lower=0] The lower bound.
	     * @param {number} [upper=1] The upper bound.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(lower, upper, floating) {
	      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
	        upper = floating = undefined;
	      }
	      if (floating === undefined) {
	        if (typeof upper == 'boolean') {
	          floating = upper;
	          upper = undefined;
	        }
	        else if (typeof lower == 'boolean') {
	          floating = lower;
	          lower = undefined;
	        }
	      }
	      if (lower === undefined && upper === undefined) {
	        lower = 0;
	        upper = 1;
	      }
	      else {
	        lower = toNumber(lower) || 0;
	        if (upper === undefined) {
	          upper = lower;
	          lower = 0;
	        } else {
	          upper = toNumber(upper) || 0;
	        }
	      }
	      if (lower > upper) {
	        var temp = lower;
	        lower = upper;
	        upper = temp;
	      }
	      if (floating || lower % 1 || upper % 1) {
	        var rand = nativeRandom();
	        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
	      }
	      return baseRandom(lower, upper);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar--');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__FOO_BAR__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? capitalize(word) : word);
	    });
	
	    /**
	     * Converts the first character of `string` to upper case and the remaining
	     * to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('FRED');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      return upperFirst(toString(string).toLowerCase());
	    }
	
	    /**
	     * Deburrs `string` by converting
	     * [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing
	     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = toString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search up to.
	     * @returns {boolean} Returns `true` if `string` ends with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = toString(string);
	      target = baseToString(target);
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : baseClamp(toInteger(position), 0, length);
	
	      var end = position;
	      position -= target.length;
	      return position >= 0 && string.slice(position, end) == target;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional
	     * characters use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value. See
	     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in IE < 9, they can break out of
	     * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the
	     * [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
	     *
	     * When working with HTML you should always
	     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
	     * XSS vectors.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      string = toString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
	     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https://lodash\.com/\)'
	     */
	    function escapeRegExp(string) {
	      string = toString(string);
	      return (string && reHasRegExpChar.test(string))
	        ? string.replace(reRegExpChar, '\\$&')
	        : string;
	    }
	
	    /**
	     * Converts `string` to
	     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__FOO_BAR__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string`, as space separated words, to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.lowerCase('--Foo-Bar--');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('fooBar');
	     * // => 'foo bar'
	     *
	     * _.lowerCase('__FOO_BAR__');
	     * // => 'foo bar'
	     */
	    var lowerCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts the first character of `string` to lower case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.lowerFirst('Fred');
	     * // => 'fred'
	     *
	     * _.lowerFirst('FRED');
	     * // => 'fRED'
	     */
	    var lowerFirst = createCaseFirst('toLowerCase');
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      if (!length || strLength >= length) {
	        return string;
	      }
	      var mid = (length - strLength) / 2;
	      return (
	        createPadding(nativeFloor(mid), chars) +
	        string +
	        createPadding(nativeCeil(mid), chars)
	      );
	    }
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padEnd('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padEnd('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padEnd('abc', 3);
	     * // => 'abc'
	     */
	    function padEnd(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (string + createPadding(length - strLength, chars))
	        : string;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padStart('abc', 6);
	     * // => '   abc'
	     *
	     * _.padStart('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padStart('abc', 3);
	     * // => 'abc'
	     */
	    function padStart(string, length, chars) {
	      string = toString(string);
	      length = toInteger(length);
	
	      var strLength = length ? stringSize(string) : 0;
	      return (length && strLength < length)
	        ? (createPadding(length - strLength, chars) + string)
	        : string;
	    }
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
	     * hexadecimal, in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the
	     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @since 1.1.0
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix=10] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://bugs.chromium.org/p/v8/issues/detail?id=3109 for more details.
	      if (guard || radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = toString(string).replace(reTrim, '');
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=1] The number of times to repeat the string.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n, guard) {
	      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
	        n = 1;
	      } else {
	        n = toInteger(n);
	      }
	      return baseRepeat(toString(string), n);
	    }
	
	    /**
	     * Replaces matches for `pattern` in `string` with `replacement`.
	     *
	     * **Note:** This method is based on
	     * [`String#replace`](https://mdn.io/String/replace).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to modify.
	     * @param {RegExp|string} pattern The pattern to replace.
	     * @param {Function|string} replacement The match replacement.
	     * @returns {string} Returns the modified string.
	     * @example
	     *
	     * _.replace('Hi Fred', 'Fred', 'Barney');
	     * // => 'Hi Barney'
	     */
	    function replace() {
	      var args = arguments,
	          string = toString(args[0]);
	
	      return args.length < 3 ? string : nativeReplace.call(string, args[1], args[2]);
	    }
	
	    /**
	     * Converts `string` to
	     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--FOO-BAR--');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Splits `string` by `separator`.
	     *
	     * **Note:** This method is based on
	     * [`String#split`](https://mdn.io/String/split).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to split.
	     * @param {RegExp|string} separator The separator pattern to split by.
	     * @param {number} [limit] The length to truncate results to.
	     * @returns {Array} Returns the string segments.
	     * @example
	     *
	     * _.split('a-b-c', '-', 2);
	     * // => ['a', 'b']
	     */
	    function split(string, separator, limit) {
	      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
	        separator = limit = undefined;
	      }
	      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
	      if (!limit) {
	        return [];
	      }
	      string = toString(string);
	      if (string && (
	            typeof separator == 'string' ||
	            (separator != null && !isRegExp(separator))
	          )) {
	        separator = baseToString(separator);
	        if (separator == '' && reHasComplexSymbol.test(string)) {
	          return castSlice(stringToArray(string), 0, limit);
	        }
	      }
	      return nativeSplit.call(string, separator, limit);
	    }
	
	    /**
	     * Converts `string` to
	     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @since 3.1.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar--');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__FOO_BAR__');
	     * // => 'FOO BAR'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + upperFirst(word);
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`,
	     *  else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = toString(string);
	      position = baseClamp(toInteger(position), 0, string.length);
	      target = baseToString(target);
	      return string.slice(position, position + target.length) == target;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is given, it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options={}] The options object.
	     * @param {RegExp} [options.escape=_.templateSettings.escape]
	     *  The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
	     *  The "evaluate" delimiter.
	     * @param {Object} [options.imports=_.templateSettings.imports]
	     *  An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
	     *  The "interpolate" delimiter.
	     * @param {string} [options.sourceURL='lodash.templateSources[n]']
	     *  The sourceURL of the compiled template.
	     * @param {string} [options.variable='obj']
	     *  The data object variable name.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // Use the "interpolate" delimiter to create a compiled template.
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // Use the HTML "escape" delimiter to escape data property values.
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the internal `print` function in "evaluate" delimiters.
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // Use the ES delimiter as an alternative to the default "interpolate" delimiter.
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // Use backslashes to treat delimiters as plain text.
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // Use the `imports` option to import `jQuery` as `jq`.
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
	     *
	     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // Use custom template delimiters.
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // Use the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and stack traces.
	     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, guard) {
	      // Based on John Resig's `tmpl` implementation
	      // (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      string = toString(string);
	      options = assignInWith({}, options, settings, assignInDefaults);
	
	      var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products needs `match` returned in
	        // order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source)
	          .apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Converts `string`, as a whole, to lower case just like
	     * [String#toLowerCase](https://mdn.io/toLowerCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the lower cased string.
	     * @example
	     *
	     * _.toLower('--Foo-Bar--');
	     * // => '--foo-bar--'
	     *
	     * _.toLower('fooBar');
	     * // => 'foobar'
	     *
	     * _.toLower('__FOO_BAR__');
	     * // => '__foo_bar__'
	     */
	    function toLower(value) {
	      return toString(value).toLowerCase();
	    }
	
	    /**
	     * Converts `string`, as a whole, to upper case just like
	     * [String#toUpperCase](https://mdn.io/toUpperCase).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.toUpper('--foo-bar--');
	     * // => '--FOO-BAR--'
	     *
	     * _.toUpper('fooBar');
	     * // => 'FOOBAR'
	     *
	     * _.toUpper('__foo_bar__');
	     * // => '__FOO_BAR__'
	     */
	    function toUpper(value) {
	      return toString(value).toUpperCase();
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrim, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          chrSymbols = stringToArray(chars),
	          start = charsStartIndex(strSymbols, chrSymbols),
	          end = charsEndIndex(strSymbols, chrSymbols) + 1;
	
	      return castSlice(strSymbols, start, end).join('');
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimEnd('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimEnd('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimEnd(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimEnd, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
	
	      return castSlice(strSymbols, 0, end).join('');
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimStart('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimStart('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimStart(string, chars, guard) {
	      string = toString(string);
	      if (string && (guard || chars === undefined)) {
	        return string.replace(reTrimStart, '');
	      }
	      if (!string || !(chars = baseToString(chars))) {
	        return string;
	      }
	      var strSymbols = stringToArray(string),
	          start = charsStartIndex(strSymbols, stringToArray(chars));
	
	      return castSlice(strSymbols, start).join('');
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object} [options={}] The options object.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.truncate('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.truncate('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function truncate(string, options) {
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (isObject(options)) {
	        var separator = 'separator' in options ? options.separator : separator;
	        length = 'length' in options ? toInteger(options.length) : length;
	        omission = 'omission' in options ? baseToString(options.omission) : omission;
	      }
	      string = toString(string);
	
	      var strLength = string.length;
	      if (reHasComplexSymbol.test(string)) {
	        var strSymbols = stringToArray(string);
	        strLength = strSymbols.length;
	      }
	      if (length >= strLength) {
	        return string;
	      }
	      var end = length - stringSize(omission);
	      if (end < 1) {
	        return omission;
	      }
	      var result = strSymbols
	        ? castSlice(strSymbols, 0, end).join('')
	        : string.slice(0, end);
	
	      if (separator === undefined) {
	        return result + omission;
	      }
	      if (strSymbols) {
	        end += (result.length - end);
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              substring = result;
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            var newEnd = match.index;
	          }
	          result = result.slice(0, newEnd === undefined ? end : newEnd);
	        }
	      } else if (string.indexOf(baseToString(separator), end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to
	     * their corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional
	     * HTML entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @since 0.6.0
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = toString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Converts `string`, as space separated words, to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the upper cased string.
	     * @example
	     *
	     * _.upperCase('--foo-bar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('fooBar');
	     * // => 'FOO BAR'
	     *
	     * _.upperCase('__foo_bar__');
	     * // => 'FOO BAR'
	     */
	    var upperCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + word.toUpperCase();
	    });
	
	    /**
	     * Converts the first character of `string` to upper case.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the converted string.
	     * @example
	     *
	     * _.upperFirst('fred');
	     * // => 'Fred'
	     *
	     * _.upperFirst('FRED');
	     * // => 'FRED'
	     */
	    var upperFirst = createCaseFirst('toUpperCase');
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      string = toString(string);
	      pattern = guard ? undefined : pattern;
	
	      if (pattern === undefined) {
	        pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
	      }
	      return string.match(pattern) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it's invoked.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Function} func The function to attempt.
	     * @param {...*} [args] The arguments to invoke `func` with.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // Avoid throwing errors for invalid selectors.
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = baseRest(function(func, args) {
	      try {
	        return apply(func, undefined, args);
	      } catch (e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method.
	     *
	     * **Note:** This method doesn't set the "length" property of bound functions.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} methodNames The object method names to bind.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'click': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view, ['click']);
	     * jQuery(element).on('click', view.click);
	     * // => Logs 'clicked docs' when clicked.
	     */
	    var bindAll = baseRest(function(object, methodNames) {
	      arrayEach(baseFlatten(methodNames, 1), function(key) {
	        key = toKey(key);
	        object[key] = bind(object[key], object);
	      });
	      return object;
	    });
	
	    /**
	     * Creates a function that iterates over `pairs` and invokes the corresponding
	     * function of the first predicate to return truthy. The predicate-function
	     * pairs are invoked with the `this` binding and arguments of the created
	     * function.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Array} pairs The predicate-function pairs.
	     * @returns {Function} Returns the new composite function.
	     * @example
	     *
	     * var func = _.cond([
	     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
	     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
	     *   [_.stubTrue,                      _.constant('no match')]
	     * ]);
	     *
	     * func({ 'a': 1, 'b': 2 });
	     * // => 'matches A'
	     *
	     * func({ 'a': 0, 'b': 1 });
	     * // => 'matches B'
	     *
	     * func({ 'a': '1', 'b': '2' });
	     * // => 'no match'
	     */
	    function cond(pairs) {
	      var length = pairs ? pairs.length : 0,
	          toIteratee = getIteratee();
	
	      pairs = !length ? [] : arrayMap(pairs, function(pair) {
	        if (typeof pair[1] != 'function') {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	        return [toIteratee(pair[0]), pair[1]];
	      });
	
	      return baseRest(function(args) {
	        var index = -1;
	        while (++index < length) {
	          var pair = pairs[index];
	          if (apply(pair[0], this, args)) {
	            return apply(pair[1], this, args);
	          }
	        }
	      });
	    }
	
	    /**
	     * Creates a function that invokes the predicate properties of `source` with
	     * the corresponding property values of a given object, returning `true` if
	     * all predicates return truthy, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {Object} source The object of property predicates to conform to.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 2, 'b': 1 },
	     *   { 'a': 1, 'b': 2 }
	     * ];
	     *
	     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
	     * // => [{ 'a': 1, 'b': 2 }]
	     */
	    function conforms(source) {
	      return baseConforms(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new constant function.
	     * @example
	     *
	     * var objects = _.times(2, _.constant({ 'a': 1 }));
	     *
	     * console.log(objects);
	     * // => [{ 'a': 1 }, { 'a': 1 }]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * Checks `value` to determine whether a default value should be returned in
	     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
	     * or `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.14.0
	     * @category Util
	     * @param {*} value The value to check.
	     * @param {*} defaultValue The default value.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * _.defaultTo(1, 10);
	     * // => 1
	     *
	     * _.defaultTo(undefined, 10);
	     * // => 10
	     */
	    function defaultTo(value, defaultValue) {
	      return (value == null || value !== value) ? defaultValue : value;
	    }
	
	    /**
	     * Creates a function that returns the result of invoking the given functions
	     * with the `this` binding of the created function, where each successive
	     * invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flowRight
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow([_.add, square]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the given functions from right to left.
	     *
	     * @static
	     * @since 3.0.0
	     * @memberOf _
	     * @category Util
	     * @param {...(Function|Function[])} [funcs] The functions to invoke.
	     * @returns {Function} Returns the new composite function.
	     * @see _.flow
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight([square, _.add]);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * This method returns the first argument it receives.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'a': 1 };
	     *
	     * console.log(_.identity(object) === object);
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that invokes `func` with the arguments of the created
	     * function. If `func` is a property name, the created function returns the
	     * property value for a given element. If `func` is an array or object, the
	     * created function returns `true` for elements that contain the equivalent
	     * source properties, otherwise it returns `false`.
	     *
	     * @static
	     * @since 4.0.0
	     * @memberOf _
	     * @category Util
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // The `_.matches` iteratee shorthand.
	     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	     *
	     * // The `_.matchesProperty` iteratee shorthand.
	     * _.filter(users, _.iteratee(['user', 'fred']));
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.map(users, _.iteratee('user'));
	     * // => ['barney', 'fred']
	     *
	     * // Create custom iteratee shorthands.
	     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	     *     return func.test(string);
	     *   };
	     * });
	     *
	     * _.filter(['abc', 'def'], /ef/);
	     * // => ['def']
	     */
	    function iteratee(func) {
	      return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between a given
	     * object and `source`, returning `true` if the given object has equivalent
	     * property values, else `false`. The created function is equivalent to
	     * `_.isMatch` with a `source` partially applied.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
	     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that performs a partial deep comparison between the
	     * value at `path` of a given object to `srcValue`, returning `true` if the
	     * object value is equivalent, else `false`.
	     *
	     * **Note:** This method supports comparing the same values as `_.isEqual`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.2.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new spec function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': 1, 'b': 2, 'c': 3 },
	     *   { 'a': 4, 'b': 5, 'c': 6 }
	     * ];
	     *
	     * _.find(objects, _.matchesProperty('a', 4));
	     * // => { 'a': 4, 'b': 5, 'c': 6 }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` of a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': _.constant(2) } },
	     *   { 'a': { 'b': _.constant(1) } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(objects, _.method(['a', 'b']));
	     * // => [2, 1]
	     */
	    var method = baseRest(function(path, args) {
	      return function(object) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path of `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.7.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new invoker function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = baseRest(function(object, args) {
	      return function(path) {
	        return baseInvoke(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable string keyed function properties of a source
	     * object to the destination object. If `object` is a function, then methods
	     * are added to its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options={}] The options object.
	     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      var props = keys(source),
	          methodNames = baseFunctions(source, props);
	
	      if (options == null &&
	          !(isObject(source) && (methodNames.length || !props.length))) {
	        options = source;
	        source = object;
	        object = this;
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
	          isFunc = isFunction(object);
	
	      arrayEach(methodNames, function(methodName) {
	        var func = source[methodName];
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = function() {
	            var chainAll = this.__chain__;
	            if (chain || chainAll) {
	              var result = object(this.__wrapped__),
	                  actions = result.__actions__ = copyArray(this.__actions__);
	
	              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	              result.__chain__ = chainAll;
	              return result;
	            }
	            return func.apply(object, arrayPush([this.value()], arguments));
	          };
	        }
	      });
	
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      if (root._ === this) {
	        root._ = oldDash;
	      }
	      return this;
	    }
	
	    /**
	     * This method returns `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.3.0
	     * @category Util
	     * @example
	     *
	     * _.times(2, _.noop);
	     * // => [undefined, undefined]
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that gets the argument at index `n`. If `n` is negative,
	     * the nth argument from the end is returned.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [n=0] The index of the argument to return.
	     * @returns {Function} Returns the new pass-thru function.
	     * @example
	     *
	     * var func = _.nthArg(1);
	     * func('a', 'b', 'c', 'd');
	     * // => 'b'
	     *
	     * var func = _.nthArg(-2);
	     * func('a', 'b', 'c', 'd');
	     * // => 'c'
	     */
	    function nthArg(n) {
	      n = toInteger(n);
	      return baseRest(function(args) {
	        return baseNth(args, n);
	      });
	    }
	
	    /**
	     * Creates a function that invokes `iteratees` with the arguments it receives
	     * and returns their results.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [iteratees=[_.identity]]
	     *  The iteratees to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.over([Math.max, Math.min]);
	     *
	     * func(1, 2, 3, 4);
	     * // => [4, 1]
	     */
	    var over = createOver(arrayMap);
	
	    /**
	     * Creates a function that checks if **all** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overEvery([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => false
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overEvery = createOver(arrayEvery);
	
	    /**
	     * Creates a function that checks if **any** of the `predicates` return
	     * truthy when invoked with the arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {...(Function|Function[])} [predicates=[_.identity]]
	     *  The predicates to check.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var func = _.overSome([Boolean, isFinite]);
	     *
	     * func('1');
	     * // => true
	     *
	     * func(null);
	     * // => true
	     *
	     * func(NaN);
	     * // => false
	     */
	    var overSome = createOver(arraySome);
	
	    /**
	     * Creates a function that returns the value at `path` of a given object.
	     *
	     * @static
	     * @memberOf _
	     * @since 2.4.0
	     * @category Util
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': 2 } },
	     *   { 'a': { 'b': 1 } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b'));
	     * // => [2, 1]
	     *
	     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the value at a given path of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.0.0
	     * @category Util
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new accessor function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return object == null ? undefined : baseGet(object, path);
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	     * `start` is specified without an `end` or `step`. If `end` is not specified,
	     * it's set to `start` with `start` then set to `0`.
	     *
	     * **Note:** JavaScript follows the IEEE-754 standard for resolving
	     * floating-point values which can produce unexpected results.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.rangeRight
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(-4);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    var range = createRange();
	
	    /**
	     * This method is like `_.range` except that it populates values in
	     * descending order.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the range of numbers.
	     * @see _.inRange, _.range
	     * @example
	     *
	     * _.rangeRight(4);
	     * // => [3, 2, 1, 0]
	     *
	     * _.rangeRight(-4);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 5);
	     * // => [4, 3, 2, 1]
	     *
	     * _.rangeRight(0, 20, 5);
	     * // => [15, 10, 5, 0]
	     *
	     * _.rangeRight(0, -4, -1);
	     * // => [-3, -2, -1, 0]
	     *
	     * _.rangeRight(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.rangeRight(0);
	     * // => []
	     */
	    var rangeRight = createRange(true);
	
	    /**
	     * This method returns a new empty array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Array} Returns the new empty array.
	     * @example
	     *
	     * var arrays = _.times(2, _.stubArray);
	     *
	     * console.log(arrays);
	     * // => [[], []]
	     *
	     * console.log(arrays[0] === arrays[1]);
	     * // => false
	     */
	    function stubArray() {
	      return [];
	    }
	
	    /**
	     * This method returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `false`.
	     * @example
	     *
	     * _.times(2, _.stubFalse);
	     * // => [false, false]
	     */
	    function stubFalse() {
	      return false;
	    }
	
	    /**
	     * This method returns a new empty object.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {Object} Returns the new empty object.
	     * @example
	     *
	     * var objects = _.times(2, _.stubObject);
	     *
	     * console.log(objects);
	     * // => [{}, {}]
	     *
	     * console.log(objects[0] === objects[1]);
	     * // => false
	     */
	    function stubObject() {
	      return {};
	    }
	
	    /**
	     * This method returns an empty string.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {string} Returns the empty string.
	     * @example
	     *
	     * _.times(2, _.stubString);
	     * // => ['', '']
	     */
	    function stubString() {
	      return '';
	    }
	
	    /**
	     * This method returns `true`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.13.0
	     * @category Util
	     * @returns {boolean} Returns `true`.
	     * @example
	     *
	     * _.times(2, _.stubTrue);
	     * // => [true, true]
	     */
	    function stubTrue() {
	      return true;
	    }
	
	    /**
	     * Invokes the iteratee `n` times, returning an array of the results of
	     * each invocation. The iteratee is invoked with one argument; (index).
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.times(3, String);
	     * // => ['0', '1', '2']
	     *
	     *  _.times(4, _.constant(0));
	     * // => [0, 0, 0, 0]
	     */
	    function times(n, iteratee) {
	      n = toInteger(n);
	      if (n < 1 || n > MAX_SAFE_INTEGER) {
	        return [];
	      }
	      var index = MAX_ARRAY_LENGTH,
	          length = nativeMin(n, MAX_ARRAY_LENGTH);
	
	      iteratee = getIteratee(iteratee);
	      n -= MAX_ARRAY_LENGTH;
	
	      var result = baseTimes(length, iteratee);
	      while (++index < n) {
	        iteratee(index);
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to a property path array.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Util
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the new property path array.
	     * @example
	     *
	     * _.toPath('a.b.c');
	     * // => ['a', 'b', 'c']
	     *
	     * _.toPath('a[0].b.c');
	     * // => ['a', '0', 'b', 'c']
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return arrayMap(value, toKey);
	      }
	      return isSymbol(value) ? [value] : copyArray(stringToPath(value));
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Util
	     * @param {string} [prefix=''] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return toString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {number} augend The first number in an addition.
	     * @param {number} addend The second number in an addition.
	     * @returns {number} Returns the total.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    var add = createMathOperation(function(augend, addend) {
	      return augend + addend;
	    }, 0);
	
	    /**
	     * Computes `number` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Divide two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} dividend The first number in a division.
	     * @param {number} divisor The second number in a division.
	     * @returns {number} Returns the quotient.
	     * @example
	     *
	     * _.divide(6, 4);
	     * // => 1.5
	     */
	    var divide = createMathOperation(function(dividend, divisor) {
	      return dividend / divisor;
	    }, 1);
	
	    /**
	     * Computes `number` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Computes the maximum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => undefined
	     */
	    function max(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseGt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.max` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.maxBy(objects, function(o) { return o.n; });
	     * // => { 'n': 2 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.maxBy(objects, 'n');
	     * // => { 'n': 2 }
	     */
	    function maxBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
	        : undefined;
	    }
	
	    /**
	     * Computes the mean of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * _.mean([4, 2, 8, 6]);
	     * // => 5
	     */
	    function mean(array) {
	      return baseMean(array, identity);
	    }
	
	    /**
	     * This method is like `_.mean` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be averaged.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the mean.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.meanBy(objects, function(o) { return o.n; });
	     * // => 5
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.meanBy(objects, 'n');
	     * // => 5
	     */
	    function meanBy(array, iteratee) {
	      return baseMean(array, getIteratee(iteratee, 2));
	    }
	
	    /**
	     * Computes the minimum value of `array`. If `array` is empty or falsey,
	     * `undefined` is returned.
	     *
	     * @static
	     * @since 0.1.0
	     * @memberOf _
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => undefined
	     */
	    function min(array) {
	      return (array && array.length)
	        ? baseExtremum(array, identity, baseLt)
	        : undefined;
	    }
	
	    /**
	     * This method is like `_.min` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the criterion by which
	     * the value is ranked. The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * var objects = [{ 'n': 1 }, { 'n': 2 }];
	     *
	     * _.minBy(objects, function(o) { return o.n; });
	     * // => { 'n': 1 }
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.minBy(objects, 'n');
	     * // => { 'n': 1 }
	     */
	    function minBy(array, iteratee) {
	      return (array && array.length)
	        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
	        : undefined;
	    }
	
	    /**
	     * Multiply two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.7.0
	     * @category Math
	     * @param {number} multiplier The first number in a multiplication.
	     * @param {number} multiplicand The second number in a multiplication.
	     * @returns {number} Returns the product.
	     * @example
	     *
	     * _.multiply(6, 4);
	     * // => 24
	     */
	    var multiply = createMathOperation(function(multiplier, multiplicand) {
	      return multiplier * multiplicand;
	    }, 1);
	
	    /**
	     * Computes `number` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.10.0
	     * @category Math
	     * @param {number} number The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Subtract two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {number} minuend The first number in a subtraction.
	     * @param {number} subtrahend The second number in a subtraction.
	     * @returns {number} Returns the difference.
	     * @example
	     *
	     * _.subtract(6, 4);
	     * // => 2
	     */
	    var subtract = createMathOperation(function(minuend, subtrahend) {
	      return minuend - subtrahend;
	    }, 0);
	
	    /**
	     * Computes the sum of the values in `array`.
	     *
	     * @static
	     * @memberOf _
	     * @since 3.4.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 2, 8, 6]);
	     * // => 20
	     */
	    function sum(array) {
	      return (array && array.length)
	        ? baseSum(array, identity)
	        : 0;
	    }
	
	    /**
	     * This method is like `_.sum` except that it accepts `iteratee` which is
	     * invoked for each element in `array` to generate the value to be summed.
	     * The iteratee is invoked with one argument: (value).
	     *
	     * @static
	     * @memberOf _
	     * @since 4.0.0
	     * @category Math
	     * @param {Array} array The array to iterate over.
	     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
	     *
	     * _.sumBy(objects, function(o) { return o.n; });
	     * // => 20
	     *
	     * // The `_.property` iteratee shorthand.
	     * _.sumBy(objects, 'n');
	     * // => 20
	     */
	    function sumBy(array, iteratee) {
	      return (array && array.length)
	        ? baseSum(array, getIteratee(iteratee, 2))
	        : 0;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return wrapped values in chain sequences.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.assignIn = assignIn;
	    lodash.assignInWith = assignInWith;
	    lodash.assignWith = assignWith;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.castArray = castArray;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.concat = concat;
	    lodash.cond = cond;
	    lodash.conforms = conforms;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.differenceBy = differenceBy;
	    lodash.differenceWith = differenceWith;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatMap = flatMap;
	    lodash.flatMapDeep = flatMapDeep;
	    lodash.flatMapDepth = flatMapDepth;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flattenDepth = flattenDepth;
	    lodash.flip = flip;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.fromPairs = fromPairs;
	    lodash.functions = functions;
	    lodash.functionsIn = functionsIn;
	    lodash.groupBy = groupBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.intersectionBy = intersectionBy;
	    lodash.intersectionWith = intersectionWith;
	    lodash.invert = invert;
	    lodash.invertBy = invertBy;
	    lodash.invokeMap = invokeMap;
	    lodash.iteratee = iteratee;
	    lodash.keyBy = keyBy;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.mergeWith = mergeWith;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.nthArg = nthArg;
	    lodash.omit = omit;
	    lodash.omitBy = omitBy;
	    lodash.once = once;
	    lodash.orderBy = orderBy;
	    lodash.over = over;
	    lodash.overArgs = overArgs;
	    lodash.overEvery = overEvery;
	    lodash.overSome = overSome;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pickBy = pickBy;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAll = pullAll;
	    lodash.pullAllBy = pullAllBy;
	    lodash.pullAllWith = pullAllWith;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rangeRight = rangeRight;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.reverse = reverse;
	    lodash.sampleSize = sampleSize;
	    lodash.set = set;
	    lodash.setWith = setWith;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortedUniq = sortedUniq;
	    lodash.sortedUniqBy = sortedUniqBy;
	    lodash.split = split;
	    lodash.spread = spread;
	    lodash.tail = tail;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.toArray = toArray;
	    lodash.toPairs = toPairs;
	    lodash.toPairsIn = toPairsIn;
	    lodash.toPath = toPath;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.unary = unary;
	    lodash.union = union;
	    lodash.unionBy = unionBy;
	    lodash.unionWith = unionWith;
	    lodash.uniq = uniq;
	    lodash.uniqBy = uniqBy;
	    lodash.uniqWith = uniqWith;
	    lodash.unset = unset;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.update = update;
	    lodash.updateWith = updateWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.without = without;
	    lodash.words = words;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.xorBy = xorBy;
	    lodash.xorWith = xorWith;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipObjectDeep = zipObjectDeep;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.entries = toPairs;
	    lodash.entriesIn = toPairsIn;
	    lodash.extend = assignIn;
	    lodash.extendWith = assignInWith;
	
	    // Add methods to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add methods that return unwrapped values in chain sequences.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clamp = clamp;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.cloneDeepWith = cloneDeepWith;
	    lodash.cloneWith = cloneWith;
	    lodash.conformsTo = conformsTo;
	    lodash.deburr = deburr;
	    lodash.defaultTo = defaultTo;
	    lodash.divide = divide;
	    lodash.endsWith = endsWith;
	    lodash.eq = eq;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.floor = floor;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.hasIn = hasIn;
	    lodash.head = head;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.invoke = invoke;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isArrayBuffer = isArrayBuffer;
	    lodash.isArrayLike = isArrayLike;
	    lodash.isArrayLikeObject = isArrayLikeObject;
	    lodash.isBoolean = isBoolean;
	    lodash.isBuffer = isBuffer;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isEqualWith = isEqualWith;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isInteger = isInteger;
	    lodash.isLength = isLength;
	    lodash.isMap = isMap;
	    lodash.isMatch = isMatch;
	    lodash.isMatchWith = isMatchWith;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNil = isNil;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isObjectLike = isObjectLike;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isSafeInteger = isSafeInteger;
	    lodash.isSet = isSet;
	    lodash.isString = isString;
	    lodash.isSymbol = isSymbol;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.isWeakMap = isWeakMap;
	    lodash.isWeakSet = isWeakSet;
	    lodash.join = join;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lowerCase = lowerCase;
	    lodash.lowerFirst = lowerFirst;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.maxBy = maxBy;
	    lodash.mean = mean;
	    lodash.meanBy = meanBy;
	    lodash.min = min;
	    lodash.minBy = minBy;
	    lodash.stubArray = stubArray;
	    lodash.stubFalse = stubFalse;
	    lodash.stubObject = stubObject;
	    lodash.stubString = stubString;
	    lodash.stubTrue = stubTrue;
	    lodash.multiply = multiply;
	    lodash.nth = nth;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padEnd = padEnd;
	    lodash.padStart = padStart;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.replace = replace;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.sample = sample;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedIndexBy = sortedIndexBy;
	    lodash.sortedIndexOf = sortedIndexOf;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.sortedLastIndexBy = sortedLastIndexBy;
	    lodash.sortedLastIndexOf = sortedLastIndexOf;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.subtract = subtract;
	    lodash.sum = sum;
	    lodash.sumBy = sumBy;
	    lodash.template = template;
	    lodash.times = times;
	    lodash.toFinite = toFinite;
	    lodash.toInteger = toInteger;
	    lodash.toLength = toLength;
	    lodash.toLower = toLower;
	    lodash.toNumber = toNumber;
	    lodash.toSafeInteger = toSafeInteger;
	    lodash.toString = toString;
	    lodash.toUpper = toUpper;
	    lodash.trim = trim;
	    lodash.trimEnd = trimEnd;
	    lodash.trimStart = trimStart;
	    lodash.truncate = truncate;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.upperCase = upperCase;
	    lodash.upperFirst = upperFirst;
	
	    // Add aliases.
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.first = head;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), { 'chain': false });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type {string}
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
	
	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(n, result.__takeCount__);
	        } else {
	          result.__views__.push({
	            'size': nativeMin(n, MAX_ARRAY_LENGTH),
	            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
	          });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee) {
	        var result = this.clone();
	        result.__iteratees__.push({
	          'iteratee': getIteratee(iteratee, 3),
	          'type': type
	        });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.head` and `_.last`.
	    arrayEach(['head', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
	    arrayEach(['initial', 'tail'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.find = function(predicate) {
	      return this.filter(predicate).head();
	    };
	
	    LazyWrapper.prototype.findLast = function(predicate) {
	      return this.reverse().find(predicate);
	    };
	
	    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
	      if (typeof path == 'function') {
	        return new LazyWrapper(this);
	      }
	      return this.map(function(value) {
	        return baseInvoke(value, path, args);
	      });
	    });
	
	    LazyWrapper.prototype.reject = function(predicate) {
	      return this.filter(negate(getIteratee(predicate)));
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = toInteger(start);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = toInteger(end);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate) {
	      return this.reverse().takeWhile(predicate).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(MAX_ARRAY_LENGTH);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
	          isTaker = /^(?:head|last)$/.test(methodName),
	          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
	          retUnwrapped = isTaker || /^find/.test(methodName);
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            args = isTaker ? [1] : arguments,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        var interceptor = function(value) {
	          var result = lodashFunc.apply(lodash, arrayPush([value], args));
	          return (isTaker && chainAll) ? result[0] : result;
	        };
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var chainAll = this.__chain__,
	            isHybrid = !!this.__actions__.length,
	            isUnwrapped = retUnwrapped && !chainAll,
	            onlyLazy = isLazy && !isHybrid;
	
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	          return new LodashWrapper(result, chainAll);
	        }
	        if (isUnwrapped && onlyLazy) {
	          return func.apply(this, args);
	        }
	        result = this.thru(interceptor);
	        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
	      };
	    });
	
	    // Add `Array` methods to `lodash.prototype`.
	    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayProto[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:pop|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          var value = this.value();
	          return func.apply(isArray(value) ? value : [], args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(isArray(value) ? value : [], args);
	        });
	      };
	    });
	
	    // Map minified method names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = (lodashFunc.name + ''),
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybrid(undefined, BIND_KEY_FLAG).name] = [{
	      'name': 'wrapper',
	      'func': undefined
	    }];
	
	    // Add methods to `LazyWrapper`.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chain sequence methods to the `lodash` wrapper.
	    lodash.prototype.at = wrapperAt;
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.next = wrapperNext;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add lazy aliases.
	    lodash.prototype.first = lodash.prototype.head;
	
	    if (iteratorSymbol) {
	      lodash.prototype[iteratorSymbol] = wrapperToIterator;
	    }
	    return lodash;
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers, like r.js, check for condition patterns like:
	  if (true) {
	    // Expose Lodash on the global object to prevent errors when Lodash is
	    // loaded by a script tag in the presence of an AMD loader.
	    // See http://requirejs.org/docs/errors.html#mismatch for more details.
	    // Use `_.noConflict` to remove Lodash from the global object.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds it.
	  else if (freeModule) {
	    // Export for Node.js.
	    (freeModule.exports = _)._ = _;
	    // Export for CommonJS support.
	    freeExports._ = _;
	  }
	  else {
	    // Export to the global object.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(10)(module)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var logger = function logger(text) {
	    var div = document.createElement('div');
	    div.innerHTML = text;
	    document.body.appendChild(div);
	};
	
	exports.default = logger;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var faker = __webpack_require__(13);
	
	var groupCreater = function groupCreater() {
	    var firstName = faker.name.firstName();
	    var lastName = faker.name.lastName();
	    var phone = faker.phone.phoneNumber();
	    var email = faker.internet.email();
	
	    return {
	        "Name": firstName + " " + lastName,
	        "Members": [{
	            "Person": {
	                "Gender": {
	                    "Id": null,
	                    "Name": null,
	                    "SystemName": "Male"
	                },
	                "Title": "Mr",
	                "FirstName": firstName,
	                "LastName": lastName,
	                "Addresses": [],
	                "ContactItems": [{
	                    "Type": {
	                        "Id": 240,
	                        "Name": "Email",
	                        "SystemName": "Email"
	                    },
	                    "Value": email
	                }, {
	                    "Type": {
	                        "Id": 243,
	                        "Name": "Mobile",
	                        "SystemName": "Mobile"
	                    },
	                    "Value": phone,
	                    "ContactOrder": 0,
	                    "AllowContact": true
	                }, {
	                    "Type": {
	                        "Id": 241,
	                        "Name": "Telephone",
	                        "SystemName": "Telephone"
	                    },
	                    "Value": phone
	                }, {
	                    "Type": {
	                        "Id": 244,
	                        "Name": "Work Phone",
	                        "SystemName": "WorkPhone"
	                    },
	                    "Value": phone
	                }],
	                "PrimaryAddress": null
	            },
	            "RelationshipType": {
	                "SystemName": "PrimaryGroupMember"
	            }
	        }],
	        "GroupType": {
	            "SystemName": "Individual"
	        },
	        "Origin": {},
	        "Grade": {
	            "SystemName": "One"
	        },
	        "ExternalProviderTypes": [],
	        "PrimaryContact": {
	            "Gender": {
	                "Id": null,
	                "Name": null,
	                "SystemName": "Male"
	            },
	            "Title": "Mr",
	            "FirstName": firstName,
	            "LastName": lastName,
	            "Addresses": [],
	            "ContactItems": [{
	                "Type": {
	                    "Id": 240,
	                    "Name": "Email",
	                    "SystemName": "Email"
	                },
	                "Value": email
	            }, {
	                "Type": {
	                    "Id": 243,
	                    "Name": "Mobile",
	                    "SystemName": "Mobile"
	                },
	                "Value": phone,
	                "ContactOrder": 0,
	                "AllowContact": true
	            }, {
	                "Type": {
	                    "Id": 241,
	                    "Name": "Telephone",
	                    "SystemName": "Telephone"
	                },
	                "Value": phone
	            }, {
	                "Type": {
	                    "Id": 244,
	                    "Name": "Work Phone",
	                    "SystemName": "WorkPhone"
	                },
	                "Value": phone
	            }],
	            "PrimaryAddress": null
	        }
	    };
	};
	
	exports.default = groupCreater;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var Faker = __webpack_require__(14);
	var faker = new Faker({ locale: 'en_GB', localeFallback: 'en' });
	faker.locales['en_GB'] = __webpack_require__(33);
	faker.locales['en'] = __webpack_require__(45);
	module['exports'] = faker;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*
	
	   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle
	
	   you can include the faker library into your existing node.js application by requiring the entire /faker directory
	
	    var faker = require(./faker);
	    var randomName = faker.name.findName();
	
	   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library
	
	    var faker = require(./customAppPath/faker);
	    var randomName = faker.name.findName();
	
	
	  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory
	
	*/
	
	/**
	 *
	 * @namespace faker
	 */
	function Faker (opts) {
	
	  var self = this;
	
	  opts = opts || {};
	
	  // assign options
	  var locales = self.locales || opts.locales || {};
	  var locale = self.locale || opts.locale || "en";
	  var localeFallback = self.localeFallback || opts.localeFallback || "en";
	
	  self.locales = locales;
	  self.locale = locale;
	  self.localeFallback = localeFallback;
	
	  self.definitions = {};
	
	  var Fake = __webpack_require__(15);
	  self.fake = new Fake(self).fake;
	
	  var Random = __webpack_require__(16);
	  self.random = new Random(self);
	  // self.random = require('./random');
	
	  var Helpers = __webpack_require__(18);
	  self.helpers = new Helpers(self);
	
	  var Name = __webpack_require__(19);
	  self.name = new Name(self);
	  // self.name = require('./name');
	
	  var Address = __webpack_require__(20);
	  self.address = new Address(self);
	
	  var Company = __webpack_require__(21);
	  self.company = new Company(self);
	
	  var Finance = __webpack_require__(22);
	  self.finance = new Finance(self);
	
	  var Image = __webpack_require__(23);
	  self.image = new Image(self);
	
	  var Lorem = __webpack_require__(24);
	  self.lorem = new Lorem(self);
	
	  var Hacker = __webpack_require__(25);
	  self.hacker = new Hacker(self);
	
	  var Internet = __webpack_require__(26);
	  self.internet = new Internet(self);
	
	  var Phone = __webpack_require__(29);
	  self.phone = new Phone(self);
	
	  var _Date = __webpack_require__(30);
	  self.date = new _Date(self);
	
	  var Commerce = __webpack_require__(31);
	  self.commerce = new Commerce(self);
	
	  var System = __webpack_require__(32);
	  self.system = new System(self);
	
	  var _definitions = {
	    "name": ["first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name"],
	    "address": ["city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode"],
	    "company": ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix"],
	    "lorem": ["words"],
	    "hacker": ["abbreviation", "adjective", "noun", "verb", "ingverb"],
	    "phone_number": ["formats"],
	    "finance": ["account_type", "transaction_type", "currency"],
	    "internet": ["avatar_uri", "domain_suffix", "free_email", "example_email", "password"],
	    "commerce": ["color", "department", "product_name", "price", "categories"],
	    "system": ["mimeTypes"],
	    "date": ["month", "weekday"],
	    "title": "",
	    "separator": ""
	  };
	
	  // Create a Getter for all definitions.foo.bar propetries
	  Object.keys(_definitions).forEach(function(d){
	    if (typeof self.definitions[d] === "undefined") {
	      self.definitions[d] = {};
	    }
	
	    if (typeof _definitions[d] === "string") {
	        self.definitions[d] = _definitions[d];
	      return;
	    }
	
	    _definitions[d].forEach(function(p){
	      Object.defineProperty(self.definitions[d], p, {
	        get: function () {
	          if (typeof self.locales[self.locale][d] === "undefined" || typeof self.locales[self.locale][d][p] === "undefined") {
	            // certain localization sets contain less data then others.
	            // in the case of a missing defintion, use the default localeFallback to substitute the missing set data
	            // throw new Error('unknown property ' + d + p)
	            return self.locales[localeFallback][d][p];
	          } else {
	            // return localized data
	            return self.locales[self.locale][d][p];
	          }
	        }
	      });
	    });
	  });
	
	};
	
	Faker.prototype.seed = function(value) {
	  var Random = __webpack_require__(16);
	  this.seedValue = value;
	  this.random = new Random(this, this.seedValue);
	}
	module['exports'] = Faker;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*
	  fake.js - generator method for combining faker methods based on string input
	
	*/
	
	function Fake (faker) {
	  
	  /**
	   * Generator method for combining faker methods based on string input
	   *
	   * __Example:__
	   *
	   * ```
	   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
	   * //outputs: "Marks, Dean Sr."
	   * ```
	   *
	   * This will interpolate the format string with the value of methods
	   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
	   * and [name.suffix]{@link faker.name.suffix}
	   *
	   * @method faker.fake
	   * @param {string} str
	   */
	  this.fake = function fake (str) {
	    // setup default response as empty string
	    var res = '';
	
	    // if incoming str parameter is not provided, return error message
	    if (typeof str !== 'string' || str.length === 0) {
	      res = 'string parameter is required!';
	      return res;
	    }
	
	    // find first matching {{ and }}
	    var start = str.search('{{');
	    var end = str.search('}}');
	
	    // if no {{ and }} is found, we are done
	    if (start === -1 && end === -1) {
	      return str;
	    }
	
	    // console.log('attempting to parse', str);
	
	    // extract method name from between the {{ }} that we found
	    // for example: {{name.firstName}}
	    var token = str.substr(start + 2,  end - start - 2);
	    var method = token.replace('}}', '').replace('{{', '');
	
	    // console.log('method', method)
	
	    // extract method parameters
	    var regExp = /\(([^)]+)\)/;
	    var matches = regExp.exec(method);
	    var parameters = '';
	    if (matches) {
	      method = method.replace(regExp, '');
	      parameters = matches[1];
	    }
	
	    // split the method into module and function
	    var parts = method.split('.');
	
	    if (typeof faker[parts[0]] === "undefined") {
	      throw new Error('Invalid module: ' + parts[0]);
	    }
	
	    if (typeof faker[parts[0]][parts[1]] === "undefined") {
	      throw new Error('Invalid method: ' + parts[0] + "." + parts[1]);
	    }
	
	    // assign the function from the module.function namespace
	    var fn = faker[parts[0]][parts[1]];
	
	    // If parameters are populated here, they are always going to be of string type
	    // since we might actually be dealing with an object or array,
	    // we always attempt to the parse the incoming parameters into JSON
	    var params;
	    // Note: we experience a small performance hit here due to JSON.parse try / catch
	    // If anyone actually needs to optimize this specific code path, please open a support issue on github
	    try {
	      params = JSON.parse(parameters)
	    } catch (err) {
	      // since JSON.parse threw an error, assume parameters was actually a string
	      params = parameters;
	    }
	
	    var result;
	    if (typeof params === "string" && params.length === 0) {
	      result = fn.call(this);
	    } else {
	      result = fn.call(this, params);
	    }
	
	    // replace the found tag with the returned fake value
	    res = str.replace('{{' + token + '}}', result);
	
	    // return the response recursively until we are done finding all tags
	    return fake(res);    
	  }
	  
	  return this;
	  
	  
	}
	
	module['exports'] = Fake;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var mersenne = __webpack_require__(17);
	
	/**
	 *
	 * @namespace faker.random
	 */
	function Random (faker, seed) {
	  // Use a user provided seed if it exists
	  if (seed) {
	    if (Array.isArray(seed) && seed.length) {
	      mersenne.seed_array(seed);
	    }
	    else {
	      mersenne.seed(seed);
	    }
	  }
	  /**
	   * returns a single random number based on a max number or range
	   *
	   * @method faker.random.number
	   * @param {mixed} options
	   */
	  this.number = function (options) {
	
	    if (typeof options === "number") {
	      options = {
	        max: options
	      };
	    }
	
	    options = options || {};
	
	    if (typeof options.min === "undefined") {
	      options.min = 0;
	    }
	
	    if (typeof options.max === "undefined") {
	      options.max = 99999;
	    }
	    if (typeof options.precision === "undefined") {
	      options.precision = 1;
	    }
	
	    // Make the range inclusive of the max value
	    var max = options.max;
	    if (max >= 0) {
	      max += options.precision;
	    }
	
	    var randomNumber = options.precision * Math.floor(
	      mersenne.rand(max / options.precision, options.min / options.precision));
	
	    return randomNumber;
	
	  }
	
	  /**
	   * takes an array and returns a random element of the array
	   *
	   * @method faker.random.arrayElement
	   * @param {array} array
	   */
	  this.arrayElement = function (array) {
	      array = array || ["a", "b", "c"];
	      var r = faker.random.number({ max: array.length - 1 });
	      return array[r];
	  }
	
	  /**
	   * takes an object and returns the randomly key or value
	   *
	   * @method faker.random.objectElement
	   * @param {object} object
	   * @param {mixed} field
	   */
	  this.objectElement = function (object, field) {
	      object = object || { "foo": "bar", "too": "car" };
	      var array = Object.keys(object);
	      var key = faker.random.arrayElement(array);
	
	      return field === "key" ? key : object[key];
	  }
	
	  /**
	   * uuid
	   *
	   * @method faker.random.uuid
	   */
	  this.uuid = function () {
	      var self = this;
	      var RFC4122_TEMPLATE = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
	      var replacePlaceholders = function (placeholder) {
	          var random = self.number({ min: 0, max: 15 });
	          var value = placeholder == 'x' ? random : (random &0x3 | 0x8);
	          return value.toString(16);
	      };
	      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
	  }
	
	  /**
	   * boolean
	   *
	   * @method faker.random.boolean
	   */
	  this.boolean = function () {
	      return !!faker.random.number(1)
	  }
	
	  // TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc
	  /**
	   * word
	   *
	   * @method faker.random.word
	   * @param {string} type
	   */
	  this.word = function randomWord (type) {
	
	    var wordMethods = [
	    'commerce.department',
	    'commerce.productName',
	    'commerce.productAdjective',
	    'commerce.productMaterial',
	    'commerce.product',
	    'commerce.color',
	
	    'company.catchPhraseAdjective',
	    'company.catchPhraseDescriptor',
	    'company.catchPhraseNoun',
	    'company.bsAdjective',
	    'company.bsBuzz',
	    'company.bsNoun',
	    'address.streetSuffix',
	    'address.county',
	    'address.country',
	    'address.state',
	
	    'finance.accountName',
	    'finance.transactionType',
	    'finance.currencyName',
	
	    'hacker.noun',
	    'hacker.verb',
	    'hacker.adjective',
	    'hacker.ingverb',
	    'hacker.abbreviation',
	
	    'name.jobDescriptor',
	    'name.jobArea',
	    'name.jobType'];
	
	    // randomly pick from the many faker methods that can generate words
	    var randomWordMethod = faker.random.arrayElement(wordMethods);
	    return faker.fake('{{' + randomWordMethod + '}}');
	
	  }
	
	  /**
	   * randomWords
	   *
	   * @method faker.random.words
	   * @param {number} count defaults to a random value between 1 and 3
	   */
	  this.words = function randomWords (count) {
	    var words = [];
	    if (typeof count === "undefined") {
	      count = faker.random.number({min:1, max: 3});
	    }
	    for (var i = 0; i<count; i++) {
	      words.push(faker.random.word());
	    }
	    return words.join(' ');
	  }
	
	  /**
	   * locale
	   *
	   * @method faker.random.image
	   */
	  this.image = function randomImage () {
	    return faker.image.image();
	  }
	
	  /**
	   * locale
	   *
	   * @method faker.random.locale
	   */
	  this.locale = function randomLocale () {
	    return faker.random.arrayElement(Object.keys(faker.locales));
	  };
	
	  /**
	   * alphaNumeric
	   *
	   * @method faker.random.alphaNumeric
	   */
	  this.alphaNumeric = function alphaNumeric() {
	    return faker.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
	  }
	
	  return this;
	
	}
	
	module['exports'] = Random;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,
	// an almost straight conversion from the original program, mt19937ar.c,
	// translated by y. okada on July 17, 2006.
	// and modified a little at july 20, 2006, but there are not any substantial differences.
	// in this program, procedure descriptions and comments of original source code were not removed.
	// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.
	// lines commented with /* and */ are original comments.
	// lines commented with // are additional comments in this JavaScript version.
	// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.
	/*
	   A C-program for MT19937, with initialization improved 2002/1/26.
	   Coded by Takuji Nishimura and Makoto Matsumoto.
	
	   Before using, initialize the state by using init_genrand(seed)
	   or init_by_array(init_key, key_length).
	
	   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
	   All rights reserved.
	
	   Redistribution and use in source and binary forms, with or without
	   modification, are permitted provided that the following conditions
	   are met:
	
	     1. Redistributions of source code must retain the above copyright
	        notice, this list of conditions and the following disclaimer.
	
	     2. Redistributions in binary form must reproduce the above copyright
	        notice, this list of conditions and the following disclaimer in the
	        documentation and/or other materials provided with the distribution.
	
	     3. The names of its contributors may not be used to endorse or promote
	        products derived from this software without specific prior written
	        permission.
	
	   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
	   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
	   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
	   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	
	
	   Any feedback is very welcome.
	   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
	   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
	*/
	
	function MersenneTwister19937()
	{
		/* constants should be scoped inside the class */
		var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
		/* Period parameters */
		//c//#define N 624
		//c//#define M 397
		//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */
		//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */
		//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */
		N = 624;
		M = 397;
		MATRIX_A = 0x9908b0df;   /* constant vector a */
		UPPER_MASK = 0x80000000; /* most significant w-r bits */
		LOWER_MASK = 0x7fffffff; /* least significant r bits */
		//c//static unsigned long mt[N]; /* the array for the state vector  */
		//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */
		var mt = new Array(N);   /* the array for the state vector  */
		var mti = N+1;           /* mti==N+1 means mt[N] is not initialized */
	
		function unsigned32 (n1) // returns a 32-bits unsiged integer from an operand to which applied a bit operator.
		{
			return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
		}
	
		function subtraction32 (n1, n2) // emulates lowerflow of a c 32-bits unsiged integer variable, instead of the operator -. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			return n1 < n2 ? unsigned32((0x100000000 - (n2 - n1)) & 0xffffffff) : n1 - n2;
		}
	
		function addition32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator +. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			return unsigned32((n1 + n2) & 0xffffffff)
		}
	
		function multiplication32 (n1, n2) // emulates overflow of a c 32-bits unsiged integer variable, instead of the operator *. these both arguments must be non-negative integers expressible using unsigned 32 bits.
		{
			var sum = 0;
			for (var i = 0; i < 32; ++i){
				if ((n1 >>> i) & 0x1){
					sum = addition32(sum, unsigned32(n2 << i));
				}
			}
			return sum;
		}
	
		/* initializes mt[N] with a seed */
		//c//void init_genrand(unsigned long s)
		this.init_genrand = function (s)
		{
			//c//mt[0]= s & 0xffffffff;
			mt[0]= unsigned32(s & 0xffffffff);
			for (mti=1; mti<N; mti++) {
				mt[mti] =
				//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);
				addition32(multiplication32(1812433253, unsigned32(mt[mti-1] ^ (mt[mti-1] >>> 30))), mti);
				/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
				/* In the previous versions, MSBs of the seed affect   */
				/* only MSBs of the array mt[].                        */
				/* 2002/01/09 modified by Makoto Matsumoto             */
				//c//mt[mti] &= 0xffffffff;
				mt[mti] = unsigned32(mt[mti] & 0xffffffff);
				/* for >32 bit machines */
			}
		}
	
		/* initialize by an array with array-length */
		/* init_key is the array for initializing keys */
		/* key_length is its length */
		/* slight change for C++, 2004/2/26 */
		//c//void init_by_array(unsigned long init_key[], int key_length)
		this.init_by_array = function (init_key, key_length)
		{
			//c//int i, j, k;
			var i, j, k;
			//c//init_genrand(19650218);
			this.init_genrand(19650218);
			i=1; j=0;
			k = (N>key_length ? N : key_length);
			for (; k; k--) {
				//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))
				//c//	+ init_key[j] + j; /* non linear */
				mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1664525)), init_key[j]), j);
				mt[i] =
				//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
				unsigned32(mt[i] & 0xffffffff);
				i++; j++;
				if (i>=N) { mt[0] = mt[N-1]; i=1; }
				if (j>=key_length) j=0;
			}
			for (k=N-1; k; k--) {
				//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))
				//c//- i; /* non linear */
				mt[i] = subtraction32(unsigned32((dbg=mt[i]) ^ multiplication32(unsigned32(mt[i-1] ^ (mt[i-1] >>> 30)), 1566083941)), i);
				//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */
				mt[i] = unsigned32(mt[i] & 0xffffffff);
				i++;
				if (i>=N) { mt[0] = mt[N-1]; i=1; }
			}
			mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
		}
	
	    /* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */
	    var mag01 = [0x0, MATRIX_A];
	
		/* generates a random number on [0,0xffffffff]-interval */
		//c//unsigned long genrand_int32(void)
		this.genrand_int32 = function ()
		{
			//c//unsigned long y;
			//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};
			var y;
			/* mag01[x] = x * MATRIX_A  for x=0,1 */
	
			if (mti >= N) { /* generate N words at one time */
				//c//int kk;
				var kk;
	
				if (mti == N+1)   /* if init_genrand() has not been called, */
					//c//init_genrand(5489); /* a default initial seed is used */
					this.init_genrand(5489); /* a default initial seed is used */
	
				for (kk=0;kk<N-M;kk++) {
					//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
					//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];
					y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
					mt[kk] = unsigned32(mt[kk+M] ^ (y >>> 1) ^ mag01[y & 0x1]);
				}
				for (;kk<N-1;kk++) {
					//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);
					//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];
					y = unsigned32((mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK));
					mt[kk] = unsigned32(mt[kk+(M-N)] ^ (y >>> 1) ^ mag01[y & 0x1]);
				}
				//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);
				//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];
				y = unsigned32((mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK));
				mt[N-1] = unsigned32(mt[M-1] ^ (y >>> 1) ^ mag01[y & 0x1]);
				mti = 0;
			}
	
			y = mt[mti++];
	
			/* Tempering */
			//c//y ^= (y >> 11);
			//c//y ^= (y << 7) & 0x9d2c5680;
			//c//y ^= (y << 15) & 0xefc60000;
			//c//y ^= (y >> 18);
			y = unsigned32(y ^ (y >>> 11));
			y = unsigned32(y ^ ((y << 7) & 0x9d2c5680));
			y = unsigned32(y ^ ((y << 15) & 0xefc60000));
			y = unsigned32(y ^ (y >>> 18));
	
			return y;
		}
	
		/* generates a random number on [0,0x7fffffff]-interval */
		//c//long genrand_int31(void)
		this.genrand_int31 = function ()
		{
			//c//return (genrand_int32()>>1);
			return (this.genrand_int32()>>>1);
		}
	
		/* generates a random number on [0,1]-real-interval */
		//c//double genrand_real1(void)
		this.genrand_real1 = function ()
		{
			//c//return genrand_int32()*(1.0/4294967295.0);
			return this.genrand_int32()*(1.0/4294967295.0);
			/* divided by 2^32-1 */
		}
	
		/* generates a random number on [0,1)-real-interval */
		//c//double genrand_real2(void)
		this.genrand_real2 = function ()
		{
			//c//return genrand_int32()*(1.0/4294967296.0);
			return this.genrand_int32()*(1.0/4294967296.0);
			/* divided by 2^32 */
		}
	
		/* generates a random number on (0,1)-real-interval */
		//c//double genrand_real3(void)
		this.genrand_real3 = function ()
		{
			//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);
			return ((this.genrand_int32()) + 0.5)*(1.0/4294967296.0);
			/* divided by 2^32 */
		}
	
		/* generates a random number on [0,1) with 53-bit resolution*/
		//c//double genrand_res53(void)
		this.genrand_res53 = function ()
		{
			//c//unsigned long a=genrand_int32()>>5, b=genrand_int32()>>6;
			var a=this.genrand_int32()>>>5, b=this.genrand_int32()>>>6;
			return(a*67108864.0+b)*(1.0/9007199254740992.0);
		}
		/* These real versions are due to Isaku Wada, 2002/01/09 added */
	}
	
	//  Exports: Public API
	
	//  Export the twister class
	exports.MersenneTwister19937 = MersenneTwister19937;
	
	//  Export a simplified function to generate random numbers
	var gen = new MersenneTwister19937;
	gen.init_genrand((new Date).getTime() % 1000000000);
	
	// Added max, min range functionality, Marak Squires Sept 11 2014
	exports.rand = function(max, min) {
	    if (max === undefined)
	        {
	        min = 0;
	        max = 32768;
	        }
	    return Math.floor(gen.genrand_real2() * (max - min) + min);
	}
	exports.seed = function(S) {
	    if (typeof(S) != 'number')
	        {
	        throw new Error("seed(S) must take numeric argument; is " + typeof(S));
	        }
	    gen.init_genrand(S);
	}
	exports.seed_array = function(A) {
	    if (typeof(A) != 'object')
	        {
	        throw new Error("seed_array(A) must take array of numbers; is " + typeof(A));
	        }
	    gen.init_by_array(A);
	}


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.helpers
	 */
	var Helpers = function (faker) {
	
	  var self = this;
	
	  /**
	   * backword-compatibility
	   *
	   * @method faker.helpers.randomize
	   * @param {array} array
	   */
	  self.randomize = function (array) {
	      array = array || ["a", "b", "c"];
	      return faker.random.arrayElement(array);
	  };
	
	  /**
	   * slugifies string
	   *
	   * @method faker.helpers.slugify
	   * @param {string} string
	   */
	  self.slugify = function (string) {
	      string = string || "";
	      return string.replace(/ /g, '-').replace(/[^\w\.\-]+/g, '');
	  };
	
	  /**
	   * parses string for a symbol and replace it with a random number from 1-10
	   *
	   * @method faker.helpers.replaceSymbolWithNumber
	   * @param {string} string
	   * @param {string} symbol defaults to `"#"`
	   */
	  self.replaceSymbolWithNumber = function (string, symbol) {
	      string = string || "";
	      // default symbol is '#'
	      if (symbol === undefined) {
	          symbol = '#';
	      }
	
	      var str = '';
	      for (var i = 0; i < string.length; i++) {
	          if (string.charAt(i) == symbol) {
	              str += faker.random.number(9);
	          } else {
	              str += string.charAt(i);
	          }
	      }
	      return str;
	  };
	
	  /**
	   * parses string for symbols (numbers or letters) and replaces them appropriately
	   *
	   * @method faker.helpers.replaceSymbols
	   * @param {string} string
	   */
	  self.replaceSymbols = function (string) {
	      string = string || "";
	  	var alpha = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
	      var str = '';
	
	      for (var i = 0; i < string.length; i++) {
	          if (string.charAt(i) == "#") {
	              str += faker.random.number(9);
	  		} else if (string.charAt(i) == "?") {
	  			str += faker.random.arrayElement(alpha);
	          } else {
	              str += string.charAt(i);
	          }
	      }
	      return str;
	  };
	
	  /**
	   * takes an array and returns it randomized
	   *
	   * @method faker.helpers.shuffle
	   * @param {array} o
	   */
	  self.shuffle = function (o) {
	      o = o || ["a", "b", "c"];
	      for (var j, x, i = o.length-1; i; j = faker.random.number(i), x = o[--i], o[i] = o[j], o[j] = x);
	      return o;
	  };
	
	  /**
	   * mustache
	   *
	   * @method faker.helpers.mustache
	   * @param {string} str
	   * @param {object} data
	   */
	  self.mustache = function (str, data) {
	    if (typeof str === 'undefined') {
	      return '';
	    }
	    for(var p in data) {
	      var re = new RegExp('{{' + p + '}}', 'g')
	      str = str.replace(re, data[p]);
	    }
	    return str;
	  };
	
	  /**
	   * createCard
	   *
	   * @method faker.helpers.createCard
	   */
	  self.createCard = function () {
	      return {
	          "name": faker.name.findName(),
	          "username": faker.internet.userName(),
	          "email": faker.internet.email(),
	          "address": {
	              "streetA": faker.address.streetName(),
	              "streetB": faker.address.streetAddress(),
	              "streetC": faker.address.streetAddress(true),
	              "streetD": faker.address.secondaryAddress(),
	              "city": faker.address.city(),
	              "state": faker.address.state(),
	              "country": faker.address.country(),
	              "zipcode": faker.address.zipCode(),
	              "geo": {
	                  "lat": faker.address.latitude(),
	                  "lng": faker.address.longitude()
	              }
	          },
	          "phone": faker.phone.phoneNumber(),
	          "website": faker.internet.domainName(),
	          "company": {
	              "name": faker.company.companyName(),
	              "catchPhrase": faker.company.catchPhrase(),
	              "bs": faker.company.bs()
	          },
	          "posts": [
	              {
	                  "words": faker.lorem.words(),
	                  "sentence": faker.lorem.sentence(),
	                  "sentences": faker.lorem.sentences(),
	                  "paragraph": faker.lorem.paragraph()
	              },
	              {
	                  "words": faker.lorem.words(),
	                  "sentence": faker.lorem.sentence(),
	                  "sentences": faker.lorem.sentences(),
	                  "paragraph": faker.lorem.paragraph()
	              },
	              {
	                  "words": faker.lorem.words(),
	                  "sentence": faker.lorem.sentence(),
	                  "sentences": faker.lorem.sentences(),
	                  "paragraph": faker.lorem.paragraph()
	              }
	          ],
	          "accountHistory": [faker.helpers.createTransaction(), faker.helpers.createTransaction(), faker.helpers.createTransaction()]
	      };
	  };
	
	  /**
	   * contextualCard
	   *
	   * @method faker.helpers.contextualCard
	   */
	  self.contextualCard = function () {
	    var name = faker.name.firstName(),
	        userName = faker.internet.userName(name);
	    return {
	        "name": name,
	        "username": userName,
	        "avatar": faker.internet.avatar(),
	        "email": faker.internet.email(userName),
	        "dob": faker.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
	        "phone": faker.phone.phoneNumber(),
	        "address": {
	            "street": faker.address.streetName(true),
	            "suite": faker.address.secondaryAddress(),
	            "city": faker.address.city(),
	            "zipcode": faker.address.zipCode(),
	            "geo": {
	                "lat": faker.address.latitude(),
	                "lng": faker.address.longitude()
	            }
	        },
	        "website": faker.internet.domainName(),
	        "company": {
	            "name": faker.company.companyName(),
	            "catchPhrase": faker.company.catchPhrase(),
	            "bs": faker.company.bs()
	        }
	    };
	  };
	
	
	  /**
	   * userCard
	   *
	   * @method faker.helpers.userCard
	   */
	  self.userCard = function () {
	      return {
	          "name": faker.name.findName(),
	          "username": faker.internet.userName(),
	          "email": faker.internet.email(),
	          "address": {
	              "street": faker.address.streetName(true),
	              "suite": faker.address.secondaryAddress(),
	              "city": faker.address.city(),
	              "zipcode": faker.address.zipCode(),
	              "geo": {
	                  "lat": faker.address.latitude(),
	                  "lng": faker.address.longitude()
	              }
	          },
	          "phone": faker.phone.phoneNumber(),
	          "website": faker.internet.domainName(),
	          "company": {
	              "name": faker.company.companyName(),
	              "catchPhrase": faker.company.catchPhrase(),
	              "bs": faker.company.bs()
	          }
	      };
	  };
	
	  /**
	   * createTransaction
	   *
	   * @method faker.helpers.createTransaction
	   */
	  self.createTransaction = function(){
	    return {
	      "amount" : faker.finance.amount(),
	      "date" : new Date(2012, 1, 2),  //TODO: add a ranged date method
	      "business": faker.company.companyName(),
	      "name": [faker.finance.accountName(), faker.finance.mask()].join(' '),
	      "type" : self.randomize(faker.definitions.finance.transaction_type),
	      "account" : faker.finance.account()
	    };
	  };
	
	  return self;
	
	};
	
	
	/*
	String.prototype.capitalize = function () { //v1.0
	    return this.replace(/\w+/g, function (a) {
	        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
	    });
	};
	*/
	
	module['exports'] = Helpers;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.name
	 */
	function Name (faker) {
	
	  /**
	   * firstName
	   *
	   * @method firstName
	   * @param {mixed} gender
	   * @memberof faker.name
	   */
	  this.firstName = function (gender) {
	    if (typeof faker.definitions.name.male_first_name !== "undefined" && typeof faker.definitions.name.female_first_name !== "undefined") {
	      // some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,
	      // we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )
	      if (typeof gender !== 'number') {
	        gender = faker.random.number(1);
	      }
	      if (gender === 0) {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.male_first_name)
	      } else {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.female_first_name);
	      }
	    }
	    return faker.random.arrayElement(faker.definitions.name.first_name);
	  };
	
	  /**
	   * lastName
	   *
	   * @method lastName
	   * @param {mixed} gender
	   * @memberof faker.name
	   */
	  this.lastName = function (gender) {
	    if (typeof faker.definitions.name.male_last_name !== "undefined" && typeof faker.definitions.name.female_last_name !== "undefined") {
	      // some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian
	      // see above comment of firstName method
	      if (typeof gender !== 'number') {
	        gender = faker.random.number(1);
	      }
	      if (gender === 0) {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.male_last_name);
	      } else {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.female_last_name);
	      }
	    }
	    return faker.random.arrayElement(faker.definitions.name.last_name);
	  };
	
	  /**
	   * findName
	   *
	   * @method findName
	   * @param {string} firstName
	   * @param {string} lastName
	   * @param {mixed} gender
	   * @memberof faker.name
	   */
	  this.findName = function (firstName, lastName, gender) {
	      var r = faker.random.number(8);
	      var prefix, suffix;
	      // in particular locales first and last names split by gender,
	      // thus we keep consistency by passing 0 as male and 1 as female
	      if (typeof gender !== 'number') {
	        gender = faker.random.number(1);
	      }
	      firstName = firstName || faker.name.firstName(gender);
	      lastName = lastName || faker.name.lastName(gender);
	      switch (r) {
	      case 0:
	          prefix = faker.name.prefix(gender);
	          if (prefix) {
	              return prefix + " " + firstName + " " + lastName;
	          }
	      case 1:
	          suffix = faker.name.suffix(gender);
	          if (suffix) {
	              return firstName + " " + lastName + " " + suffix;
	          }
	      }
	
	      return firstName + " " + lastName;
	  };
	
	  /**
	   * jobTitle
	   *
	   * @method jobTitle
	   * @memberof faker.name
	   */
	  this.jobTitle = function () {
	    return  faker.name.jobDescriptor() + " " +
	      faker.name.jobArea() + " " +
	      faker.name.jobType();
	  };
	  
	  /**
	   * prefix
	   *
	   * @method prefix
	   * @param {mixed} gender
	   * @memberof faker.name
	   */
	  this.prefix = function (gender) {
	    if (typeof faker.definitions.name.male_prefix !== "undefined" && typeof faker.definitions.name.female_prefix !== "undefined") {
	      if (typeof gender !== 'number') {
	        gender = faker.random.number(1);
	      }
	      if (gender === 0) {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.male_prefix);
	      } else {
	        return faker.random.arrayElement(faker.locales[faker.locale].name.female_prefix);
	      }
	    }
	    return faker.random.arrayElement(faker.definitions.name.prefix);
	  };
	
	  /**
	   * suffix
	   *
	   * @method suffix
	   * @memberof faker.name
	   */
	  this.suffix = function () {
	      return faker.random.arrayElement(faker.definitions.name.suffix);
	  };
	
	  /**
	   * title
	   *
	   * @method title
	   * @memberof faker.name
	   */
	  this.title = function() {
	      var descriptor  = faker.random.arrayElement(faker.definitions.name.title.descriptor),
	          level       = faker.random.arrayElement(faker.definitions.name.title.level),
	          job         = faker.random.arrayElement(faker.definitions.name.title.job);
	
	      return descriptor + " " + level + " " + job;
	  };
	
	  /**
	   * jobDescriptor
	   *
	   * @method jobDescriptor
	   * @memberof faker.name
	   */
	  this.jobDescriptor = function () {
	    return faker.random.arrayElement(faker.definitions.name.title.descriptor);
	  };
	
	  /**
	   * jobArea
	   *
	   * @method jobArea
	   * @memberof faker.name
	   */
	  this.jobArea = function () {
	    return faker.random.arrayElement(faker.definitions.name.title.level);
	  };
	
	  /**
	   * jobType
	   *
	   * @method jobType
	   * @memberof faker.name
	   */
	  this.jobType = function () {
	    return faker.random.arrayElement(faker.definitions.name.title.job);
	  };
	
	}
	
	module['exports'] = Name;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 *
	 * @namespace faker.address
	 */
	function Address (faker) {
	  var f = faker.fake,
	      Helpers = faker.helpers;
	
	  /**
	   * Generates random zipcode from format. If format is not specified, the
	   * locale's zip format is used.
	   *
	   * @method faker.address.zipCode
	   * @param {String} format
	   */
	  this.zipCode = function(format) {
	    // if zip format is not specified, use the zip format defined for the locale
	    if (typeof format === 'undefined') {
	      var localeFormat = faker.definitions.address.postcode;
	      if (typeof localeFormat === 'string') {
	        format = localeFormat;
	      } else {
	        format = faker.random.arrayElement(localeFormat);
	      }
	    }
	    return Helpers.replaceSymbols(format);
	  }
	
	  /**
	   * Generates a random localized city name. The format string can contain any
	   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
	   * order to build the city name.
	   *
	   * If no format string is provided one of the following is randomly used:
	   * 
	   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
	   * * `{{address.cityPrefix}} {{name.firstName}}`
	   * * `{{name.firstName}}{{address.citySuffix}}`
	   * * `{{name.lastName}}{{address.citySuffix}}`
	   *
	   * @method faker.address.city
	   * @param {String} format
	   */
	  this.city = function (format) {
	    var formats = [
	      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',
	      '{{address.cityPrefix}} {{name.firstName}}',
	      '{{name.firstName}}{{address.citySuffix}}',
	      '{{name.lastName}}{{address.citySuffix}}'
	    ];
	
	    if (typeof format !== "number") {
	      format = faker.random.number(formats.length - 1);
	    }
	
	    return f(formats[format]);
	
	  }
	
	  /**
	   * Return a random localized city prefix
	   * @method faker.address.cityPrefix
	   */
	  this.cityPrefix = function () {
	    return faker.random.arrayElement(faker.definitions.address.city_prefix);
	  }
	
	  /**
	   * Return a random localized city suffix
	   *
	   * @method faker.address.citySuffix
	   */
	  this.citySuffix = function () {
	    return faker.random.arrayElement(faker.definitions.address.city_suffix);
	  }
	
	  /**
	   * Returns a random localized street name
	   *
	   * @method faker.address.streetName
	   */
	  this.streetName = function () {
	      var result;
	      var suffix = faker.address.streetSuffix();
	      if (suffix !== "") {
	          suffix = " " + suffix
	      }
	
	      switch (faker.random.number(1)) {
	      case 0:
	          result = faker.name.lastName() + suffix;
	          break;
	      case 1:
	          result = faker.name.firstName() + suffix;
	          break;
	      }
	      return result;
	  }
	
	  //
	  // TODO: change all these methods that accept a boolean to instead accept an options hash.
	  //
	  /**
	   * Returns a random localized street address
	   *
	   * @method faker.address.streetAddress
	   * @param {Boolean} useFullAddress
	   */
	  this.streetAddress = function (useFullAddress) {
	      if (useFullAddress === undefined) { useFullAddress = false; }
	      var address = "";
	      switch (faker.random.number(2)) {
	      case 0:
	          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
	          break;
	      case 1:
	          address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
	          break;
	      case 2:
	          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
	          break;
	      }
	      return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
	  }
	
	  /**
	   * streetSuffix
	   *
	   * @method faker.address.streetSuffix
	   */
	  this.streetSuffix = function () {
	      return faker.random.arrayElement(faker.definitions.address.street_suffix);
	  }
	  
	  /**
	   * streetPrefix
	   *
	   * @method faker.address.streetPrefix
	   */
	  this.streetPrefix = function () {
	      return faker.random.arrayElement(faker.definitions.address.street_prefix);
	  }
	
	  /**
	   * secondaryAddress
	   *
	   * @method faker.address.secondaryAddress
	   */
	  this.secondaryAddress = function () {
	      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(
	          [
	              'Apt. ###',
	              'Suite ###'
	          ]
	      ));
	  }
	
	  /**
	   * county
	   *
	   * @method faker.address.county
	   */
	  this.county = function () {
	    return faker.random.arrayElement(faker.definitions.address.county);
	  }
	
	  /**
	   * country
	   *
	   * @method faker.address.country
	   */
	  this.country = function () {
	    return faker.random.arrayElement(faker.definitions.address.country);
	  }
	
	  /**
	   * countryCode
	   *
	   * @method faker.address.countryCode
	   */
	  this.countryCode = function () {
	    return faker.random.arrayElement(faker.definitions.address.country_code);
	  }
	
	  /**
	   * state
	   *
	   * @method faker.address.state
	   * @param {Boolean} useAbbr
	   */
	  this.state = function (useAbbr) {
	      return faker.random.arrayElement(faker.definitions.address.state);
	  }
	
	  /**
	   * stateAbbr
	   *
	   * @method faker.address.stateAbbr
	   */
	  this.stateAbbr = function () {
	      return faker.random.arrayElement(faker.definitions.address.state_abbr);
	  }
	
	  /**
	   * latitude
	   *
	   * @method faker.address.latitude
	   */
	  this.latitude = function () {
	      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
	  }
	
	  /**
	   * longitude
	   *
	   * @method faker.address.longitude
	   */
	  this.longitude = function () {
	      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
	  }
	  
	  return this;
	}
	
	
	module.exports = Address;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.company
	 */
	var Company = function (faker) {
	  
	  var self = this;
	  var f = faker.fake;
	  
	  /**
	   * suffixes
	   *
	   * @method faker.company.suffixes
	   */
	  this.suffixes = function () {
	    // Don't want the source array exposed to modification, so return a copy
	    return faker.definitions.company.suffix.slice(0);
	  }
	
	  /**
	   * companyName
	   *
	   * @method faker.company.companyName
	   * @param {string} format
	   */
	  this.companyName = function (format) {
	
	    var formats = [
	      '{{name.lastName}} {{company.companySuffix}}',
	      '{{name.lastName}} - {{name.lastName}}',
	      '{{name.lastName}}, {{name.lastName}} and {{name.lastName}}'
	    ];
	
	    if (typeof format !== "number") {
	      format = faker.random.number(formats.length - 1);
	    }
	
	    return f(formats[format]);
	  }
	
	  /**
	   * companySuffix
	   *
	   * @method faker.company.companySuffix
	   */
	  this.companySuffix = function () {
	      return faker.random.arrayElement(faker.company.suffixes());
	  }
	
	  /**
	   * catchPhrase
	   *
	   * @method faker.company.catchPhrase
	   */
	  this.catchPhrase = function () {
	    return f('{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}')
	  }
	
	  /**
	   * bs
	   *
	   * @method faker.company.bs
	   */
	  this.bs = function () {
	    return f('{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}');
	  }
	
	  /**
	   * catchPhraseAdjective
	   *
	   * @method faker.company.catchPhraseAdjective
	   */
	  this.catchPhraseAdjective = function () {
	      return faker.random.arrayElement(faker.definitions.company.adjective);
	  }
	
	  /**
	   * catchPhraseDescriptor
	   *
	   * @method faker.company.catchPhraseDescriptor
	   */
	  this.catchPhraseDescriptor = function () {
	      return faker.random.arrayElement(faker.definitions.company.descriptor);
	  }
	
	  /**
	   * catchPhraseNoun
	   *
	   * @method faker.company.catchPhraseNoun
	   */
	  this.catchPhraseNoun = function () {
	      return faker.random.arrayElement(faker.definitions.company.noun);
	  }
	
	  /**
	   * bsAdjective
	   *
	   * @method faker.company.bsAdjective
	   */
	  this.bsAdjective = function () {
	      return faker.random.arrayElement(faker.definitions.company.bs_adjective);
	  }
	
	  /**
	   * bsBuzz
	   *
	   * @method faker.company.bsBuzz
	   */
	  this.bsBuzz = function () {
	      return faker.random.arrayElement(faker.definitions.company.bs_verb);
	  }
	
	  /**
	   * bsNoun
	   *
	   * @method faker.company.bsNoun
	   */
	  this.bsNoun = function () {
	      return faker.random.arrayElement(faker.definitions.company.bs_noun);
	  }
	  
	}
	
	module['exports'] = Company;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.finance
	 */
	var Finance = function (faker) {
	  var Helpers = faker.helpers,
	      self = this;
	
	  /**
	   * account
	   *
	   * @method faker.finance.account
	   * @param {number} length
	   */
	  self.account = function (length) {
	
	      length = length || 8;
	
	      var template = '';
	
	      for (var i = 0; i < length; i++) {
	          template = template + '#';
	      }
	      length = null;
	      return Helpers.replaceSymbolWithNumber(template);
	  }
	
	  /**
	   * accountName
	   *
	   * @method faker.finance.accountName
	   */
	  self.accountName = function () {
	
	      return [Helpers.randomize(faker.definitions.finance.account_type), 'Account'].join(' ');
	  }
	
	  /**
	   * mask
	   *
	   * @method faker.finance.mask
	   * @param {number} length
	   * @param {boolean} parens
	   * @param {boolean} elipsis
	   */
	  self.mask = function (length, parens, elipsis) {
	
	
	      //set defaults
	      length = (length == 0 || !length || typeof length == 'undefined') ? 4 : length;
	      parens = (parens === null) ? true : parens;
	      elipsis = (elipsis === null) ? true : elipsis;
	
	      //create a template for length
	      var template = '';
	
	      for (var i = 0; i < length; i++) {
	          template = template + '#';
	      }
	
	      //prefix with elipsis
	      template = (elipsis) ? ['...', template].join('') : template;
	
	      template = (parens) ? ['(', template, ')'].join('') : template;
	
	      //generate random numbers
	      template = Helpers.replaceSymbolWithNumber(template);
	
	      return template;
	
	  }
	
	  //min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc
	  //NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol
	
	  /**
	   * amount
	   *
	   * @method faker.finance.amount
	   * @param {number} min
	   * @param {number} max
	   * @param {number} dec
	   * @param {string} symbol
	   */
	  self.amount = function (min, max, dec, symbol) {
	
	      min = min || 0;
	      max = max || 1000;
	      dec = dec || 2;
	      symbol = symbol || '';
	      var randValue = faker.random.number({ max: max, min: min });
	
	      return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
	
	  }
	
	  /**
	   * transactionType
	   *
	   * @method faker.finance.transactionType
	   */
	  self.transactionType = function () {
	      return Helpers.randomize(faker.definitions.finance.transaction_type);
	  }
	
	  /**
	   * currencyCode
	   *
	   * @method faker.finance.currencyCode
	   */
	  self.currencyCode = function () {
	      return faker.random.objectElement(faker.definitions.finance.currency)['code'];
	  }
	
	  /**
	   * currencyName
	   *
	   * @method faker.finance.currencyName
	   */
	  self.currencyName = function () {
	      return faker.random.objectElement(faker.definitions.finance.currency, 'key');
	  }
	
	  /**
	   * currencySymbol
	   *
	   * @method faker.finance.currencySymbol
	   */
	  self.currencySymbol = function () {
	      var symbol;
	
	      while (!symbol) {
	          symbol = faker.random.objectElement(faker.definitions.finance.currency)['symbol'];
	      }
	      return symbol;
	  }
	
	  /**
	   * bitcoinAddress
	   *
	   * @method  faker.finance.bitcoinAddress
	   */
	  self.bitcoinAddress = function () {
	    var addressLength = faker.random.number({ min: 27, max: 34 });
	
	    var address = faker.random.arrayElement(['1', '3']);
	
	    for (var i = 0; i < addressLength - 1; i++)
	      address += faker.random.alphaNumeric().toUpperCase();
	
	    return address;
	  }
	}
	
	module['exports'] = Finance;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.image
	 */
	var Image = function (faker) {
	
	  var self = this;
	
	  /**
	   * image
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.image
	   */
	  self.image = function (width, height, randomize) {
	    var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
	    return self[faker.random.arrayElement(categories)](width, height, randomize);
	  };
	  /**
	   * avatar
	   *
	   * @method faker.image.avatar
	   */
	  self.avatar = function () {
	    return faker.internet.avatar();
	  };
	  /**
	   * imageUrl
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {string} category
	   * @param {boolean} randomize
	   * @method faker.image.imageUrl
	   */
	  self.imageUrl = function (width, height, category, randomize) {
	      var width = width || 640;
	      var height = height || 480;
	
	      var url ='http://lorempixel.com/' + width + '/' + height;
	      if (typeof category !== 'undefined') {
	        url += '/' + category;
	      }
	
	      if (randomize) {
	        url += '?' + faker.random.number()
	      }
	
	      return url;
	  };
	  /**
	   * abstract
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.abstract
	   */
	  self.abstract = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'abstract', randomize);
	  };
	  /**
	   * animals
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.animals
	   */
	  self.animals = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'animals', randomize);
	  };
	  /**
	   * business
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.business
	   */
	  self.business = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'business', randomize);
	  };
	  /**
	   * cats
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.cats
	   */
	  self.cats = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'cats', randomize);
	  };
	  /**
	   * city
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.city
	   */
	  self.city = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'city', randomize);
	  };
	  /**
	   * food
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.food
	   */
	  self.food = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'food', randomize);
	  };
	  /**
	   * nightlife
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.nightlife
	   */
	  self.nightlife = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'nightlife', randomize);
	  };
	  /**
	   * fashion
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.fashion
	   */
	  self.fashion = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'fashion', randomize);
	  };
	  /**
	   * people
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.people
	   */
	  self.people = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'people', randomize);
	  };
	  /**
	   * nature
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.nature
	   */
	  self.nature = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'nature', randomize);
	  };
	  /**
	   * sports
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.sports
	   */
	  self.sports = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'sports', randomize);
	  };
	  /**
	   * technics
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.technics
	   */
	  self.technics = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'technics', randomize);
	  };
	  /**
	   * transport
	   *
	   * @param {number} width
	   * @param {number} height
	   * @param {boolean} randomize
	   * @method faker.image.transport
	   */
	  self.transport = function (width, height, randomize) {
	    return faker.image.imageUrl(width, height, 'transport', randomize);
	  }  
	}
	
	module["exports"] = Image;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {
	/**
	 *
	 * @namespace faker.lorem
	 */
	var Lorem = function (faker) {
	  var self = this;
	  var Helpers = faker.helpers;
	
	  /**
	   * word
	   *
	   * @method faker.lorem.word
	   * @param {number} num
	   */
	  self.word = function (num) {
	    return faker.random.arrayElement(faker.definitions.lorem.words);
	  };
	
	  /**
	   * generates a space separated list of words
	   *
	   * @method faker.lorem.words
	   * @param {number} num number of words, defaults to 3
	   */
	  self.words = function (num) {
	      if (typeof num == 'undefined') { num = 3; }
	      var words = [];
	      for (var i = 0; i < num; i++) {
	        words.push(faker.lorem.word());
	      }
	      return words.join(' ');
	  };
	
	  /**
	   * sentence
	   *
	   * @method faker.lorem.sentence
	   * @param {number} wordCount defaults to a random number between 3 and 10
	   * @param {number} range
	   */
	  self.sentence = function (wordCount, range) {
	      if (typeof wordCount == 'undefined') { wordCount = faker.random.number({ min: 3, max: 10 }); }
	      // if (typeof range == 'undefined') { range = 7; }
	
	      // strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back
	      //return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();
	
	      var sentence = faker.lorem.words(wordCount);
	      return sentence.charAt(0).toUpperCase() + sentence.slice(1) + '.';
	  };
	
	  /**
	   * sentences
	   *
	   * @method faker.lorem.sentences
	   * @param {number} sentenceCount defautls to a random number between 2 and 6
	   * @param {string} separator defaults to `' '`
	   */
	  self.sentences = function (sentenceCount, separator) {
	      if (typeof sentenceCount === 'undefined') { sentenceCount = faker.random.number({ min: 2, max: 6 });}
	      if (typeof separator == 'undefined') { separator = " "; }
	      var sentences = [];
	      for (sentenceCount; sentenceCount > 0; sentenceCount--) {
	        sentences.push(faker.lorem.sentence());
	      }
	      return sentences.join(separator);
	  };
	
	  /**
	   * paragraph
	   *
	   * @method faker.lorem.paragraph
	   * @param {number} sentenceCount defaults to 3
	   */
	  self.paragraph = function (sentenceCount) {
	      if (typeof sentenceCount == 'undefined') { sentenceCount = 3; }
	      return faker.lorem.sentences(sentenceCount + faker.random.number(3));
	  };
	
	  /**
	   * paragraphs
	   *
	   * @method faker.lorem.paragraphs
	   * @param {number} paragraphCount defaults to 3
	   * @param {string} separatora defaults to `'\n \r'`
	   */
	  self.paragraphs = function (paragraphCount, separator) {
	    if (typeof separator === "undefined") {
	      separator = "\n \r";
	    }
	    if (typeof paragraphCount == 'undefined') { paragraphCount = 3; }
	    var paragraphs = [];
	    for (paragraphCount; paragraphCount > 0; paragraphCount--) {
	        paragraphs.push(faker.lorem.paragraph());
	    }
	    return paragraphs.join(separator);
	  }
	
	  /**
	   * returns random text based on a random lorem method
	   *
	   * @method faker.lorem.text
	   * @param {number} times
	   */
	  self.text = function loremText (times) {
	    var loremMethods = ['lorem.word', 'lorem.words', 'lorem.sentence', 'lorem.sentences', 'lorem.paragraph', 'lorem.paragraphs', 'lorem.lines'];
	    var randomLoremMethod = faker.random.arrayElement(loremMethods);
	    return faker.fake('{{' + randomLoremMethod + '}}');
	  };
	
	  /**
	   * returns lines of lorem separated by `'\n'`
	   *
	   * @method faker.lorem.lines
	   * @param {number} lineCount defaults to a random number between 1 and 5
	   */
	  self.lines = function lines (lineCount) {
	    if (typeof lineCount === 'undefined') { lineCount = faker.random.number({ min: 1, max: 5 });}
	    return faker.lorem.sentences(lineCount, '\n')
	  };
	
	  return self;
	};
	
	
	module["exports"] = Lorem;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.hacker
	 */
	var Hacker = function (faker) {
	  var self = this;
	  
	  /**
	   * abbreviation
	   *
	   * @method faker.hacker.abbreviation
	   */
	  self.abbreviation = function () {
	    return faker.random.arrayElement(faker.definitions.hacker.abbreviation);
	  };
	
	  /**
	   * adjective
	   *
	   * @method faker.hacker.adjective
	   */
	  self.adjective = function () {
	    return faker.random.arrayElement(faker.definitions.hacker.adjective);
	  };
	
	  /**
	   * noun
	   *
	   * @method faker.hacker.noun
	   */
	  self.noun = function () {
	    return faker.random.arrayElement(faker.definitions.hacker.noun);
	  };
	
	  /**
	   * verb
	   *
	   * @method faker.hacker.verb
	   */
	  self.verb = function () {
	    return faker.random.arrayElement(faker.definitions.hacker.verb);
	  };
	
	  /**
	   * ingverb
	   *
	   * @method faker.hacker.ingverb
	   */
	  self.ingverb = function () {
	    return faker.random.arrayElement(faker.definitions.hacker.ingverb);
	  };
	
	  /**
	   * phrase
	   *
	   * @method faker.hacker.phrase
	   */
	  self.phrase = function () {
	
	    var data = {
	      abbreviation: self.abbreviation,
	      adjective: self.adjective,
	      ingverb: self.ingverb,
	      noun: self.noun,
	      verb: self.verb
	    };
	
	    var phrase = faker.random.arrayElement([ "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
	      "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
	      "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
	      "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
	      "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
	      "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
	   ]);
	
	   return faker.helpers.mustache(phrase, data);
	
	  };
	  
	  return self;
	};
	
	module['exports'] = Hacker;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var password_generator = __webpack_require__(27),
	    random_ua = __webpack_require__(28);
	
	/**
	 *
	 * @namespace faker.internet
	 */
	var Internet = function (faker) {
	  var self = this;
	  /**
	   * avatar
	   *
	   * @method faker.internet.avatar
	   */
	  self.avatar = function () {
	      return faker.random.arrayElement(faker.definitions.internet.avatar_uri);
	  };
	
	  self.avatar.schema = {
	    "description": "Generates a URL for an avatar.",
	    "sampleResults": ["https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg"]
	  };
	
	  /**
	   * email
	   *
	   * @method faker.internet.email
	   * @param {string} firstName
	   * @param {string} lastName
	   * @param {string} provider
	   */
	  self.email = function (firstName, lastName, provider) {
	      provider = provider || faker.random.arrayElement(faker.definitions.internet.free_email);
	      return  faker.helpers.slugify(faker.internet.userName(firstName, lastName)) + "@" + provider;
	  };
	
	  self.email.schema = {
	    "description": "Generates a valid email address based on optional input criteria",
	    "sampleResults": ["foo.bar@gmail.com"],
	    "properties": {
	      "firstName": {
	        "type": "string",
	        "required": false,
	        "description": "The first name of the user"
	      },
	      "lastName": {
	        "type": "string",
	        "required": false,
	        "description": "The last name of the user"
	      },
	      "provider": {
	        "type": "string",
	        "required": false,
	        "description": "The domain of the user"
	      }
	    }
	  };
	  /**
	   * exampleEmail
	   *
	   * @method faker.internet.exampleEmail
	   * @param {string} firstName
	   * @param {string} lastName
	   */
	  self.exampleEmail = function (firstName, lastName) {
	      var provider = faker.random.arrayElement(faker.definitions.internet.example_email);
	      return self.email(firstName, lastName, provider);
	  };
	
	  /**
	   * userName
	   *
	   * @method faker.internet.userName
	   * @param {string} firstName
	   * @param {string} lastName
	   */
	  self.userName = function (firstName, lastName) {
	      var result;
	      firstName = firstName || faker.name.firstName();
	      lastName = lastName || faker.name.lastName();
	      switch (faker.random.number(2)) {
	      case 0:
	          result = firstName + faker.random.number(99);
	          break;
	      case 1:
	          result = firstName + faker.random.arrayElement([".", "_"]) + lastName;
	          break;
	      case 2:
	          result = firstName + faker.random.arrayElement([".", "_"]) + lastName + faker.random.number(99);
	          break;
	      }
	      result = result.toString().replace(/'/g, "");
	      result = result.replace(/ /g, "");
	      return result;
	  };
	
	  self.userName.schema = {
	    "description": "Generates a username based on one of several patterns. The pattern is chosen randomly.",
	    "sampleResults": [
	      "Kirstin39",
	      "Kirstin.Smith",
	      "Kirstin.Smith39",
	      "KirstinSmith",
	      "KirstinSmith39",
	    ],
	    "properties": {
	      "firstName": {
	        "type": "string",
	        "required": false,
	        "description": "The first name of the user"
	      },
	      "lastName": {
	        "type": "string",
	        "required": false,
	        "description": "The last name of the user"
	      }
	    }
	  };
	
	  /**
	   * protocol
	   *
	   * @method faker.internet.protocol
	   */
	  self.protocol = function () {
	      var protocols = ['http','https'];
	      return faker.random.arrayElement(protocols);
	  };
	
	  self.protocol.schema = {
	    "description": "Randomly generates http or https",
	    "sampleResults": ["https", "http"]
	  };
	
	  /**
	   * url
	   *
	   * @method faker.internet.url
	   */
	  self.url = function () {
	      return faker.internet.protocol() + '://' + faker.internet.domainName();
	  };
	
	  self.url.schema = {
	    "description": "Generates a random URL. The URL could be secure or insecure.",
	    "sampleResults": [
	      "http://rashawn.name",
	      "https://rashawn.name"
	    ]
	  };
	
	  /**
	   * domainName
	   *
	   * @method faker.internet.domainName
	   */
	  self.domainName = function () {
	      return faker.internet.domainWord() + "." + faker.internet.domainSuffix();
	  };
	
	  self.domainName.schema = {
	    "description": "Generates a random domain name.",
	    "sampleResults": ["marvin.org"]
	  };
	
	  /**
	   * domainSuffix
	   *
	   * @method faker.internet.domainSuffix
	   */
	  self.domainSuffix = function () {
	      return faker.random.arrayElement(faker.definitions.internet.domain_suffix);
	  };
	
	  self.domainSuffix.schema = {
	    "description": "Generates a random domain suffix.",
	    "sampleResults": ["net"]
	  };
	
	  /**
	   * domainWord
	   *
	   * @method faker.internet.domainWord
	   */
	  self.domainWord = function () {
	      return faker.name.firstName().replace(/([\\~#&*{}/:<>?|\"'])/ig, '').toLowerCase();
	  };
	
	  self.domainWord.schema = {
	    "description": "Generates a random domain word.",
	    "sampleResults": ["alyce"]
	  };
	
	  /**
	   * ip
	   *
	   * @method faker.internet.ip
	   */
	  self.ip = function () {
	      var randNum = function () {
	          return (faker.random.number(255)).toFixed(0);
	      };
	
	      var result = [];
	      for (var i = 0; i < 4; i++) {
	          result[i] = randNum();
	      }
	
	      return result.join(".");
	  };
	
	  self.ip.schema = {
	    "description": "Generates a random IP.",
	    "sampleResults": ["97.238.241.11"]
	  };
	
	  /**
	   * userAgent
	   *
	   * @method faker.internet.userAgent
	   */
	  self.userAgent = function () {
	    return random_ua.generate();
	  };
	
	  self.userAgent.schema = {
	    "description": "Generates a random user agent.",
	    "sampleResults": ["Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1"]
	  };
	
	  /**
	   * color
	   *
	   * @method faker.internet.color
	   * @param {number} baseRed255
	   * @param {number} baseGreen255
	   * @param {number} baseBlue255
	   */
	  self.color = function (baseRed255, baseGreen255, baseBlue255) {
	      baseRed255 = baseRed255 || 0;
	      baseGreen255 = baseGreen255 || 0;
	      baseBlue255 = baseBlue255 || 0;
	      // based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette
	      var red = Math.floor((faker.random.number(256) + baseRed255) / 2);
	      var green = Math.floor((faker.random.number(256) + baseGreen255) / 2);
	      var blue = Math.floor((faker.random.number(256) + baseBlue255) / 2);
	      var redStr = red.toString(16);
	      var greenStr = green.toString(16);
	      var blueStr = blue.toString(16);
	      return '#' +
	        (redStr.length === 1 ? '0' : '') + redStr +
	        (greenStr.length === 1 ? '0' : '') + greenStr +
	        (blueStr.length === 1 ? '0': '') + blueStr;
	
	  };
	
	  self.color.schema = {
	    "description": "Generates a random hexadecimal color.",
	    "sampleResults": ["#06267f"],
	    "properties": {
	      "baseRed255": {
	        "type": "number",
	        "required": false,
	        "description": "The red value. Valid values are 0 - 255."
	      },
	      "baseGreen255": {
	        "type": "number",
	        "required": false,
	        "description": "The green value. Valid values are 0 - 255."
	      },
	      "baseBlue255": {
	        "type": "number",
	        "required": false,
	        "description": "The blue value. Valid values are 0 - 255."
	      }
	    }
	  };
	
	  /**
	   * mac
	   *
	   * @method faker.internet.mac
	   */
	  self.mac = function(){
	      var i, mac = "";
	      for (i=0; i < 12; i++) {
	          mac+= faker.random.number(15).toString(16);
	          if (i%2==1 && i != 11) {
	              mac+=":";
	          }
	      }
	      return mac;
	  };
	
	  self.mac.schema = {
	    "description": "Generates a random mac address.",
	    "sampleResults": ["78:06:cc:ae:b3:81"]
	  };
	
	  /**
	   * password
	   *
	   * @method faker.internet.password
	   * @param {number} len
	   * @param {boolean} memorable
	   * @param {string} pattern
	   * @param {string} prefix
	   */
	  self.password = function (len, memorable, pattern, prefix) {
	    len = len || 15;
	    if (typeof memorable === "undefined") {
	      memorable = false;
	    }
	    return password_generator(len, memorable, pattern, prefix);
	  }
	
	  self.password.schema = {
	    "description": "Generates a random password.",
	    "sampleResults": [
	      "AM7zl6Mg",
	      "susejofe"
	    ],
	    "properties": {
	      "length": {
	        "type": "number",
	        "required": false,
	        "description": "The number of characters in the password."
	      },
	      "memorable": {
	        "type": "boolean",
	        "required": false,
	        "description": "Whether a password should be easy to remember."
	      },
	      "pattern": {
	        "type": "regex",
	        "required": false,
	        "description": "A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on."
	      },
	      "prefix": {
	        "type": "string",
	        "required": false,
	        "description": "A value to prepend to the generated password. The prefix counts towards the length of the password."
	      }
	    }
	  };
	
	};
	
	
	module["exports"] = Internet;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * password-generator
	 * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
	 * MIT Licensed
	 */
	(function (root) {
	
	  var localName, consonant, letter, password, vowel;
	  letter = /[a-zA-Z]$/;
	  vowel = /[aeiouAEIOU]$/;
	  consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;
	
	
	  // Defines the name of the local variable the passwordGenerator library will use
	  // this is specially useful if window.passwordGenerator is already being used
	  // by your application and you want a different name. For example:
	  //    // Declare before including the passwordGenerator library
	  //    var localPasswordGeneratorLibraryName = 'pass';
	  localName = root.localPasswordGeneratorLibraryName || "generatePassword",
	
	  password = function (length, memorable, pattern, prefix) {
	    var char, n;
	    if (length == null) {
	      length = 10;
	    }
	    if (memorable == null) {
	      memorable = true;
	    }
	    if (pattern == null) {
	      pattern = /\w/;
	    }
	    if (prefix == null) {
	      prefix = '';
	    }
	    if (prefix.length >= length) {
	      return prefix;
	    }
	    if (memorable) {
	      if (prefix.match(consonant)) {
	        pattern = vowel;
	      } else {
	        pattern = consonant;
	      }
	    }
	    n = Math.floor(Math.random() * 94) + 33;
	    char = String.fromCharCode(n);
	    if (memorable) {
	      char = char.toLowerCase();
	    }
	    if (!char.match(pattern)) {
	      return password(length, memorable, pattern, prefix);
	    }
	    return password(length, memorable, pattern, "" + prefix + char);
	  };
	
	
	  (( true) ? exports : root)[localName] = password;
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      module.exports = password;
	    }
	  }
	
	  // Establish the root object, `window` in the browser, or `global` on the server.
	}(this));

/***/ },
/* 28 */
/***/ function(module, exports) {

	/*
	
	Copyright (c) 2012-2014 Jeffrey Mealo
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
	documentation files (the "Software"), to deal in the Software without restriction, including without limitation
	the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
	to permit persons to whom the Software is furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
	Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	------------------------------------------------------------------------------------------------------------------------
	
	Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/
	
	The license for that script is as follows:
	
	"THE BEER-WARE LICENSE" (Revision 42):
	
	<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
	If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic
	*/
	
	function rnd(a, b) {
	    //calling rnd() with no arguments is identical to rnd(0, 100)
	    a = a || 0;
	    b = b || 100;
	
	    if (typeof b === 'number' && typeof a === 'number') {
	        //rnd(int min, int max) returns integer between min, max
	        return (function (min, max) {
	            if (min > max) {
	                throw new RangeError('expected min <= max; got min = ' + min + ', max = ' + max);
	            }
	            return Math.floor(Math.random() * (max - min + 1)) + min;
	        }(a, b));
	    }
	
	    if (Object.prototype.toString.call(a) === "[object Array]") {
	        //returns a random element from array (a), even weighting
	        return a[Math.floor(Math.random() * a.length)];
	    }
	
	    if (a && typeof a === 'object') {
	        //returns a random key from the passed object; keys are weighted by the decimal probability in their value
	        return (function (obj) {
	            var rand = rnd(0, 100) / 100, min = 0, max = 0, key, return_val;
	
	            for (key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    max = obj[key] + min;
	                    return_val = key;
	                    if (rand >= min && rand <= max) {
	                        break;
	                    }
	                    min = min + obj[key];
	                }
	            }
	
	            return return_val;
	        }(a));
	    }
	
	    throw new TypeError('Invalid arguments passed to rnd. (' + (b ? a + ', ' + b : a) + ')');
	}
	
	function randomLang() {
	    return rnd(['AB', 'AF', 'AN', 'AR', 'AS', 'AZ', 'BE', 'BG', 'BN', 'BO', 'BR', 'BS', 'CA', 'CE', 'CO', 'CS',
	                'CU', 'CY', 'DA', 'DE', 'EL', 'EN', 'EO', 'ES', 'ET', 'EU', 'FA', 'FI', 'FJ', 'FO', 'FR', 'FY',
	                'GA', 'GD', 'GL', 'GV', 'HE', 'HI', 'HR', 'HT', 'HU', 'HY', 'ID', 'IS', 'IT', 'JA', 'JV', 'KA',
	                'KG', 'KO', 'KU', 'KW', 'KY', 'LA', 'LB', 'LI', 'LN', 'LT', 'LV', 'MG', 'MK', 'MN', 'MO', 'MS',
	                'MT', 'MY', 'NB', 'NE', 'NL', 'NN', 'NO', 'OC', 'PL', 'PT', 'RM', 'RO', 'RU', 'SC', 'SE', 'SK',
	                'SL', 'SO', 'SQ', 'SR', 'SV', 'SW', 'TK', 'TR', 'TY', 'UK', 'UR', 'UZ', 'VI', 'VO', 'YI', 'ZH']);
	}
	
	function randomBrowserAndOS() {
	    var browser = rnd({
	        chrome:    .45132810566,
	        iexplorer: .27477061836,
	        firefox:   .19384170608,
	        safari:    .06186781118,
	        opera:     .01574236955
	    }),
	    os = {
	        chrome:  {win: .89,  mac: .09 , lin: .02},
	        firefox: {win: .83,  mac: .16,  lin: .01},
	        opera:   {win: .91,  mac: .03 , lin: .06},
	        safari:  {win: .04 , mac: .96  },
	        iexplorer: ['win']
	    };
	
	    return [browser, rnd(os[browser])];
	}
	
	function randomProc(arch) {
	    var procs = {
	        lin:['i686', 'x86_64'],
	        mac: {'Intel' : .48, 'PPC': .01, 'U; Intel':.48, 'U; PPC' :.01},
	        win:['', 'WOW64', 'Win64; x64']
	    };
	    return rnd(procs[arch]);
	}
	
	function randomRevision(dots) {
	    var return_val = '';
	    //generate a random revision
	    //dots = 2 returns .x.y where x & y are between 0 and 9
	    for (var x = 0; x < dots; x++) {
	        return_val += '.' + rnd(0, 9);
	    }
	    return return_val;
	}
	
	var version_string = {
	    net: function () {
	        return [rnd(1, 4), rnd(0, 9), rnd(10000, 99999), rnd(0, 9)].join('.');
	    },
	    nt: function () {
	        return rnd(5, 6) + '.' + rnd(0, 3);
	    },
	    ie: function () {
	        return rnd(7, 11);
	    },
	    trident: function () {
	        return rnd(3, 7) + '.' + rnd(0, 1);
	    },
	    osx: function (delim) {
	        return [10, rnd(5, 10), rnd(0, 9)].join(delim || '.');
	    },
	    chrome: function () {
	        return [rnd(13, 39), 0, rnd(800, 899), 0].join('.');
	    },
	    presto: function () {
	        return '2.9.' + rnd(160, 190);
	    },
	    presto2: function () {
	        return rnd(10, 12) + '.00';
	    },
	    safari: function () {
	        return rnd(531, 538) + '.' + rnd(0, 2) + '.' + rnd(0,2);
	    }
	};
	
	var browser = {
	    firefox: function firefox(arch) {
	        //https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference
	        var firefox_ver = rnd(5, 15) + randomRevision(2),
	            gecko_ver = 'Gecko/20100101 Firefox/' + firefox_ver,
	            proc = randomProc(arch),
	            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + ((proc) ? '; ' + proc : '')
	            : (arch === 'mac') ? '(Macintosh; ' + proc + ' Mac OS X ' + version_string.osx()
	            : '(X11; Linux ' + proc;
	
	        return 'Mozilla/5.0 ' + os_ver + '; rv:' + firefox_ver.slice(0, -2) + ') ' + gecko_ver;
	    },
	
	    iexplorer: function iexplorer() {
	        var ver = version_string.ie();
	
	        if (ver >= 11) {
	            //http://msdn.microsoft.com/en-us/library/ie/hh869301(v=vs.85).aspx
	            return 'Mozilla/5.0 (Windows NT 6.' + rnd(1,3) + '; Trident/7.0; ' + rnd(['Touch; ', '']) + 'rv:11.0) like Gecko';
	        }
	
	        //http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx
	        return 'Mozilla/5.0 (compatible; MSIE ' + ver + '.0; Windows NT ' + version_string.nt() + '; Trident/' +
	            version_string.trident() + ((rnd(0, 1) === 1) ? '; .NET CLR ' + version_string.net() : '') + ')';
	    },
	
	    opera: function opera(arch) {
	        //http://www.opera.com/docs/history/
	        var presto_ver = ' Presto/' + version_string.presto() + ' Version/' + version_string.presto2() + ')',
	            os_ver = (arch === 'win') ? '(Windows NT ' + version_string.nt() + '; U; ' + randomLang() + presto_ver
	            : (arch === 'lin') ? '(X11; Linux ' + randomProc(arch) + '; U; ' + randomLang() + presto_ver
	            : '(Macintosh; Intel Mac OS X ' + version_string.osx() + ' U; ' + randomLang() + ' Presto/' +
	            version_string.presto() + ' Version/' + version_string.presto2() + ')';
	
	        return 'Opera/' + rnd(9, 14) + '.' + rnd(0, 99) + ' ' + os_ver;
	    },
	
	    safari: function safari(arch) {
	        var safari = version_string.safari(),
	            ver = rnd(4, 7) + '.' + rnd(0,1) + '.' + rnd(0,10),
	            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X '+ version_string.osx('_') + ' rv:' + rnd(2, 6) + '.0; '+ randomLang() + ') '
	            : '(Windows; U; Windows NT ' + version_string.nt() + ')';
	
	        return 'Mozilla/5.0 ' + os_ver + 'AppleWebKit/' + safari + ' (KHTML, like Gecko) Version/' + ver + ' Safari/' + safari;
	    },
	
	    chrome: function chrome(arch) {
	        var safari = version_string.safari(),
	            os_ver = (arch === 'mac') ? '(Macintosh; ' + randomProc('mac') + ' Mac OS X ' + version_string.osx('_') + ') '
	            : (arch === 'win') ? '(Windows; U; Windows NT ' + version_string.nt() + ')'
	            : '(X11; Linux ' + randomProc(arch);
	
	        return 'Mozilla/5.0 ' + os_ver + ' AppleWebKit/' + safari + ' (KHTML, like Gecko) Chrome/' + version_string.chrome() + ' Safari/' + safari;
	    }
	};
	
	exports.generate = function generate() {
	    var random = randomBrowserAndOS();
	    return browser[random[0]](random[1]);
	};


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.phone
	 */
	var Phone = function (faker) {
	  var self = this;
	
	  /**
	   * phoneNumber
	   *
	   * @method faker.phone.phoneNumber
	   * @param {string} format
	   */
	  self.phoneNumber = function (format) {
	      format = format || faker.phone.phoneFormats();
	      return faker.helpers.replaceSymbolWithNumber(format);
	  };
	
	  // FIXME: this is strange passing in an array index.
	  /**
	   * phoneNumberFormat
	   *
	   * @method faker.phone.phoneFormatsArrayIndex
	   * @param phoneFormatsArrayIndex
	   */
	  self.phoneNumberFormat = function (phoneFormatsArrayIndex) {
	      phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
	      return faker.helpers.replaceSymbolWithNumber(faker.definitions.phone_number.formats[phoneFormatsArrayIndex]);
	  };
	
	  /**
	   * phoneFormats
	   *
	   * @method faker.phone.phoneFormats
	   */
	  self.phoneFormats = function () {
	    return faker.random.arrayElement(faker.definitions.phone_number.formats);
	  };
	  
	  return self;
	
	};
	
	module['exports'] = Phone;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.date
	 */
	var _Date = function (faker) {
	  var self = this;
	  /**
	   * past
	   *
	   * @method faker.date.past
	   * @param {number} years
	   * @param {date} refDate
	   */
	  self.past = function (years, refDate) {
	      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
	      var range = {
	        min: 1000,
	        max: (years || 1) * 365 * 24 * 3600 * 1000
	      };
	
	      var past = date.getTime();
	      past -= faker.random.number(range); // some time from now to N years ago, in milliseconds
	      date.setTime(past);
	
	      return date;
	  };
	
	  /**
	   * future
	   *
	   * @method faker.date.future
	   * @param {number} years
	   * @param {date} refDate
	   */
	  self.future = function (years, refDate) {
	      var date = (refDate) ? new Date(Date.parse(refDate)) : new Date();
	      var range = {
	        min: 1000,
	        max: (years || 1) * 365 * 24 * 3600 * 1000
	      };
	
	      var future = date.getTime();
	      future += faker.random.number(range); // some time from now to N years later, in milliseconds
	      date.setTime(future);
	
	      return date;
	  };
	
	  /**
	   * between
	   *
	   * @method faker.date.between
	   * @param {date} from
	   * @param {date} to
	   */
	  self.between = function (from, to) {
	      var fromMilli = Date.parse(from);
	      var dateOffset = faker.random.number(Date.parse(to) - fromMilli);
	
	      var newDate = new Date(fromMilli + dateOffset);
	
	      return newDate;
	  };
	
	  /**
	   * recent
	   *
	   * @method faker.date.recent
	   * @param {number} days
	   */
	  self.recent = function (days) {
	      var date = new Date();
	      var range = {
	        min: 1000,
	        max: (days || 1) * 24 * 3600 * 1000
	      };
	
	      var future = date.getTime();
	      future -= faker.random.number(range); // some time from now to N days ago, in milliseconds
	      date.setTime(future);
	
	      return date;
	  };
	
	  /**
	   * month
	   *
	   * @method faker.date.month
	   * @param {object} options
	   */
	  self.month = function (options) {
	      options = options || {};
	
	      var type = 'wide';
	      if (options.abbr) {
	          type = 'abbr';
	      }
	      if (options.context && typeof faker.definitions.date.month[type + '_context'] !== 'undefined') {
	          type += '_context';
	      }
	
	      var source = faker.definitions.date.month[type];
	
	      return faker.random.arrayElement(source);
	  };
	
	  /**
	   * weekday
	   *
	   * @param {object} options
	   * @method faker.date.weekday
	   */
	  self.weekday = function (options) {
	      options = options || {};
	
	      var type = 'wide';
	      if (options.abbr) {
	          type = 'abbr';
	      }
	      if (options.context && typeof faker.definitions.date.weekday[type + '_context'] !== 'undefined') {
	          type += '_context';
	      }
	
	      var source = faker.definitions.date.weekday[type];
	
	      return faker.random.arrayElement(source);
	  };
	  
	  return self;
	  
	};
	
	module['exports'] = _Date;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/**
	 *
	 * @namespace faker.commerce
	 */
	var Commerce = function (faker) {
	  var self = this;
	
	  /**
	   * color
	   *
	   * @method faker.commerce.color
	   */
	  self.color = function() {
	      return faker.random.arrayElement(faker.definitions.commerce.color);
	  };
	
	  /**
	   * department
	   *
	   * @method faker.commerce.department
	   * @param {number} max
	   * @param {number} fixedAmount
	   */
	  self.department = function(max, fixedAmount) {
	      return faker.random.arrayElement(faker.definitions.commerce.department);
	  };
	
	  /**
	   * productName
	   *
	   * @method faker.commerce.productName
	   */
	  self.productName = function() {
	      return faker.commerce.productAdjective() + " " +
	              faker.commerce.productMaterial() + " " +
	              faker.commerce.product();
	  };
	
	  /**
	   * price
	   *
	   * @method faker.commerce.price
	   * @param {number} min
	   * @param {number} max
	   * @param {number} dec
	   * @param {string} symbol
	   */
	  self.price = function(min, max, dec, symbol) {
	      min = min || 0;
	      max = max || 1000;
	      dec = dec || 2;
	      symbol = symbol || '';
	
	      if(min < 0 || max < 0) {
	          return symbol + 0.00;
	      }
	
	      var randValue = faker.random.number({ max: max, min: min });
	
	      return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
	  };
	
	  /*
	  self.categories = function(num) {
	      var categories = [];
	
	      do {
	          var category = faker.random.arrayElement(faker.definitions.commerce.department);
	          if(categories.indexOf(category) === -1) {
	              categories.push(category);
	          }
	      } while(categories.length < num);
	
	      return categories;
	  };
	
	  */
	  /*
	  self.mergeCategories = function(categories) {
	      var separator = faker.definitions.separator || " &";
	      // TODO: find undefined here
	      categories = categories || faker.definitions.commerce.categories;
	      var commaSeparated = categories.slice(0, -1).join(', ');
	
	      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
	  };
	  */
	
	  /**
	   * productAdjective
	   *
	   * @method faker.commerce.productAdjective
	   */
	  self.productAdjective = function() {
	      return faker.random.arrayElement(faker.definitions.commerce.product_name.adjective);
	  };
	
	  /**
	   * productMaterial
	   *
	   * @method faker.commerce.productMaterial
	   */
	  self.productMaterial = function() {
	      return faker.random.arrayElement(faker.definitions.commerce.product_name.material);
	  };
	
	  /**
	   * product
	   *
	   * @method faker.commerce.product
	   */
	  self.product = function() {
	      return faker.random.arrayElement(faker.definitions.commerce.product_name.product);
	  }
	
	  return self;
	};
	
	module['exports'] = Commerce;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// generates fake data for many computer systems properties
	
	/**
	 *
	 * @namespace faker.system
	 */
	function System (faker) {
	
	  /**
	   * generates a file name with extension or optional type
	   *
	   * @method faker.system.fileName
	   * @param {string} ext
	   * @param {string} type
	   */
	  this.fileName = function (ext, type) {
	    var str = faker.fake("{{random.words}}.{{system.fileExt}}");
	    str = str.replace(/ /g, '_');
	    str = str.replace(/\,/g, '_');
	    str = str.replace(/\-/g, '_');
	    str = str.replace(/\\/g, '_');
	    str = str.toLowerCase();
	    return str;
	  };
	
	  /**
	   * commonFileName
	   *
	   * @method faker.system.commonFileName
	   * @param {string} ext
	   * @param {string} type
	   */
	  this.commonFileName = function (ext, type) {
	    var str = faker.random.words() + "." + (ext || faker.system.commonFileExt());
	    str = str.replace(/ /g, '_');
	    str = str.replace(/\,/g, '_');
	    str = str.replace(/\-/g, '_');
	    str = str.replace(/\\/g, '_');
	    str = str.toLowerCase();
	    return str;
	  };
	
	  /**
	   * mimeType
	   *
	   * @method faker.system.mimeType
	   */
	  this.mimeType = function () {
	    return faker.random.arrayElement(Object.keys(faker.definitions.system.mimeTypes));
	  };
	
	  /**
	   * returns a commonly used file type
	   *
	   * @method faker.system.commonFileType
	   */
	  this.commonFileType = function () {
	    var types = ['video', 'audio', 'image', 'text', 'application'];
	    return faker.random.arrayElement(types)
	  };
	
	  /**
	   * returns a commonly used file extension based on optional type
	   *
	   * @method faker.system.commonFileExt
	   * @param {string} type
	   */
	  this.commonFileExt = function (type) {
	    var types = [
	      'application/pdf',
	      'audio/mpeg',
	      'audio/wav',
	      'image/png',
	      'image/jpeg',
	      'image/gif',
	      'video/mp4',
	      'video/mpeg',
	      'text/html'
	    ];
	    return faker.system.fileExt(faker.random.arrayElement(types));
	  };
	
	
	  /**
	   * returns any file type available as mime-type
	   *
	   * @method faker.system.fileType
	   */
	  this.fileType = function () {
	    var types = [];
	    var mimes = faker.definitions.system.mimeTypes;
	    Object.keys(mimes).forEach(function(m){
	      var parts = m.split('/');
	      if (types.indexOf(parts[0]) === -1) {
	        types.push(parts[0]);
	      }
	    });
	    return faker.random.arrayElement(types);
	  };
	
	  /**
	   * fileExt
	   *
	   * @method faker.system.fileExt
	   * @param {string} mimeType
	   */
	  this.fileExt = function (mimeType) {
	    var exts = [];
	    var mimes = faker.definitions.system.mimeTypes;
	
	    // get specific ext by mime-type
	    if (typeof mimes[mimeType] === "object") {
	      return faker.random.arrayElement(mimes[mimeType].extensions);
	    }
	
	    // reduce mime-types to those with file-extensions
	    Object.keys(mimes).forEach(function(m){
	      if (mimes[m].extensions instanceof Array) {
	        mimes[m].extensions.forEach(function(ext){
	          exts.push(ext)
	        });
	      }
	    });
	    return faker.random.arrayElement(exts);
	  };
	
	  /**
	   * not yet implemented
	   *
	   * @method faker.system.directoryPath
	   */
	  this.directoryPath = function () {
	    // TODO
	  };
	
	  /**
	   * not yet implemented
	   *
	   * @method faker.system.filePath
	   */
	  this.filePath = function () {
	    // TODO
	  };
	
	  /**
	   * semver
	   *
	   * @method faker.system.semver
	   */
	  this.semver = function () {
	      return [faker.random.number(9),
	              faker.random.number(9),
	              faker.random.number(9)].join('.');
	  }
	
	}
	
	module['exports'] = System;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en_GB = {};
	module['exports'] = en_GB;
	en_GB.title = "Great Britain (English)";
	en_GB.address = __webpack_require__(34);
	en_GB.internet = __webpack_require__(39);
	en_GB.phone_number = __webpack_require__(41);
	en_GB.cell_phone = __webpack_require__(43);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var address = {};
	module['exports'] = address;
	address.county = __webpack_require__(35);
	address.uk_country = __webpack_require__(36);
	address.default_country = __webpack_require__(37);
	address.postcode = __webpack_require__(38);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Avon",
	  "Bedfordshire",
	  "Berkshire",
	  "Borders",
	  "Buckinghamshire",
	  "Cambridgeshire",
	  "Central",
	  "Cheshire",
	  "Cleveland",
	  "Clwyd",
	  "Cornwall",
	  "County Antrim",
	  "County Armagh",
	  "County Down",
	  "County Fermanagh",
	  "County Londonderry",
	  "County Tyrone",
	  "Cumbria",
	  "Derbyshire",
	  "Devon",
	  "Dorset",
	  "Dumfries and Galloway",
	  "Durham",
	  "Dyfed",
	  "East Sussex",
	  "Essex",
	  "Fife",
	  "Gloucestershire",
	  "Grampian",
	  "Greater Manchester",
	  "Gwent",
	  "Gwynedd County",
	  "Hampshire",
	  "Herefordshire",
	  "Hertfordshire",
	  "Highlands and Islands",
	  "Humberside",
	  "Isle of Wight",
	  "Kent",
	  "Lancashire",
	  "Leicestershire",
	  "Lincolnshire",
	  "Lothian",
	  "Merseyside",
	  "Mid Glamorgan",
	  "Norfolk",
	  "North Yorkshire",
	  "Northamptonshire",
	  "Northumberland",
	  "Nottinghamshire",
	  "Oxfordshire",
	  "Powys",
	  "Rutland",
	  "Shropshire",
	  "Somerset",
	  "South Glamorgan",
	  "South Yorkshire",
	  "Staffordshire",
	  "Strathclyde",
	  "Suffolk",
	  "Surrey",
	  "Tayside",
	  "Tyne and Wear",
	  "Warwickshire",
	  "West Glamorgan",
	  "West Midlands",
	  "West Sussex",
	  "West Yorkshire",
	  "Wiltshire",
	  "Worcestershire"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "England",
	  "Scotland",
	  "Wales",
	  "Northern Ireland"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "England",
	  "Scotland",
	  "Wales",
	  "Northern Ireland"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "??# #??",
	  "??## #??",
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var internet = {};
	module['exports'] = internet;
	internet.domain_suffix = __webpack_require__(40);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "co.uk",
	  "com",
	  "biz",
	  "info",
	  "name"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var phone_number = {};
	module['exports'] = phone_number;
	phone_number.formats = __webpack_require__(42);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "01#### #####",
	  "01### ######",
	  "01#1 ### ####",
	  "011# ### ####",
	  "02# #### ####",
	  "03## ### ####",
	  "055 #### ####",
	  "056 #### ####",
	  "0800 ### ####",
	  "08## ### ####",
	  "09## ### ####",
	  "016977 ####",
	  "01### #####",
	  "0500 ######",
	  "0800 ######"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var cell_phone = {};
	module['exports'] = cell_phone;
	cell_phone.formats = __webpack_require__(44);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "074## ######",
	  "075## ######",
	  "076## ######",
	  "077## ######",
	  "078## ######",
	  "079## ######"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var en = {};
	module['exports'] = en;
	en.title = "English";
	en.separator = " & ";
	en.address = __webpack_require__(46);
	en.credit_card = __webpack_require__(64);
	en.company = __webpack_require__(75);
	en.internet = __webpack_require__(84);
	en.lorem = __webpack_require__(89);
	en.name = __webpack_require__(92);
	en.phone_number = __webpack_require__(99);
	en.cell_phone = __webpack_require__(101);
	en.business = __webpack_require__(103);
	en.commerce = __webpack_require__(107);
	en.team = __webpack_require__(111);
	en.hacker = __webpack_require__(114);
	en.app = __webpack_require__(120);
	en.finance = __webpack_require__(124);
	en.date = __webpack_require__(128);
	en.system = __webpack_require__(131);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var address = {};
	module['exports'] = address;
	address.city_prefix = __webpack_require__(47);
	address.city_suffix = __webpack_require__(48);
	address.county = __webpack_require__(49);
	address.country = __webpack_require__(50);
	address.country_code = __webpack_require__(51);
	address.building_number = __webpack_require__(52);
	address.street_suffix = __webpack_require__(53);
	address.secondary_address = __webpack_require__(54);
	address.postcode = __webpack_require__(55);
	address.postcode_by_state = __webpack_require__(56);
	address.state = __webpack_require__(57);
	address.state_abbr = __webpack_require__(58);
	address.time_zone = __webpack_require__(59);
	address.city = __webpack_require__(60);
	address.street_name = __webpack_require__(61);
	address.street_address = __webpack_require__(62);
	address.default_country = __webpack_require__(63);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "North",
	  "East",
	  "West",
	  "South",
	  "New",
	  "Lake",
	  "Port"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "town",
	  "ton",
	  "land",
	  "ville",
	  "berg",
	  "burgh",
	  "borough",
	  "bury",
	  "view",
	  "port",
	  "mouth",
	  "stad",
	  "furt",
	  "chester",
	  "mouth",
	  "fort",
	  "haven",
	  "side",
	  "shire"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Avon",
	  "Bedfordshire",
	  "Berkshire",
	  "Borders",
	  "Buckinghamshire",
	  "Cambridgeshire"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Afghanistan",
	  "Albania",
	  "Algeria",
	  "American Samoa",
	  "Andorra",
	  "Angola",
	  "Anguilla",
	  "Antarctica (the territory South of 60 deg S)",
	  "Antigua and Barbuda",
	  "Argentina",
	  "Armenia",
	  "Aruba",
	  "Australia",
	  "Austria",
	  "Azerbaijan",
	  "Bahamas",
	  "Bahrain",
	  "Bangladesh",
	  "Barbados",
	  "Belarus",
	  "Belgium",
	  "Belize",
	  "Benin",
	  "Bermuda",
	  "Bhutan",
	  "Bolivia",
	  "Bosnia and Herzegovina",
	  "Botswana",
	  "Bouvet Island (Bouvetoya)",
	  "Brazil",
	  "British Indian Ocean Territory (Chagos Archipelago)",
	  "Brunei Darussalam",
	  "Bulgaria",
	  "Burkina Faso",
	  "Burundi",
	  "Cambodia",
	  "Cameroon",
	  "Canada",
	  "Cape Verde",
	  "Cayman Islands",
	  "Central African Republic",
	  "Chad",
	  "Chile",
	  "China",
	  "Christmas Island",
	  "Cocos (Keeling) Islands",
	  "Colombia",
	  "Comoros",
	  "Congo",
	  "Congo",
	  "Cook Islands",
	  "Costa Rica",
	  "Cote d'Ivoire",
	  "Croatia",
	  "Cuba",
	  "Cyprus",
	  "Czech Republic",
	  "Denmark",
	  "Djibouti",
	  "Dominica",
	  "Dominican Republic",
	  "Ecuador",
	  "Egypt",
	  "El Salvador",
	  "Equatorial Guinea",
	  "Eritrea",
	  "Estonia",
	  "Ethiopia",
	  "Faroe Islands",
	  "Falkland Islands (Malvinas)",
	  "Fiji",
	  "Finland",
	  "France",
	  "French Guiana",
	  "French Polynesia",
	  "French Southern Territories",
	  "Gabon",
	  "Gambia",
	  "Georgia",
	  "Germany",
	  "Ghana",
	  "Gibraltar",
	  "Greece",
	  "Greenland",
	  "Grenada",
	  "Guadeloupe",
	  "Guam",
	  "Guatemala",
	  "Guernsey",
	  "Guinea",
	  "Guinea-Bissau",
	  "Guyana",
	  "Haiti",
	  "Heard Island and McDonald Islands",
	  "Holy See (Vatican City State)",
	  "Honduras",
	  "Hong Kong",
	  "Hungary",
	  "Iceland",
	  "India",
	  "Indonesia",
	  "Iran",
	  "Iraq",
	  "Ireland",
	  "Isle of Man",
	  "Israel",
	  "Italy",
	  "Jamaica",
	  "Japan",
	  "Jersey",
	  "Jordan",
	  "Kazakhstan",
	  "Kenya",
	  "Kiribati",
	  "Democratic People's Republic of Korea",
	  "Republic of Korea",
	  "Kuwait",
	  "Kyrgyz Republic",
	  "Lao People's Democratic Republic",
	  "Latvia",
	  "Lebanon",
	  "Lesotho",
	  "Liberia",
	  "Libyan Arab Jamahiriya",
	  "Liechtenstein",
	  "Lithuania",
	  "Luxembourg",
	  "Macao",
	  "Macedonia",
	  "Madagascar",
	  "Malawi",
	  "Malaysia",
	  "Maldives",
	  "Mali",
	  "Malta",
	  "Marshall Islands",
	  "Martinique",
	  "Mauritania",
	  "Mauritius",
	  "Mayotte",
	  "Mexico",
	  "Micronesia",
	  "Moldova",
	  "Monaco",
	  "Mongolia",
	  "Montenegro",
	  "Montserrat",
	  "Morocco",
	  "Mozambique",
	  "Myanmar",
	  "Namibia",
	  "Nauru",
	  "Nepal",
	  "Netherlands Antilles",
	  "Netherlands",
	  "New Caledonia",
	  "New Zealand",
	  "Nicaragua",
	  "Niger",
	  "Nigeria",
	  "Niue",
	  "Norfolk Island",
	  "Northern Mariana Islands",
	  "Norway",
	  "Oman",
	  "Pakistan",
	  "Palau",
	  "Palestinian Territory",
	  "Panama",
	  "Papua New Guinea",
	  "Paraguay",
	  "Peru",
	  "Philippines",
	  "Pitcairn Islands",
	  "Poland",
	  "Portugal",
	  "Puerto Rico",
	  "Qatar",
	  "Reunion",
	  "Romania",
	  "Russian Federation",
	  "Rwanda",
	  "Saint Barthelemy",
	  "Saint Helena",
	  "Saint Kitts and Nevis",
	  "Saint Lucia",
	  "Saint Martin",
	  "Saint Pierre and Miquelon",
	  "Saint Vincent and the Grenadines",
	  "Samoa",
	  "San Marino",
	  "Sao Tome and Principe",
	  "Saudi Arabia",
	  "Senegal",
	  "Serbia",
	  "Seychelles",
	  "Sierra Leone",
	  "Singapore",
	  "Slovakia (Slovak Republic)",
	  "Slovenia",
	  "Solomon Islands",
	  "Somalia",
	  "South Africa",
	  "South Georgia and the South Sandwich Islands",
	  "Spain",
	  "Sri Lanka",
	  "Sudan",
	  "Suriname",
	  "Svalbard & Jan Mayen Islands",
	  "Swaziland",
	  "Sweden",
	  "Switzerland",
	  "Syrian Arab Republic",
	  "Taiwan",
	  "Tajikistan",
	  "Tanzania",
	  "Thailand",
	  "Timor-Leste",
	  "Togo",
	  "Tokelau",
	  "Tonga",
	  "Trinidad and Tobago",
	  "Tunisia",
	  "Turkey",
	  "Turkmenistan",
	  "Turks and Caicos Islands",
	  "Tuvalu",
	  "Uganda",
	  "Ukraine",
	  "United Arab Emirates",
	  "United Kingdom",
	  "United States of America",
	  "United States Minor Outlying Islands",
	  "Uruguay",
	  "Uzbekistan",
	  "Vanuatu",
	  "Venezuela",
	  "Vietnam",
	  "Virgin Islands, British",
	  "Virgin Islands, U.S.",
	  "Wallis and Futuna",
	  "Western Sahara",
	  "Yemen",
	  "Zambia",
	  "Zimbabwe"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "AD",
	  "AE",
	  "AF",
	  "AG",
	  "AI",
	  "AL",
	  "AM",
	  "AO",
	  "AQ",
	  "AR",
	  "AS",
	  "AT",
	  "AU",
	  "AW",
	  "AX",
	  "AZ",
	  "BA",
	  "BB",
	  "BD",
	  "BE",
	  "BF",
	  "BG",
	  "BH",
	  "BI",
	  "BJ",
	  "BL",
	  "BM",
	  "BN",
	  "BO",
	  "BQ",
	  "BQ",
	  "BR",
	  "BS",
	  "BT",
	  "BV",
	  "BW",
	  "BY",
	  "BZ",
	  "CA",
	  "CC",
	  "CD",
	  "CF",
	  "CG",
	  "CH",
	  "CI",
	  "CK",
	  "CL",
	  "CM",
	  "CN",
	  "CO",
	  "CR",
	  "CU",
	  "CV",
	  "CW",
	  "CX",
	  "CY",
	  "CZ",
	  "DE",
	  "DJ",
	  "DK",
	  "DM",
	  "DO",
	  "DZ",
	  "EC",
	  "EE",
	  "EG",
	  "EH",
	  "ER",
	  "ES",
	  "ET",
	  "FI",
	  "FJ",
	  "FK",
	  "FM",
	  "FO",
	  "FR",
	  "GA",
	  "GB",
	  "GD",
	  "GE",
	  "GF",
	  "GG",
	  "GH",
	  "GI",
	  "GL",
	  "GM",
	  "GN",
	  "GP",
	  "GQ",
	  "GR",
	  "GS",
	  "GT",
	  "GU",
	  "GW",
	  "GY",
	  "HK",
	  "HM",
	  "HN",
	  "HR",
	  "HT",
	  "HU",
	  "ID",
	  "IE",
	  "IL",
	  "IM",
	  "IN",
	  "IO",
	  "IQ",
	  "IR",
	  "IS",
	  "IT",
	  "JE",
	  "JM",
	  "JO",
	  "JP",
	  "KE",
	  "KG",
	  "KH",
	  "KI",
	  "KM",
	  "KN",
	  "KP",
	  "KR",
	  "KW",
	  "KY",
	  "KZ",
	  "LA",
	  "LB",
	  "LC",
	  "LI",
	  "LK",
	  "LR",
	  "LS",
	  "LT",
	  "LU",
	  "LV",
	  "LY",
	  "MA",
	  "MC",
	  "MD",
	  "ME",
	  "MF",
	  "MG",
	  "MH",
	  "MK",
	  "ML",
	  "MM",
	  "MN",
	  "MO",
	  "MP",
	  "MQ",
	  "MR",
	  "MS",
	  "MT",
	  "MU",
	  "MV",
	  "MW",
	  "MX",
	  "MY",
	  "MZ",
	  "NA",
	  "NC",
	  "NE",
	  "NF",
	  "NG",
	  "NI",
	  "NL",
	  "NO",
	  "NP",
	  "NR",
	  "NU",
	  "NZ",
	  "OM",
	  "PA",
	  "PE",
	  "PF",
	  "PG",
	  "PH",
	  "PK",
	  "PL",
	  "PM",
	  "PN",
	  "PR",
	  "PS",
	  "PT",
	  "PW",
	  "PY",
	  "QA",
	  "RE",
	  "RO",
	  "RS",
	  "RU",
	  "RW",
	  "SA",
	  "SB",
	  "SC",
	  "SD",
	  "SE",
	  "SG",
	  "SH",
	  "SI",
	  "SJ",
	  "SK",
	  "SL",
	  "SM",
	  "SN",
	  "SO",
	  "SR",
	  "SS",
	  "ST",
	  "SV",
	  "SX",
	  "SY",
	  "SZ",
	  "TC",
	  "TD",
	  "TF",
	  "TG",
	  "TH",
	  "TJ",
	  "TK",
	  "TL",
	  "TM",
	  "TN",
	  "TO",
	  "TR",
	  "TT",
	  "TV",
	  "TW",
	  "TZ",
	  "UA",
	  "UG",
	  "UM",
	  "US",
	  "UY",
	  "UZ",
	  "VA",
	  "VC",
	  "VE",
	  "VG",
	  "VI",
	  "VN",
	  "VU",
	  "WF",
	  "WS",
	  "YE",
	  "YT",
	  "ZA",
	  "ZM",
	  "ZW"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#####",
	  "####",
	  "###"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Alley",
	  "Avenue",
	  "Branch",
	  "Bridge",
	  "Brook",
	  "Brooks",
	  "Burg",
	  "Burgs",
	  "Bypass",
	  "Camp",
	  "Canyon",
	  "Cape",
	  "Causeway",
	  "Center",
	  "Centers",
	  "Circle",
	  "Circles",
	  "Cliff",
	  "Cliffs",
	  "Club",
	  "Common",
	  "Corner",
	  "Corners",
	  "Course",
	  "Court",
	  "Courts",
	  "Cove",
	  "Coves",
	  "Creek",
	  "Crescent",
	  "Crest",
	  "Crossing",
	  "Crossroad",
	  "Curve",
	  "Dale",
	  "Dam",
	  "Divide",
	  "Drive",
	  "Drive",
	  "Drives",
	  "Estate",
	  "Estates",
	  "Expressway",
	  "Extension",
	  "Extensions",
	  "Fall",
	  "Falls",
	  "Ferry",
	  "Field",
	  "Fields",
	  "Flat",
	  "Flats",
	  "Ford",
	  "Fords",
	  "Forest",
	  "Forge",
	  "Forges",
	  "Fork",
	  "Forks",
	  "Fort",
	  "Freeway",
	  "Garden",
	  "Gardens",
	  "Gateway",
	  "Glen",
	  "Glens",
	  "Green",
	  "Greens",
	  "Grove",
	  "Groves",
	  "Harbor",
	  "Harbors",
	  "Haven",
	  "Heights",
	  "Highway",
	  "Hill",
	  "Hills",
	  "Hollow",
	  "Inlet",
	  "Inlet",
	  "Island",
	  "Island",
	  "Islands",
	  "Islands",
	  "Isle",
	  "Isle",
	  "Junction",
	  "Junctions",
	  "Key",
	  "Keys",
	  "Knoll",
	  "Knolls",
	  "Lake",
	  "Lakes",
	  "Land",
	  "Landing",
	  "Lane",
	  "Light",
	  "Lights",
	  "Loaf",
	  "Lock",
	  "Locks",
	  "Locks",
	  "Lodge",
	  "Lodge",
	  "Loop",
	  "Mall",
	  "Manor",
	  "Manors",
	  "Meadow",
	  "Meadows",
	  "Mews",
	  "Mill",
	  "Mills",
	  "Mission",
	  "Mission",
	  "Motorway",
	  "Mount",
	  "Mountain",
	  "Mountain",
	  "Mountains",
	  "Mountains",
	  "Neck",
	  "Orchard",
	  "Oval",
	  "Overpass",
	  "Park",
	  "Parks",
	  "Parkway",
	  "Parkways",
	  "Pass",
	  "Passage",
	  "Path",
	  "Pike",
	  "Pine",
	  "Pines",
	  "Place",
	  "Plain",
	  "Plains",
	  "Plains",
	  "Plaza",
	  "Plaza",
	  "Point",
	  "Points",
	  "Port",
	  "Port",
	  "Ports",
	  "Ports",
	  "Prairie",
	  "Prairie",
	  "Radial",
	  "Ramp",
	  "Ranch",
	  "Rapid",
	  "Rapids",
	  "Rest",
	  "Ridge",
	  "Ridges",
	  "River",
	  "Road",
	  "Road",
	  "Roads",
	  "Roads",
	  "Route",
	  "Row",
	  "Rue",
	  "Run",
	  "Shoal",
	  "Shoals",
	  "Shore",
	  "Shores",
	  "Skyway",
	  "Spring",
	  "Springs",
	  "Springs",
	  "Spur",
	  "Spurs",
	  "Square",
	  "Square",
	  "Squares",
	  "Squares",
	  "Station",
	  "Station",
	  "Stravenue",
	  "Stravenue",
	  "Stream",
	  "Stream",
	  "Street",
	  "Street",
	  "Streets",
	  "Summit",
	  "Summit",
	  "Terrace",
	  "Throughway",
	  "Trace",
	  "Track",
	  "Trafficway",
	  "Trail",
	  "Trail",
	  "Tunnel",
	  "Tunnel",
	  "Turnpike",
	  "Turnpike",
	  "Underpass",
	  "Union",
	  "Unions",
	  "Valley",
	  "Valleys",
	  "Via",
	  "Viaduct",
	  "View",
	  "Views",
	  "Village",
	  "Village",
	  "Villages",
	  "Ville",
	  "Vista",
	  "Vista",
	  "Walk",
	  "Walks",
	  "Wall",
	  "Way",
	  "Ways",
	  "Well",
	  "Wells"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Apt. ###",
	  "Suite ###"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#####",
	  "#####-####"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#####",
	  "#####-####"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Alabama",
	  "Alaska",
	  "Arizona",
	  "Arkansas",
	  "California",
	  "Colorado",
	  "Connecticut",
	  "Delaware",
	  "Florida",
	  "Georgia",
	  "Hawaii",
	  "Idaho",
	  "Illinois",
	  "Indiana",
	  "Iowa",
	  "Kansas",
	  "Kentucky",
	  "Louisiana",
	  "Maine",
	  "Maryland",
	  "Massachusetts",
	  "Michigan",
	  "Minnesota",
	  "Mississippi",
	  "Missouri",
	  "Montana",
	  "Nebraska",
	  "Nevada",
	  "New Hampshire",
	  "New Jersey",
	  "New Mexico",
	  "New York",
	  "North Carolina",
	  "North Dakota",
	  "Ohio",
	  "Oklahoma",
	  "Oregon",
	  "Pennsylvania",
	  "Rhode Island",
	  "South Carolina",
	  "South Dakota",
	  "Tennessee",
	  "Texas",
	  "Utah",
	  "Vermont",
	  "Virginia",
	  "Washington",
	  "West Virginia",
	  "Wisconsin",
	  "Wyoming"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "AL",
	  "AK",
	  "AZ",
	  "AR",
	  "CA",
	  "CO",
	  "CT",
	  "DE",
	  "FL",
	  "GA",
	  "HI",
	  "ID",
	  "IL",
	  "IN",
	  "IA",
	  "KS",
	  "KY",
	  "LA",
	  "ME",
	  "MD",
	  "MA",
	  "MI",
	  "MN",
	  "MS",
	  "MO",
	  "MT",
	  "NE",
	  "NV",
	  "NH",
	  "NJ",
	  "NM",
	  "NY",
	  "NC",
	  "ND",
	  "OH",
	  "OK",
	  "OR",
	  "PA",
	  "RI",
	  "SC",
	  "SD",
	  "TN",
	  "TX",
	  "UT",
	  "VT",
	  "VA",
	  "WA",
	  "WV",
	  "WI",
	  "WY"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Pacific/Midway",
	  "Pacific/Pago_Pago",
	  "Pacific/Honolulu",
	  "America/Juneau",
	  "America/Los_Angeles",
	  "America/Tijuana",
	  "America/Denver",
	  "America/Phoenix",
	  "America/Chihuahua",
	  "America/Mazatlan",
	  "America/Chicago",
	  "America/Regina",
	  "America/Mexico_City",
	  "America/Mexico_City",
	  "America/Monterrey",
	  "America/Guatemala",
	  "America/New_York",
	  "America/Indiana/Indianapolis",
	  "America/Bogota",
	  "America/Lima",
	  "America/Lima",
	  "America/Halifax",
	  "America/Caracas",
	  "America/La_Paz",
	  "America/Santiago",
	  "America/St_Johns",
	  "America/Sao_Paulo",
	  "America/Argentina/Buenos_Aires",
	  "America/Guyana",
	  "America/Godthab",
	  "Atlantic/South_Georgia",
	  "Atlantic/Azores",
	  "Atlantic/Cape_Verde",
	  "Europe/Dublin",
	  "Europe/London",
	  "Europe/Lisbon",
	  "Europe/London",
	  "Africa/Casablanca",
	  "Africa/Monrovia",
	  "Etc/UTC",
	  "Europe/Belgrade",
	  "Europe/Bratislava",
	  "Europe/Budapest",
	  "Europe/Ljubljana",
	  "Europe/Prague",
	  "Europe/Sarajevo",
	  "Europe/Skopje",
	  "Europe/Warsaw",
	  "Europe/Zagreb",
	  "Europe/Brussels",
	  "Europe/Copenhagen",
	  "Europe/Madrid",
	  "Europe/Paris",
	  "Europe/Amsterdam",
	  "Europe/Berlin",
	  "Europe/Berlin",
	  "Europe/Rome",
	  "Europe/Stockholm",
	  "Europe/Vienna",
	  "Africa/Algiers",
	  "Europe/Bucharest",
	  "Africa/Cairo",
	  "Europe/Helsinki",
	  "Europe/Kiev",
	  "Europe/Riga",
	  "Europe/Sofia",
	  "Europe/Tallinn",
	  "Europe/Vilnius",
	  "Europe/Athens",
	  "Europe/Istanbul",
	  "Europe/Minsk",
	  "Asia/Jerusalem",
	  "Africa/Harare",
	  "Africa/Johannesburg",
	  "Europe/Moscow",
	  "Europe/Moscow",
	  "Europe/Moscow",
	  "Asia/Kuwait",
	  "Asia/Riyadh",
	  "Africa/Nairobi",
	  "Asia/Baghdad",
	  "Asia/Tehran",
	  "Asia/Muscat",
	  "Asia/Muscat",
	  "Asia/Baku",
	  "Asia/Tbilisi",
	  "Asia/Yerevan",
	  "Asia/Kabul",
	  "Asia/Yekaterinburg",
	  "Asia/Karachi",
	  "Asia/Karachi",
	  "Asia/Tashkent",
	  "Asia/Kolkata",
	  "Asia/Kolkata",
	  "Asia/Kolkata",
	  "Asia/Kolkata",
	  "Asia/Kathmandu",
	  "Asia/Dhaka",
	  "Asia/Dhaka",
	  "Asia/Colombo",
	  "Asia/Almaty",
	  "Asia/Novosibirsk",
	  "Asia/Rangoon",
	  "Asia/Bangkok",
	  "Asia/Bangkok",
	  "Asia/Jakarta",
	  "Asia/Krasnoyarsk",
	  "Asia/Shanghai",
	  "Asia/Chongqing",
	  "Asia/Hong_Kong",
	  "Asia/Urumqi",
	  "Asia/Kuala_Lumpur",
	  "Asia/Singapore",
	  "Asia/Taipei",
	  "Australia/Perth",
	  "Asia/Irkutsk",
	  "Asia/Ulaanbaatar",
	  "Asia/Seoul",
	  "Asia/Tokyo",
	  "Asia/Tokyo",
	  "Asia/Tokyo",
	  "Asia/Yakutsk",
	  "Australia/Darwin",
	  "Australia/Adelaide",
	  "Australia/Melbourne",
	  "Australia/Melbourne",
	  "Australia/Sydney",
	  "Australia/Brisbane",
	  "Australia/Hobart",
	  "Asia/Vladivostok",
	  "Pacific/Guam",
	  "Pacific/Port_Moresby",
	  "Asia/Magadan",
	  "Asia/Magadan",
	  "Pacific/Noumea",
	  "Pacific/Fiji",
	  "Asia/Kamchatka",
	  "Pacific/Majuro",
	  "Pacific/Auckland",
	  "Pacific/Auckland",
	  "Pacific/Tongatapu",
	  "Pacific/Fakaofo",
	  "Pacific/Apia"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{city_prefix} #{Name.first_name}#{city_suffix}",
	  "#{city_prefix} #{Name.first_name}",
	  "#{Name.first_name}#{city_suffix}",
	  "#{Name.last_name}#{city_suffix}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{Name.first_name} #{street_suffix}",
	  "#{Name.last_name} #{street_suffix}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{building_number} #{street_name}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "United States of America"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var credit_card = {};
	module['exports'] = credit_card;
	credit_card.visa = __webpack_require__(65);
	credit_card.mastercard = __webpack_require__(66);
	credit_card.discover = __webpack_require__(67);
	credit_card.american_express = __webpack_require__(68);
	credit_card.diners_club = __webpack_require__(69);
	credit_card.jcb = __webpack_require__(70);
	credit_card.switch = __webpack_require__(71);
	credit_card.solo = __webpack_require__(72);
	credit_card.maestro = __webpack_require__(73);
	credit_card.laser = __webpack_require__(74);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/4###########L/",
	  "/4###-####-####-###L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/5[1-5]##-####-####-###L/",
	  "/6771-89##-####-###L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/6011-####-####-###L/",
	  "/65##-####-####-###L/",
	  "/64[4-9]#-####-####-###L/",
	  "/6011-62##-####-####-###L/",
	  "/65##-62##-####-####-###L/",
	  "/64[4-9]#-62##-####-####-###L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/34##-######-####L/",
	  "/37##-######-####L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/30[0-5]#-######-###L/",
	  "/368#-######-###L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/3528-####-####-###L/",
	  "/3529-####-####-###L/",
	  "/35[3-8]#-####-####-###L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/6759-####-####-###L/",
	  "/6759-####-####-####-#L/",
	  "/6759-####-####-####-##L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/6767-####-####-###L/",
	  "/6767-####-####-####-#L/",
	  "/6767-####-####-####-##L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/50#{9,16}L/",
	  "/5[6-8]#{9,16}L/",
	  "/56##{9,16}L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "/6304###########L/",
	  "/6706###########L/",
	  "/6771###########L/",
	  "/6709###########L/",
	  "/6304#########{5,6}L/",
	  "/6706#########{5,6}L/",
	  "/6771#########{5,6}L/",
	  "/6709#########{5,6}L/"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var company = {};
	module['exports'] = company;
	company.suffix = __webpack_require__(76);
	company.adjective = __webpack_require__(77);
	company.descriptor = __webpack_require__(78);
	company.noun = __webpack_require__(79);
	company.bs_verb = __webpack_require__(80);
	company.bs_adjective = __webpack_require__(81);
	company.bs_noun = __webpack_require__(82);
	company.name = __webpack_require__(83);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Inc",
	  "and Sons",
	  "LLC",
	  "Group"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Adaptive",
	  "Advanced",
	  "Ameliorated",
	  "Assimilated",
	  "Automated",
	  "Balanced",
	  "Business-focused",
	  "Centralized",
	  "Cloned",
	  "Compatible",
	  "Configurable",
	  "Cross-group",
	  "Cross-platform",
	  "Customer-focused",
	  "Customizable",
	  "Decentralized",
	  "De-engineered",
	  "Devolved",
	  "Digitized",
	  "Distributed",
	  "Diverse",
	  "Down-sized",
	  "Enhanced",
	  "Enterprise-wide",
	  "Ergonomic",
	  "Exclusive",
	  "Expanded",
	  "Extended",
	  "Face to face",
	  "Focused",
	  "Front-line",
	  "Fully-configurable",
	  "Function-based",
	  "Fundamental",
	  "Future-proofed",
	  "Grass-roots",
	  "Horizontal",
	  "Implemented",
	  "Innovative",
	  "Integrated",
	  "Intuitive",
	  "Inverse",
	  "Managed",
	  "Mandatory",
	  "Monitored",
	  "Multi-channelled",
	  "Multi-lateral",
	  "Multi-layered",
	  "Multi-tiered",
	  "Networked",
	  "Object-based",
	  "Open-architected",
	  "Open-source",
	  "Operative",
	  "Optimized",
	  "Optional",
	  "Organic",
	  "Organized",
	  "Persevering",
	  "Persistent",
	  "Phased",
	  "Polarised",
	  "Pre-emptive",
	  "Proactive",
	  "Profit-focused",
	  "Profound",
	  "Programmable",
	  "Progressive",
	  "Public-key",
	  "Quality-focused",
	  "Reactive",
	  "Realigned",
	  "Re-contextualized",
	  "Re-engineered",
	  "Reduced",
	  "Reverse-engineered",
	  "Right-sized",
	  "Robust",
	  "Seamless",
	  "Secured",
	  "Self-enabling",
	  "Sharable",
	  "Stand-alone",
	  "Streamlined",
	  "Switchable",
	  "Synchronised",
	  "Synergistic",
	  "Synergized",
	  "Team-oriented",
	  "Total",
	  "Triple-buffered",
	  "Universal",
	  "Up-sized",
	  "Upgradable",
	  "User-centric",
	  "User-friendly",
	  "Versatile",
	  "Virtual",
	  "Visionary",
	  "Vision-oriented"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "24 hour",
	  "24/7",
	  "3rd generation",
	  "4th generation",
	  "5th generation",
	  "6th generation",
	  "actuating",
	  "analyzing",
	  "asymmetric",
	  "asynchronous",
	  "attitude-oriented",
	  "background",
	  "bandwidth-monitored",
	  "bi-directional",
	  "bifurcated",
	  "bottom-line",
	  "clear-thinking",
	  "client-driven",
	  "client-server",
	  "coherent",
	  "cohesive",
	  "composite",
	  "context-sensitive",
	  "contextually-based",
	  "content-based",
	  "dedicated",
	  "demand-driven",
	  "didactic",
	  "directional",
	  "discrete",
	  "disintermediate",
	  "dynamic",
	  "eco-centric",
	  "empowering",
	  "encompassing",
	  "even-keeled",
	  "executive",
	  "explicit",
	  "exuding",
	  "fault-tolerant",
	  "foreground",
	  "fresh-thinking",
	  "full-range",
	  "global",
	  "grid-enabled",
	  "heuristic",
	  "high-level",
	  "holistic",
	  "homogeneous",
	  "human-resource",
	  "hybrid",
	  "impactful",
	  "incremental",
	  "intangible",
	  "interactive",
	  "intermediate",
	  "leading edge",
	  "local",
	  "logistical",
	  "maximized",
	  "methodical",
	  "mission-critical",
	  "mobile",
	  "modular",
	  "motivating",
	  "multimedia",
	  "multi-state",
	  "multi-tasking",
	  "national",
	  "needs-based",
	  "neutral",
	  "next generation",
	  "non-volatile",
	  "object-oriented",
	  "optimal",
	  "optimizing",
	  "radical",
	  "real-time",
	  "reciprocal",
	  "regional",
	  "responsive",
	  "scalable",
	  "secondary",
	  "solution-oriented",
	  "stable",
	  "static",
	  "systematic",
	  "systemic",
	  "system-worthy",
	  "tangible",
	  "tertiary",
	  "transitional",
	  "uniform",
	  "upward-trending",
	  "user-facing",
	  "value-added",
	  "web-enabled",
	  "well-modulated",
	  "zero administration",
	  "zero defect",
	  "zero tolerance"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "ability",
	  "access",
	  "adapter",
	  "algorithm",
	  "alliance",
	  "analyzer",
	  "application",
	  "approach",
	  "architecture",
	  "archive",
	  "artificial intelligence",
	  "array",
	  "attitude",
	  "benchmark",
	  "budgetary management",
	  "capability",
	  "capacity",
	  "challenge",
	  "circuit",
	  "collaboration",
	  "complexity",
	  "concept",
	  "conglomeration",
	  "contingency",
	  "core",
	  "customer loyalty",
	  "database",
	  "data-warehouse",
	  "definition",
	  "emulation",
	  "encoding",
	  "encryption",
	  "extranet",
	  "firmware",
	  "flexibility",
	  "focus group",
	  "forecast",
	  "frame",
	  "framework",
	  "function",
	  "functionalities",
	  "Graphic Interface",
	  "groupware",
	  "Graphical User Interface",
	  "hardware",
	  "help-desk",
	  "hierarchy",
	  "hub",
	  "implementation",
	  "info-mediaries",
	  "infrastructure",
	  "initiative",
	  "installation",
	  "instruction set",
	  "interface",
	  "internet solution",
	  "intranet",
	  "knowledge user",
	  "knowledge base",
	  "local area network",
	  "leverage",
	  "matrices",
	  "matrix",
	  "methodology",
	  "middleware",
	  "migration",
	  "model",
	  "moderator",
	  "monitoring",
	  "moratorium",
	  "neural-net",
	  "open architecture",
	  "open system",
	  "orchestration",
	  "paradigm",
	  "parallelism",
	  "policy",
	  "portal",
	  "pricing structure",
	  "process improvement",
	  "product",
	  "productivity",
	  "project",
	  "projection",
	  "protocol",
	  "secured line",
	  "service-desk",
	  "software",
	  "solution",
	  "standardization",
	  "strategy",
	  "structure",
	  "success",
	  "superstructure",
	  "support",
	  "synergy",
	  "system engine",
	  "task-force",
	  "throughput",
	  "time-frame",
	  "toolset",
	  "utilisation",
	  "website",
	  "workforce"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "implement",
	  "utilize",
	  "integrate",
	  "streamline",
	  "optimize",
	  "evolve",
	  "transform",
	  "embrace",
	  "enable",
	  "orchestrate",
	  "leverage",
	  "reinvent",
	  "aggregate",
	  "architect",
	  "enhance",
	  "incentivize",
	  "morph",
	  "empower",
	  "envisioneer",
	  "monetize",
	  "harness",
	  "facilitate",
	  "seize",
	  "disintermediate",
	  "synergize",
	  "strategize",
	  "deploy",
	  "brand",
	  "grow",
	  "target",
	  "syndicate",
	  "synthesize",
	  "deliver",
	  "mesh",
	  "incubate",
	  "engage",
	  "maximize",
	  "benchmark",
	  "expedite",
	  "reintermediate",
	  "whiteboard",
	  "visualize",
	  "repurpose",
	  "innovate",
	  "scale",
	  "unleash",
	  "drive",
	  "extend",
	  "engineer",
	  "revolutionize",
	  "generate",
	  "exploit",
	  "transition",
	  "e-enable",
	  "iterate",
	  "cultivate",
	  "matrix",
	  "productize",
	  "redefine",
	  "recontextualize"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "clicks-and-mortar",
	  "value-added",
	  "vertical",
	  "proactive",
	  "robust",
	  "revolutionary",
	  "scalable",
	  "leading-edge",
	  "innovative",
	  "intuitive",
	  "strategic",
	  "e-business",
	  "mission-critical",
	  "sticky",
	  "one-to-one",
	  "24/7",
	  "end-to-end",
	  "global",
	  "B2B",
	  "B2C",
	  "granular",
	  "frictionless",
	  "virtual",
	  "viral",
	  "dynamic",
	  "24/365",
	  "best-of-breed",
	  "killer",
	  "magnetic",
	  "bleeding-edge",
	  "web-enabled",
	  "interactive",
	  "dot-com",
	  "sexy",
	  "back-end",
	  "real-time",
	  "efficient",
	  "front-end",
	  "distributed",
	  "seamless",
	  "extensible",
	  "turn-key",
	  "world-class",
	  "open-source",
	  "cross-platform",
	  "cross-media",
	  "synergistic",
	  "bricks-and-clicks",
	  "out-of-the-box",
	  "enterprise",
	  "integrated",
	  "impactful",
	  "wireless",
	  "transparent",
	  "next-generation",
	  "cutting-edge",
	  "user-centric",
	  "visionary",
	  "customized",
	  "ubiquitous",
	  "plug-and-play",
	  "collaborative",
	  "compelling",
	  "holistic",
	  "rich"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "synergies",
	  "web-readiness",
	  "paradigms",
	  "markets",
	  "partnerships",
	  "infrastructures",
	  "platforms",
	  "initiatives",
	  "channels",
	  "eyeballs",
	  "communities",
	  "ROI",
	  "solutions",
	  "e-tailers",
	  "e-services",
	  "action-items",
	  "portals",
	  "niches",
	  "technologies",
	  "content",
	  "vortals",
	  "supply-chains",
	  "convergence",
	  "relationships",
	  "architectures",
	  "interfaces",
	  "e-markets",
	  "e-commerce",
	  "systems",
	  "bandwidth",
	  "infomediaries",
	  "models",
	  "mindshare",
	  "deliverables",
	  "users",
	  "schemas",
	  "networks",
	  "applications",
	  "metrics",
	  "e-business",
	  "functionalities",
	  "experiences",
	  "web services",
	  "methodologies"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{Name.last_name} #{suffix}",
	  "#{Name.last_name}-#{Name.last_name}",
	  "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var internet = {};
	module['exports'] = internet;
	internet.free_email = __webpack_require__(85);
	internet.example_email = __webpack_require__(86);
	internet.domain_suffix = __webpack_require__(87);
	internet.avatar_uri = __webpack_require__(88);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "gmail.com",
	  "yahoo.com",
	  "hotmail.com"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "example.org",
	  "example.com",
	  "example.net"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "com",
	  "biz",
	  "info",
	  "name",
	  "net",
	  "org"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/flame_kaizar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nachtmeister/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thinmatt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andychipster/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zacsnider/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cliffseal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kirillz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lindseyzilla/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg",
	  "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var lorem = {};
	module['exports'] = lorem;
	lorem.words = __webpack_require__(90);
	lorem.supplemental = __webpack_require__(91);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "alias",
	  "consequatur",
	  "aut",
	  "perferendis",
	  "sit",
	  "voluptatem",
	  "accusantium",
	  "doloremque",
	  "aperiam",
	  "eaque",
	  "ipsa",
	  "quae",
	  "ab",
	  "illo",
	  "inventore",
	  "veritatis",
	  "et",
	  "quasi",
	  "architecto",
	  "beatae",
	  "vitae",
	  "dicta",
	  "sunt",
	  "explicabo",
	  "aspernatur",
	  "aut",
	  "odit",
	  "aut",
	  "fugit",
	  "sed",
	  "quia",
	  "consequuntur",
	  "magni",
	  "dolores",
	  "eos",
	  "qui",
	  "ratione",
	  "voluptatem",
	  "sequi",
	  "nesciunt",
	  "neque",
	  "dolorem",
	  "ipsum",
	  "quia",
	  "dolor",
	  "sit",
	  "amet",
	  "consectetur",
	  "adipisci",
	  "velit",
	  "sed",
	  "quia",
	  "non",
	  "numquam",
	  "eius",
	  "modi",
	  "tempora",
	  "incidunt",
	  "ut",
	  "labore",
	  "et",
	  "dolore",
	  "magnam",
	  "aliquam",
	  "quaerat",
	  "voluptatem",
	  "ut",
	  "enim",
	  "ad",
	  "minima",
	  "veniam",
	  "quis",
	  "nostrum",
	  "exercitationem",
	  "ullam",
	  "corporis",
	  "nemo",
	  "enim",
	  "ipsam",
	  "voluptatem",
	  "quia",
	  "voluptas",
	  "sit",
	  "suscipit",
	  "laboriosam",
	  "nisi",
	  "ut",
	  "aliquid",
	  "ex",
	  "ea",
	  "commodi",
	  "consequatur",
	  "quis",
	  "autem",
	  "vel",
	  "eum",
	  "iure",
	  "reprehenderit",
	  "qui",
	  "in",
	  "ea",
	  "voluptate",
	  "velit",
	  "esse",
	  "quam",
	  "nihil",
	  "molestiae",
	  "et",
	  "iusto",
	  "odio",
	  "dignissimos",
	  "ducimus",
	  "qui",
	  "blanditiis",
	  "praesentium",
	  "laudantium",
	  "totam",
	  "rem",
	  "voluptatum",
	  "deleniti",
	  "atque",
	  "corrupti",
	  "quos",
	  "dolores",
	  "et",
	  "quas",
	  "molestias",
	  "excepturi",
	  "sint",
	  "occaecati",
	  "cupiditate",
	  "non",
	  "provident",
	  "sed",
	  "ut",
	  "perspiciatis",
	  "unde",
	  "omnis",
	  "iste",
	  "natus",
	  "error",
	  "similique",
	  "sunt",
	  "in",
	  "culpa",
	  "qui",
	  "officia",
	  "deserunt",
	  "mollitia",
	  "animi",
	  "id",
	  "est",
	  "laborum",
	  "et",
	  "dolorum",
	  "fuga",
	  "et",
	  "harum",
	  "quidem",
	  "rerum",
	  "facilis",
	  "est",
	  "et",
	  "expedita",
	  "distinctio",
	  "nam",
	  "libero",
	  "tempore",
	  "cum",
	  "soluta",
	  "nobis",
	  "est",
	  "eligendi",
	  "optio",
	  "cumque",
	  "nihil",
	  "impedit",
	  "quo",
	  "porro",
	  "quisquam",
	  "est",
	  "qui",
	  "minus",
	  "id",
	  "quod",
	  "maxime",
	  "placeat",
	  "facere",
	  "possimus",
	  "omnis",
	  "voluptas",
	  "assumenda",
	  "est",
	  "omnis",
	  "dolor",
	  "repellendus",
	  "temporibus",
	  "autem",
	  "quibusdam",
	  "et",
	  "aut",
	  "consequatur",
	  "vel",
	  "illum",
	  "qui",
	  "dolorem",
	  "eum",
	  "fugiat",
	  "quo",
	  "voluptas",
	  "nulla",
	  "pariatur",
	  "at",
	  "vero",
	  "eos",
	  "et",
	  "accusamus",
	  "officiis",
	  "debitis",
	  "aut",
	  "rerum",
	  "necessitatibus",
	  "saepe",
	  "eveniet",
	  "ut",
	  "et",
	  "voluptates",
	  "repudiandae",
	  "sint",
	  "et",
	  "molestiae",
	  "non",
	  "recusandae",
	  "itaque",
	  "earum",
	  "rerum",
	  "hic",
	  "tenetur",
	  "a",
	  "sapiente",
	  "delectus",
	  "ut",
	  "aut",
	  "reiciendis",
	  "voluptatibus",
	  "maiores",
	  "doloribus",
	  "asperiores",
	  "repellat"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "abbas",
	  "abduco",
	  "abeo",
	  "abscido",
	  "absconditus",
	  "absens",
	  "absorbeo",
	  "absque",
	  "abstergo",
	  "absum",
	  "abundans",
	  "abutor",
	  "accedo",
	  "accendo",
	  "acceptus",
	  "accipio",
	  "accommodo",
	  "accusator",
	  "acer",
	  "acerbitas",
	  "acervus",
	  "acidus",
	  "acies",
	  "acquiro",
	  "acsi",
	  "adamo",
	  "adaugeo",
	  "addo",
	  "adduco",
	  "ademptio",
	  "adeo",
	  "adeptio",
	  "adfectus",
	  "adfero",
	  "adficio",
	  "adflicto",
	  "adhaero",
	  "adhuc",
	  "adicio",
	  "adimpleo",
	  "adinventitias",
	  "adipiscor",
	  "adiuvo",
	  "administratio",
	  "admiratio",
	  "admitto",
	  "admoneo",
	  "admoveo",
	  "adnuo",
	  "adopto",
	  "adsidue",
	  "adstringo",
	  "adsuesco",
	  "adsum",
	  "adulatio",
	  "adulescens",
	  "adultus",
	  "aduro",
	  "advenio",
	  "adversus",
	  "advoco",
	  "aedificium",
	  "aeger",
	  "aegre",
	  "aegrotatio",
	  "aegrus",
	  "aeneus",
	  "aequitas",
	  "aequus",
	  "aer",
	  "aestas",
	  "aestivus",
	  "aestus",
	  "aetas",
	  "aeternus",
	  "ager",
	  "aggero",
	  "aggredior",
	  "agnitio",
	  "agnosco",
	  "ago",
	  "ait",
	  "aiunt",
	  "alienus",
	  "alii",
	  "alioqui",
	  "aliqua",
	  "alius",
	  "allatus",
	  "alo",
	  "alter",
	  "altus",
	  "alveus",
	  "amaritudo",
	  "ambitus",
	  "ambulo",
	  "amicitia",
	  "amiculum",
	  "amissio",
	  "amita",
	  "amitto",
	  "amo",
	  "amor",
	  "amoveo",
	  "amplexus",
	  "amplitudo",
	  "amplus",
	  "ancilla",
	  "angelus",
	  "angulus",
	  "angustus",
	  "animadverto",
	  "animi",
	  "animus",
	  "annus",
	  "anser",
	  "ante",
	  "antea",
	  "antepono",
	  "antiquus",
	  "aperio",
	  "aperte",
	  "apostolus",
	  "apparatus",
	  "appello",
	  "appono",
	  "appositus",
	  "approbo",
	  "apto",
	  "aptus",
	  "apud",
	  "aqua",
	  "ara",
	  "aranea",
	  "arbitro",
	  "arbor",
	  "arbustum",
	  "arca",
	  "arceo",
	  "arcesso",
	  "arcus",
	  "argentum",
	  "argumentum",
	  "arguo",
	  "arma",
	  "armarium",
	  "armo",
	  "aro",
	  "ars",
	  "articulus",
	  "artificiose",
	  "arto",
	  "arx",
	  "ascisco",
	  "ascit",
	  "asper",
	  "aspicio",
	  "asporto",
	  "assentator",
	  "astrum",
	  "atavus",
	  "ater",
	  "atqui",
	  "atrocitas",
	  "atrox",
	  "attero",
	  "attollo",
	  "attonbitus",
	  "auctor",
	  "auctus",
	  "audacia",
	  "audax",
	  "audentia",
	  "audeo",
	  "audio",
	  "auditor",
	  "aufero",
	  "aureus",
	  "auris",
	  "aurum",
	  "aut",
	  "autem",
	  "autus",
	  "auxilium",
	  "avaritia",
	  "avarus",
	  "aveho",
	  "averto",
	  "avoco",
	  "baiulus",
	  "balbus",
	  "barba",
	  "bardus",
	  "basium",
	  "beatus",
	  "bellicus",
	  "bellum",
	  "bene",
	  "beneficium",
	  "benevolentia",
	  "benigne",
	  "bestia",
	  "bibo",
	  "bis",
	  "blandior",
	  "bonus",
	  "bos",
	  "brevis",
	  "cado",
	  "caecus",
	  "caelestis",
	  "caelum",
	  "calamitas",
	  "calcar",
	  "calco",
	  "calculus",
	  "callide",
	  "campana",
	  "candidus",
	  "canis",
	  "canonicus",
	  "canto",
	  "capillus",
	  "capio",
	  "capitulus",
	  "capto",
	  "caput",
	  "carbo",
	  "carcer",
	  "careo",
	  "caries",
	  "cariosus",
	  "caritas",
	  "carmen",
	  "carpo",
	  "carus",
	  "casso",
	  "caste",
	  "casus",
	  "catena",
	  "caterva",
	  "cattus",
	  "cauda",
	  "causa",
	  "caute",
	  "caveo",
	  "cavus",
	  "cedo",
	  "celebrer",
	  "celer",
	  "celo",
	  "cena",
	  "cenaculum",
	  "ceno",
	  "censura",
	  "centum",
	  "cerno",
	  "cernuus",
	  "certe",
	  "certo",
	  "certus",
	  "cervus",
	  "cetera",
	  "charisma",
	  "chirographum",
	  "cibo",
	  "cibus",
	  "cicuta",
	  "cilicium",
	  "cimentarius",
	  "ciminatio",
	  "cinis",
	  "circumvenio",
	  "cito",
	  "civis",
	  "civitas",
	  "clam",
	  "clamo",
	  "claro",
	  "clarus",
	  "claudeo",
	  "claustrum",
	  "clementia",
	  "clibanus",
	  "coadunatio",
	  "coaegresco",
	  "coepi",
	  "coerceo",
	  "cogito",
	  "cognatus",
	  "cognomen",
	  "cogo",
	  "cohaero",
	  "cohibeo",
	  "cohors",
	  "colligo",
	  "colloco",
	  "collum",
	  "colo",
	  "color",
	  "coma",
	  "combibo",
	  "comburo",
	  "comedo",
	  "comes",
	  "cometes",
	  "comis",
	  "comitatus",
	  "commemoro",
	  "comminor",
	  "commodo",
	  "communis",
	  "comparo",
	  "compello",
	  "complectus",
	  "compono",
	  "comprehendo",
	  "comptus",
	  "conatus",
	  "concedo",
	  "concido",
	  "conculco",
	  "condico",
	  "conduco",
	  "confero",
	  "confido",
	  "conforto",
	  "confugo",
	  "congregatio",
	  "conicio",
	  "coniecto",
	  "conitor",
	  "coniuratio",
	  "conor",
	  "conqueror",
	  "conscendo",
	  "conservo",
	  "considero",
	  "conspergo",
	  "constans",
	  "consuasor",
	  "contabesco",
	  "contego",
	  "contigo",
	  "contra",
	  "conturbo",
	  "conventus",
	  "convoco",
	  "copia",
	  "copiose",
	  "cornu",
	  "corona",
	  "corpus",
	  "correptius",
	  "corrigo",
	  "corroboro",
	  "corrumpo",
	  "coruscus",
	  "cotidie",
	  "crapula",
	  "cras",
	  "crastinus",
	  "creator",
	  "creber",
	  "crebro",
	  "credo",
	  "creo",
	  "creptio",
	  "crepusculum",
	  "cresco",
	  "creta",
	  "cribro",
	  "crinis",
	  "cruciamentum",
	  "crudelis",
	  "cruentus",
	  "crur",
	  "crustulum",
	  "crux",
	  "cubicularis",
	  "cubitum",
	  "cubo",
	  "cui",
	  "cuius",
	  "culpa",
	  "culpo",
	  "cultellus",
	  "cultura",
	  "cum",
	  "cunabula",
	  "cunae",
	  "cunctatio",
	  "cupiditas",
	  "cupio",
	  "cuppedia",
	  "cupressus",
	  "cur",
	  "cura",
	  "curatio",
	  "curia",
	  "curiositas",
	  "curis",
	  "curo",
	  "curriculum",
	  "currus",
	  "cursim",
	  "curso",
	  "cursus",
	  "curto",
	  "curtus",
	  "curvo",
	  "curvus",
	  "custodia",
	  "damnatio",
	  "damno",
	  "dapifer",
	  "debeo",
	  "debilito",
	  "decens",
	  "decerno",
	  "decet",
	  "decimus",
	  "decipio",
	  "decor",
	  "decretum",
	  "decumbo",
	  "dedecor",
	  "dedico",
	  "deduco",
	  "defaeco",
	  "defendo",
	  "defero",
	  "defessus",
	  "defetiscor",
	  "deficio",
	  "defigo",
	  "defleo",
	  "defluo",
	  "defungo",
	  "degenero",
	  "degero",
	  "degusto",
	  "deinde",
	  "delectatio",
	  "delego",
	  "deleo",
	  "delibero",
	  "delicate",
	  "delinquo",
	  "deludo",
	  "demens",
	  "demergo",
	  "demitto",
	  "demo",
	  "demonstro",
	  "demoror",
	  "demulceo",
	  "demum",
	  "denego",
	  "denique",
	  "dens",
	  "denuncio",
	  "denuo",
	  "deorsum",
	  "depereo",
	  "depono",
	  "depopulo",
	  "deporto",
	  "depraedor",
	  "deprecator",
	  "deprimo",
	  "depromo",
	  "depulso",
	  "deputo",
	  "derelinquo",
	  "derideo",
	  "deripio",
	  "desidero",
	  "desino",
	  "desipio",
	  "desolo",
	  "desparatus",
	  "despecto",
	  "despirmatio",
	  "infit",
	  "inflammatio",
	  "paens",
	  "patior",
	  "patria",
	  "patrocinor",
	  "patruus",
	  "pauci",
	  "paulatim",
	  "pauper",
	  "pax",
	  "peccatus",
	  "pecco",
	  "pecto",
	  "pectus",
	  "pecunia",
	  "pecus",
	  "peior",
	  "pel",
	  "ocer",
	  "socius",
	  "sodalitas",
	  "sol",
	  "soleo",
	  "solio",
	  "solitudo",
	  "solium",
	  "sollers",
	  "sollicito",
	  "solum",
	  "solus",
	  "solutio",
	  "solvo",
	  "somniculosus",
	  "somnus",
	  "sonitus",
	  "sono",
	  "sophismata",
	  "sopor",
	  "sordeo",
	  "sortitus",
	  "spargo",
	  "speciosus",
	  "spectaculum",
	  "speculum",
	  "sperno",
	  "spero",
	  "spes",
	  "spiculum",
	  "spiritus",
	  "spoliatio",
	  "sponte",
	  "stabilis",
	  "statim",
	  "statua",
	  "stella",
	  "stillicidium",
	  "stipes",
	  "stips",
	  "sto",
	  "strenuus",
	  "strues",
	  "studio",
	  "stultus",
	  "suadeo",
	  "suasoria",
	  "sub",
	  "subito",
	  "subiungo",
	  "sublime",
	  "subnecto",
	  "subseco",
	  "substantia",
	  "subvenio",
	  "succedo",
	  "succurro",
	  "sufficio",
	  "suffoco",
	  "suffragium",
	  "suggero",
	  "sui",
	  "sulum",
	  "sum",
	  "summa",
	  "summisse",
	  "summopere",
	  "sumo",
	  "sumptus",
	  "supellex",
	  "super",
	  "suppellex",
	  "supplanto",
	  "suppono",
	  "supra",
	  "surculus",
	  "surgo",
	  "sursum",
	  "suscipio",
	  "suspendo",
	  "sustineo",
	  "suus",
	  "synagoga",
	  "tabella",
	  "tabernus",
	  "tabesco",
	  "tabgo",
	  "tabula",
	  "taceo",
	  "tactus",
	  "taedium",
	  "talio",
	  "talis",
	  "talus",
	  "tam",
	  "tamdiu",
	  "tamen",
	  "tametsi",
	  "tamisium",
	  "tamquam",
	  "tandem",
	  "tantillus",
	  "tantum",
	  "tardus",
	  "tego",
	  "temeritas",
	  "temperantia",
	  "templum",
	  "temptatio",
	  "tempus",
	  "tenax",
	  "tendo",
	  "teneo",
	  "tener",
	  "tenuis",
	  "tenus",
	  "tepesco",
	  "tepidus",
	  "ter",
	  "terebro",
	  "teres",
	  "terga",
	  "tergeo",
	  "tergiversatio",
	  "tergo",
	  "tergum",
	  "termes",
	  "terminatio",
	  "tero",
	  "terra",
	  "terreo",
	  "territo",
	  "terror",
	  "tersus",
	  "tertius",
	  "testimonium",
	  "texo",
	  "textilis",
	  "textor",
	  "textus",
	  "thalassinus",
	  "theatrum",
	  "theca",
	  "thema",
	  "theologus",
	  "thermae",
	  "thesaurus",
	  "thesis",
	  "thorax",
	  "thymbra",
	  "thymum",
	  "tibi",
	  "timidus",
	  "timor",
	  "titulus",
	  "tolero",
	  "tollo",
	  "tondeo",
	  "tonsor",
	  "torqueo",
	  "torrens",
	  "tot",
	  "totidem",
	  "toties",
	  "totus",
	  "tracto",
	  "trado",
	  "traho",
	  "trans",
	  "tredecim",
	  "tremo",
	  "trepide",
	  "tres",
	  "tribuo",
	  "tricesimus",
	  "triduana",
	  "triginta",
	  "tripudio",
	  "tristis",
	  "triumphus",
	  "trucido",
	  "truculenter",
	  "tubineus",
	  "tui",
	  "tum",
	  "tumultus",
	  "tunc",
	  "turba",
	  "turbo",
	  "turpe",
	  "turpis",
	  "tutamen",
	  "tutis",
	  "tyrannus",
	  "uberrime",
	  "ubi",
	  "ulciscor",
	  "ullus",
	  "ulterius",
	  "ultio",
	  "ultra",
	  "umbra",
	  "umerus",
	  "umquam",
	  "una",
	  "unde",
	  "undique",
	  "universe",
	  "unus",
	  "urbanus",
	  "urbs",
	  "uredo",
	  "usitas",
	  "usque",
	  "ustilo",
	  "ustulo",
	  "usus",
	  "uter",
	  "uterque",
	  "utilis",
	  "utique",
	  "utor",
	  "utpote",
	  "utrimque",
	  "utroque",
	  "utrum",
	  "uxor",
	  "vaco",
	  "vacuus",
	  "vado",
	  "vae",
	  "valde",
	  "valens",
	  "valeo",
	  "valetudo",
	  "validus",
	  "vallum",
	  "vapulus",
	  "varietas",
	  "varius",
	  "vehemens",
	  "vel",
	  "velociter",
	  "velum",
	  "velut",
	  "venia",
	  "venio",
	  "ventito",
	  "ventosus",
	  "ventus",
	  "venustas",
	  "ver",
	  "verbera",
	  "verbum",
	  "vere",
	  "verecundia",
	  "vereor",
	  "vergo",
	  "veritas",
	  "vero",
	  "versus",
	  "verto",
	  "verumtamen",
	  "verus",
	  "vesco",
	  "vesica",
	  "vesper",
	  "vespillo",
	  "vester",
	  "vestigium",
	  "vestrum",
	  "vetus",
	  "via",
	  "vicinus",
	  "vicissitudo",
	  "victoria",
	  "victus",
	  "videlicet",
	  "video",
	  "viduata",
	  "viduo",
	  "vigilo",
	  "vigor",
	  "vilicus",
	  "vilis",
	  "vilitas",
	  "villa",
	  "vinco",
	  "vinculum",
	  "vindico",
	  "vinitor",
	  "vinum",
	  "vir",
	  "virga",
	  "virgo",
	  "viridis",
	  "viriliter",
	  "virtus",
	  "vis",
	  "viscus",
	  "vita",
	  "vitiosus",
	  "vitium",
	  "vito",
	  "vivo",
	  "vix",
	  "vobis",
	  "vociferor",
	  "voco",
	  "volaticus",
	  "volo",
	  "volubilis",
	  "voluntarius",
	  "volup",
	  "volutabrum",
	  "volva",
	  "vomer",
	  "vomica",
	  "vomito",
	  "vorago",
	  "vorax",
	  "voro",
	  "vos",
	  "votum",
	  "voveo",
	  "vox",
	  "vulariter",
	  "vulgaris",
	  "vulgivagus",
	  "vulgo",
	  "vulgus",
	  "vulnero",
	  "vulnus",
	  "vulpes",
	  "vulticulus",
	  "vultuosus",
	  "xiphias"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var name = {};
	module['exports'] = name;
	name.first_name = __webpack_require__(93);
	name.last_name = __webpack_require__(94);
	name.prefix = __webpack_require__(95);
	name.suffix = __webpack_require__(96);
	name.title = __webpack_require__(97);
	name.name = __webpack_require__(98);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Aaliyah",
	  "Aaron",
	  "Abagail",
	  "Abbey",
	  "Abbie",
	  "Abbigail",
	  "Abby",
	  "Abdiel",
	  "Abdul",
	  "Abdullah",
	  "Abe",
	  "Abel",
	  "Abelardo",
	  "Abigail",
	  "Abigale",
	  "Abigayle",
	  "Abner",
	  "Abraham",
	  "Ada",
	  "Adah",
	  "Adalberto",
	  "Adaline",
	  "Adam",
	  "Adan",
	  "Addie",
	  "Addison",
	  "Adela",
	  "Adelbert",
	  "Adele",
	  "Adelia",
	  "Adeline",
	  "Adell",
	  "Adella",
	  "Adelle",
	  "Aditya",
	  "Adolf",
	  "Adolfo",
	  "Adolph",
	  "Adolphus",
	  "Adonis",
	  "Adrain",
	  "Adrian",
	  "Adriana",
	  "Adrianna",
	  "Adriel",
	  "Adrien",
	  "Adrienne",
	  "Afton",
	  "Aglae",
	  "Agnes",
	  "Agustin",
	  "Agustina",
	  "Ahmad",
	  "Ahmed",
	  "Aida",
	  "Aidan",
	  "Aiden",
	  "Aileen",
	  "Aimee",
	  "Aisha",
	  "Aiyana",
	  "Akeem",
	  "Al",
	  "Alaina",
	  "Alan",
	  "Alana",
	  "Alanis",
	  "Alanna",
	  "Alayna",
	  "Alba",
	  "Albert",
	  "Alberta",
	  "Albertha",
	  "Alberto",
	  "Albin",
	  "Albina",
	  "Alda",
	  "Alden",
	  "Alec",
	  "Aleen",
	  "Alejandra",
	  "Alejandrin",
	  "Alek",
	  "Alena",
	  "Alene",
	  "Alessandra",
	  "Alessandro",
	  "Alessia",
	  "Aletha",
	  "Alex",
	  "Alexa",
	  "Alexander",
	  "Alexandra",
	  "Alexandre",
	  "Alexandrea",
	  "Alexandria",
	  "Alexandrine",
	  "Alexandro",
	  "Alexane",
	  "Alexanne",
	  "Alexie",
	  "Alexis",
	  "Alexys",
	  "Alexzander",
	  "Alf",
	  "Alfonso",
	  "Alfonzo",
	  "Alford",
	  "Alfred",
	  "Alfreda",
	  "Alfredo",
	  "Ali",
	  "Alia",
	  "Alice",
	  "Alicia",
	  "Alisa",
	  "Alisha",
	  "Alison",
	  "Alivia",
	  "Aliya",
	  "Aliyah",
	  "Aliza",
	  "Alize",
	  "Allan",
	  "Allen",
	  "Allene",
	  "Allie",
	  "Allison",
	  "Ally",
	  "Alphonso",
	  "Alta",
	  "Althea",
	  "Alva",
	  "Alvah",
	  "Alvena",
	  "Alvera",
	  "Alverta",
	  "Alvina",
	  "Alvis",
	  "Alyce",
	  "Alycia",
	  "Alysa",
	  "Alysha",
	  "Alyson",
	  "Alysson",
	  "Amalia",
	  "Amanda",
	  "Amani",
	  "Amara",
	  "Amari",
	  "Amaya",
	  "Amber",
	  "Ambrose",
	  "Amelia",
	  "Amelie",
	  "Amely",
	  "America",
	  "Americo",
	  "Amie",
	  "Amina",
	  "Amir",
	  "Amira",
	  "Amiya",
	  "Amos",
	  "Amparo",
	  "Amy",
	  "Amya",
	  "Ana",
	  "Anabel",
	  "Anabelle",
	  "Anahi",
	  "Anais",
	  "Anastacio",
	  "Anastasia",
	  "Anderson",
	  "Andre",
	  "Andreane",
	  "Andreanne",
	  "Andres",
	  "Andrew",
	  "Andy",
	  "Angel",
	  "Angela",
	  "Angelica",
	  "Angelina",
	  "Angeline",
	  "Angelita",
	  "Angelo",
	  "Angie",
	  "Angus",
	  "Anibal",
	  "Anika",
	  "Anissa",
	  "Anita",
	  "Aniya",
	  "Aniyah",
	  "Anjali",
	  "Anna",
	  "Annabel",
	  "Annabell",
	  "Annabelle",
	  "Annalise",
	  "Annamae",
	  "Annamarie",
	  "Anne",
	  "Annetta",
	  "Annette",
	  "Annie",
	  "Ansel",
	  "Ansley",
	  "Anthony",
	  "Antoinette",
	  "Antone",
	  "Antonetta",
	  "Antonette",
	  "Antonia",
	  "Antonietta",
	  "Antonina",
	  "Antonio",
	  "Antwan",
	  "Antwon",
	  "Anya",
	  "April",
	  "Ara",
	  "Araceli",
	  "Aracely",
	  "Arch",
	  "Archibald",
	  "Ardella",
	  "Arden",
	  "Ardith",
	  "Arely",
	  "Ari",
	  "Ariane",
	  "Arianna",
	  "Aric",
	  "Ariel",
	  "Arielle",
	  "Arjun",
	  "Arlene",
	  "Arlie",
	  "Arlo",
	  "Armand",
	  "Armando",
	  "Armani",
	  "Arnaldo",
	  "Arne",
	  "Arno",
	  "Arnold",
	  "Arnoldo",
	  "Arnulfo",
	  "Aron",
	  "Art",
	  "Arthur",
	  "Arturo",
	  "Arvel",
	  "Arvid",
	  "Arvilla",
	  "Aryanna",
	  "Asa",
	  "Asha",
	  "Ashlee",
	  "Ashleigh",
	  "Ashley",
	  "Ashly",
	  "Ashlynn",
	  "Ashton",
	  "Ashtyn",
	  "Asia",
	  "Assunta",
	  "Astrid",
	  "Athena",
	  "Aubree",
	  "Aubrey",
	  "Audie",
	  "Audra",
	  "Audreanne",
	  "Audrey",
	  "August",
	  "Augusta",
	  "Augustine",
	  "Augustus",
	  "Aurelia",
	  "Aurelie",
	  "Aurelio",
	  "Aurore",
	  "Austen",
	  "Austin",
	  "Austyn",
	  "Autumn",
	  "Ava",
	  "Avery",
	  "Avis",
	  "Axel",
	  "Ayana",
	  "Ayden",
	  "Ayla",
	  "Aylin",
	  "Baby",
	  "Bailee",
	  "Bailey",
	  "Barbara",
	  "Barney",
	  "Baron",
	  "Barrett",
	  "Barry",
	  "Bart",
	  "Bartholome",
	  "Barton",
	  "Baylee",
	  "Beatrice",
	  "Beau",
	  "Beaulah",
	  "Bell",
	  "Bella",
	  "Belle",
	  "Ben",
	  "Benedict",
	  "Benjamin",
	  "Bennett",
	  "Bennie",
	  "Benny",
	  "Benton",
	  "Berenice",
	  "Bernadette",
	  "Bernadine",
	  "Bernard",
	  "Bernardo",
	  "Berneice",
	  "Bernhard",
	  "Bernice",
	  "Bernie",
	  "Berniece",
	  "Bernita",
	  "Berry",
	  "Bert",
	  "Berta",
	  "Bertha",
	  "Bertram",
	  "Bertrand",
	  "Beryl",
	  "Bessie",
	  "Beth",
	  "Bethany",
	  "Bethel",
	  "Betsy",
	  "Bette",
	  "Bettie",
	  "Betty",
	  "Bettye",
	  "Beulah",
	  "Beverly",
	  "Bianka",
	  "Bill",
	  "Billie",
	  "Billy",
	  "Birdie",
	  "Blair",
	  "Blaise",
	  "Blake",
	  "Blanca",
	  "Blanche",
	  "Blaze",
	  "Bo",
	  "Bobbie",
	  "Bobby",
	  "Bonita",
	  "Bonnie",
	  "Boris",
	  "Boyd",
	  "Brad",
	  "Braden",
	  "Bradford",
	  "Bradley",
	  "Bradly",
	  "Brady",
	  "Braeden",
	  "Brain",
	  "Brandi",
	  "Brando",
	  "Brandon",
	  "Brandt",
	  "Brandy",
	  "Brandyn",
	  "Brannon",
	  "Branson",
	  "Brant",
	  "Braulio",
	  "Braxton",
	  "Brayan",
	  "Breana",
	  "Breanna",
	  "Breanne",
	  "Brenda",
	  "Brendan",
	  "Brenden",
	  "Brendon",
	  "Brenna",
	  "Brennan",
	  "Brennon",
	  "Brent",
	  "Bret",
	  "Brett",
	  "Bria",
	  "Brian",
	  "Briana",
	  "Brianne",
	  "Brice",
	  "Bridget",
	  "Bridgette",
	  "Bridie",
	  "Brielle",
	  "Brigitte",
	  "Brionna",
	  "Brisa",
	  "Britney",
	  "Brittany",
	  "Brock",
	  "Broderick",
	  "Brody",
	  "Brook",
	  "Brooke",
	  "Brooklyn",
	  "Brooks",
	  "Brown",
	  "Bruce",
	  "Bryana",
	  "Bryce",
	  "Brycen",
	  "Bryon",
	  "Buck",
	  "Bud",
	  "Buddy",
	  "Buford",
	  "Bulah",
	  "Burdette",
	  "Burley",
	  "Burnice",
	  "Buster",
	  "Cade",
	  "Caden",
	  "Caesar",
	  "Caitlyn",
	  "Cale",
	  "Caleb",
	  "Caleigh",
	  "Cali",
	  "Calista",
	  "Callie",
	  "Camden",
	  "Cameron",
	  "Camila",
	  "Camilla",
	  "Camille",
	  "Camren",
	  "Camron",
	  "Camryn",
	  "Camylle",
	  "Candace",
	  "Candelario",
	  "Candice",
	  "Candida",
	  "Candido",
	  "Cara",
	  "Carey",
	  "Carissa",
	  "Carlee",
	  "Carleton",
	  "Carley",
	  "Carli",
	  "Carlie",
	  "Carlo",
	  "Carlos",
	  "Carlotta",
	  "Carmel",
	  "Carmela",
	  "Carmella",
	  "Carmelo",
	  "Carmen",
	  "Carmine",
	  "Carol",
	  "Carolanne",
	  "Carole",
	  "Carolina",
	  "Caroline",
	  "Carolyn",
	  "Carolyne",
	  "Carrie",
	  "Carroll",
	  "Carson",
	  "Carter",
	  "Cary",
	  "Casandra",
	  "Casey",
	  "Casimer",
	  "Casimir",
	  "Casper",
	  "Cassandra",
	  "Cassandre",
	  "Cassidy",
	  "Cassie",
	  "Catalina",
	  "Caterina",
	  "Catharine",
	  "Catherine",
	  "Cathrine",
	  "Cathryn",
	  "Cathy",
	  "Cayla",
	  "Ceasar",
	  "Cecelia",
	  "Cecil",
	  "Cecile",
	  "Cecilia",
	  "Cedrick",
	  "Celestine",
	  "Celestino",
	  "Celia",
	  "Celine",
	  "Cesar",
	  "Chad",
	  "Chadd",
	  "Chadrick",
	  "Chaim",
	  "Chance",
	  "Chandler",
	  "Chanel",
	  "Chanelle",
	  "Charity",
	  "Charlene",
	  "Charles",
	  "Charley",
	  "Charlie",
	  "Charlotte",
	  "Chase",
	  "Chasity",
	  "Chauncey",
	  "Chaya",
	  "Chaz",
	  "Chelsea",
	  "Chelsey",
	  "Chelsie",
	  "Chesley",
	  "Chester",
	  "Chet",
	  "Cheyanne",
	  "Cheyenne",
	  "Chloe",
	  "Chris",
	  "Christ",
	  "Christa",
	  "Christelle",
	  "Christian",
	  "Christiana",
	  "Christina",
	  "Christine",
	  "Christop",
	  "Christophe",
	  "Christopher",
	  "Christy",
	  "Chyna",
	  "Ciara",
	  "Cicero",
	  "Cielo",
	  "Cierra",
	  "Cindy",
	  "Citlalli",
	  "Clair",
	  "Claire",
	  "Clara",
	  "Clarabelle",
	  "Clare",
	  "Clarissa",
	  "Clark",
	  "Claud",
	  "Claude",
	  "Claudia",
	  "Claudie",
	  "Claudine",
	  "Clay",
	  "Clemens",
	  "Clement",
	  "Clementina",
	  "Clementine",
	  "Clemmie",
	  "Cleo",
	  "Cleora",
	  "Cleta",
	  "Cletus",
	  "Cleve",
	  "Cleveland",
	  "Clifford",
	  "Clifton",
	  "Clint",
	  "Clinton",
	  "Clotilde",
	  "Clovis",
	  "Cloyd",
	  "Clyde",
	  "Coby",
	  "Cody",
	  "Colby",
	  "Cole",
	  "Coleman",
	  "Colin",
	  "Colleen",
	  "Collin",
	  "Colt",
	  "Colten",
	  "Colton",
	  "Columbus",
	  "Concepcion",
	  "Conner",
	  "Connie",
	  "Connor",
	  "Conor",
	  "Conrad",
	  "Constance",
	  "Constantin",
	  "Consuelo",
	  "Cooper",
	  "Cora",
	  "Coralie",
	  "Corbin",
	  "Cordelia",
	  "Cordell",
	  "Cordia",
	  "Cordie",
	  "Corene",
	  "Corine",
	  "Cornelius",
	  "Cornell",
	  "Corrine",
	  "Cortez",
	  "Cortney",
	  "Cory",
	  "Coty",
	  "Courtney",
	  "Coy",
	  "Craig",
	  "Crawford",
	  "Creola",
	  "Cristal",
	  "Cristian",
	  "Cristina",
	  "Cristobal",
	  "Cristopher",
	  "Cruz",
	  "Crystal",
	  "Crystel",
	  "Cullen",
	  "Curt",
	  "Curtis",
	  "Cydney",
	  "Cynthia",
	  "Cyril",
	  "Cyrus",
	  "Dagmar",
	  "Dahlia",
	  "Daija",
	  "Daisha",
	  "Daisy",
	  "Dakota",
	  "Dale",
	  "Dallas",
	  "Dallin",
	  "Dalton",
	  "Damaris",
	  "Dameon",
	  "Damian",
	  "Damien",
	  "Damion",
	  "Damon",
	  "Dan",
	  "Dana",
	  "Dandre",
	  "Dane",
	  "D'angelo",
	  "Dangelo",
	  "Danial",
	  "Daniela",
	  "Daniella",
	  "Danielle",
	  "Danika",
	  "Dannie",
	  "Danny",
	  "Dante",
	  "Danyka",
	  "Daphne",
	  "Daphnee",
	  "Daphney",
	  "Darby",
	  "Daren",
	  "Darian",
	  "Dariana",
	  "Darien",
	  "Dario",
	  "Darion",
	  "Darius",
	  "Darlene",
	  "Daron",
	  "Darrel",
	  "Darrell",
	  "Darren",
	  "Darrick",
	  "Darrin",
	  "Darrion",
	  "Darron",
	  "Darryl",
	  "Darwin",
	  "Daryl",
	  "Dashawn",
	  "Dasia",
	  "Dave",
	  "David",
	  "Davin",
	  "Davion",
	  "Davon",
	  "Davonte",
	  "Dawn",
	  "Dawson",
	  "Dax",
	  "Dayana",
	  "Dayna",
	  "Dayne",
	  "Dayton",
	  "Dean",
	  "Deangelo",
	  "Deanna",
	  "Deborah",
	  "Declan",
	  "Dedric",
	  "Dedrick",
	  "Dee",
	  "Deion",
	  "Deja",
	  "Dejah",
	  "Dejon",
	  "Dejuan",
	  "Delaney",
	  "Delbert",
	  "Delfina",
	  "Delia",
	  "Delilah",
	  "Dell",
	  "Della",
	  "Delmer",
	  "Delores",
	  "Delpha",
	  "Delphia",
	  "Delphine",
	  "Delta",
	  "Demarco",
	  "Demarcus",
	  "Demario",
	  "Demetris",
	  "Demetrius",
	  "Demond",
	  "Dena",
	  "Denis",
	  "Dennis",
	  "Deon",
	  "Deondre",
	  "Deontae",
	  "Deonte",
	  "Dereck",
	  "Derek",
	  "Derick",
	  "Deron",
	  "Derrick",
	  "Deshaun",
	  "Deshawn",
	  "Desiree",
	  "Desmond",
	  "Dessie",
	  "Destany",
	  "Destin",
	  "Destinee",
	  "Destiney",
	  "Destini",
	  "Destiny",
	  "Devan",
	  "Devante",
	  "Deven",
	  "Devin",
	  "Devon",
	  "Devonte",
	  "Devyn",
	  "Dewayne",
	  "Dewitt",
	  "Dexter",
	  "Diamond",
	  "Diana",
	  "Dianna",
	  "Diego",
	  "Dillan",
	  "Dillon",
	  "Dimitri",
	  "Dina",
	  "Dino",
	  "Dion",
	  "Dixie",
	  "Dock",
	  "Dolly",
	  "Dolores",
	  "Domenic",
	  "Domenica",
	  "Domenick",
	  "Domenico",
	  "Domingo",
	  "Dominic",
	  "Dominique",
	  "Don",
	  "Donald",
	  "Donato",
	  "Donavon",
	  "Donna",
	  "Donnell",
	  "Donnie",
	  "Donny",
	  "Dora",
	  "Dorcas",
	  "Dorian",
	  "Doris",
	  "Dorothea",
	  "Dorothy",
	  "Dorris",
	  "Dortha",
	  "Dorthy",
	  "Doug",
	  "Douglas",
	  "Dovie",
	  "Doyle",
	  "Drake",
	  "Drew",
	  "Duane",
	  "Dudley",
	  "Dulce",
	  "Duncan",
	  "Durward",
	  "Dustin",
	  "Dusty",
	  "Dwight",
	  "Dylan",
	  "Earl",
	  "Earlene",
	  "Earline",
	  "Earnest",
	  "Earnestine",
	  "Easter",
	  "Easton",
	  "Ebba",
	  "Ebony",
	  "Ed",
	  "Eda",
	  "Edd",
	  "Eddie",
	  "Eden",
	  "Edgar",
	  "Edgardo",
	  "Edison",
	  "Edmond",
	  "Edmund",
	  "Edna",
	  "Eduardo",
	  "Edward",
	  "Edwardo",
	  "Edwin",
	  "Edwina",
	  "Edyth",
	  "Edythe",
	  "Effie",
	  "Efrain",
	  "Efren",
	  "Eileen",
	  "Einar",
	  "Eino",
	  "Eladio",
	  "Elaina",
	  "Elbert",
	  "Elda",
	  "Eldon",
	  "Eldora",
	  "Eldred",
	  "Eldridge",
	  "Eleanora",
	  "Eleanore",
	  "Eleazar",
	  "Electa",
	  "Elena",
	  "Elenor",
	  "Elenora",
	  "Eleonore",
	  "Elfrieda",
	  "Eli",
	  "Elian",
	  "Eliane",
	  "Elias",
	  "Eliezer",
	  "Elijah",
	  "Elinor",
	  "Elinore",
	  "Elisa",
	  "Elisabeth",
	  "Elise",
	  "Eliseo",
	  "Elisha",
	  "Elissa",
	  "Eliza",
	  "Elizabeth",
	  "Ella",
	  "Ellen",
	  "Ellie",
	  "Elliot",
	  "Elliott",
	  "Ellis",
	  "Ellsworth",
	  "Elmer",
	  "Elmira",
	  "Elmo",
	  "Elmore",
	  "Elna",
	  "Elnora",
	  "Elody",
	  "Eloisa",
	  "Eloise",
	  "Elouise",
	  "Eloy",
	  "Elroy",
	  "Elsa",
	  "Else",
	  "Elsie",
	  "Elta",
	  "Elton",
	  "Elva",
	  "Elvera",
	  "Elvie",
	  "Elvis",
	  "Elwin",
	  "Elwyn",
	  "Elyse",
	  "Elyssa",
	  "Elza",
	  "Emanuel",
	  "Emelia",
	  "Emelie",
	  "Emely",
	  "Emerald",
	  "Emerson",
	  "Emery",
	  "Emie",
	  "Emil",
	  "Emile",
	  "Emilia",
	  "Emiliano",
	  "Emilie",
	  "Emilio",
	  "Emily",
	  "Emma",
	  "Emmalee",
	  "Emmanuel",
	  "Emmanuelle",
	  "Emmet",
	  "Emmett",
	  "Emmie",
	  "Emmitt",
	  "Emmy",
	  "Emory",
	  "Ena",
	  "Enid",
	  "Enoch",
	  "Enola",
	  "Enos",
	  "Enrico",
	  "Enrique",
	  "Ephraim",
	  "Era",
	  "Eriberto",
	  "Eric",
	  "Erica",
	  "Erich",
	  "Erick",
	  "Ericka",
	  "Erik",
	  "Erika",
	  "Erin",
	  "Erling",
	  "Erna",
	  "Ernest",
	  "Ernestina",
	  "Ernestine",
	  "Ernesto",
	  "Ernie",
	  "Ervin",
	  "Erwin",
	  "Eryn",
	  "Esmeralda",
	  "Esperanza",
	  "Esta",
	  "Esteban",
	  "Estefania",
	  "Estel",
	  "Estell",
	  "Estella",
	  "Estelle",
	  "Estevan",
	  "Esther",
	  "Estrella",
	  "Etha",
	  "Ethan",
	  "Ethel",
	  "Ethelyn",
	  "Ethyl",
	  "Ettie",
	  "Eudora",
	  "Eugene",
	  "Eugenia",
	  "Eula",
	  "Eulah",
	  "Eulalia",
	  "Euna",
	  "Eunice",
	  "Eusebio",
	  "Eva",
	  "Evalyn",
	  "Evan",
	  "Evangeline",
	  "Evans",
	  "Eve",
	  "Eveline",
	  "Evelyn",
	  "Everardo",
	  "Everett",
	  "Everette",
	  "Evert",
	  "Evie",
	  "Ewald",
	  "Ewell",
	  "Ezekiel",
	  "Ezequiel",
	  "Ezra",
	  "Fabian",
	  "Fabiola",
	  "Fae",
	  "Fannie",
	  "Fanny",
	  "Fatima",
	  "Faustino",
	  "Fausto",
	  "Favian",
	  "Fay",
	  "Faye",
	  "Federico",
	  "Felicia",
	  "Felicita",
	  "Felicity",
	  "Felipa",
	  "Felipe",
	  "Felix",
	  "Felton",
	  "Fermin",
	  "Fern",
	  "Fernando",
	  "Ferne",
	  "Fidel",
	  "Filiberto",
	  "Filomena",
	  "Finn",
	  "Fiona",
	  "Flavie",
	  "Flavio",
	  "Fleta",
	  "Fletcher",
	  "Flo",
	  "Florence",
	  "Florencio",
	  "Florian",
	  "Florida",
	  "Florine",
	  "Flossie",
	  "Floy",
	  "Floyd",
	  "Ford",
	  "Forest",
	  "Forrest",
	  "Foster",
	  "Frances",
	  "Francesca",
	  "Francesco",
	  "Francis",
	  "Francisca",
	  "Francisco",
	  "Franco",
	  "Frank",
	  "Frankie",
	  "Franz",
	  "Fred",
	  "Freda",
	  "Freddie",
	  "Freddy",
	  "Frederic",
	  "Frederick",
	  "Frederik",
	  "Frederique",
	  "Fredrick",
	  "Fredy",
	  "Freeda",
	  "Freeman",
	  "Freida",
	  "Frida",
	  "Frieda",
	  "Friedrich",
	  "Fritz",
	  "Furman",
	  "Gabe",
	  "Gabriel",
	  "Gabriella",
	  "Gabrielle",
	  "Gaetano",
	  "Gage",
	  "Gail",
	  "Gardner",
	  "Garett",
	  "Garfield",
	  "Garland",
	  "Garnet",
	  "Garnett",
	  "Garret",
	  "Garrett",
	  "Garrick",
	  "Garrison",
	  "Garry",
	  "Garth",
	  "Gaston",
	  "Gavin",
	  "Gay",
	  "Gayle",
	  "Gaylord",
	  "Gene",
	  "General",
	  "Genesis",
	  "Genevieve",
	  "Gennaro",
	  "Genoveva",
	  "Geo",
	  "Geoffrey",
	  "George",
	  "Georgette",
	  "Georgiana",
	  "Georgianna",
	  "Geovanni",
	  "Geovanny",
	  "Geovany",
	  "Gerald",
	  "Geraldine",
	  "Gerard",
	  "Gerardo",
	  "Gerda",
	  "Gerhard",
	  "Germaine",
	  "German",
	  "Gerry",
	  "Gerson",
	  "Gertrude",
	  "Gia",
	  "Gianni",
	  "Gideon",
	  "Gilbert",
	  "Gilberto",
	  "Gilda",
	  "Giles",
	  "Gillian",
	  "Gina",
	  "Gino",
	  "Giovani",
	  "Giovanna",
	  "Giovanni",
	  "Giovanny",
	  "Gisselle",
	  "Giuseppe",
	  "Gladyce",
	  "Gladys",
	  "Glen",
	  "Glenda",
	  "Glenna",
	  "Glennie",
	  "Gloria",
	  "Godfrey",
	  "Golda",
	  "Golden",
	  "Gonzalo",
	  "Gordon",
	  "Grace",
	  "Gracie",
	  "Graciela",
	  "Grady",
	  "Graham",
	  "Grant",
	  "Granville",
	  "Grayce",
	  "Grayson",
	  "Green",
	  "Greg",
	  "Gregg",
	  "Gregoria",
	  "Gregorio",
	  "Gregory",
	  "Greta",
	  "Gretchen",
	  "Greyson",
	  "Griffin",
	  "Grover",
	  "Guadalupe",
	  "Gudrun",
	  "Guido",
	  "Guillermo",
	  "Guiseppe",
	  "Gunnar",
	  "Gunner",
	  "Gus",
	  "Gussie",
	  "Gust",
	  "Gustave",
	  "Guy",
	  "Gwen",
	  "Gwendolyn",
	  "Hadley",
	  "Hailee",
	  "Hailey",
	  "Hailie",
	  "Hal",
	  "Haleigh",
	  "Haley",
	  "Halie",
	  "Halle",
	  "Hallie",
	  "Hank",
	  "Hanna",
	  "Hannah",
	  "Hans",
	  "Hardy",
	  "Harley",
	  "Harmon",
	  "Harmony",
	  "Harold",
	  "Harrison",
	  "Harry",
	  "Harvey",
	  "Haskell",
	  "Hassan",
	  "Hassie",
	  "Hattie",
	  "Haven",
	  "Hayden",
	  "Haylee",
	  "Hayley",
	  "Haylie",
	  "Hazel",
	  "Hazle",
	  "Heath",
	  "Heather",
	  "Heaven",
	  "Heber",
	  "Hector",
	  "Heidi",
	  "Helen",
	  "Helena",
	  "Helene",
	  "Helga",
	  "Hellen",
	  "Helmer",
	  "Heloise",
	  "Henderson",
	  "Henri",
	  "Henriette",
	  "Henry",
	  "Herbert",
	  "Herman",
	  "Hermann",
	  "Hermina",
	  "Herminia",
	  "Herminio",
	  "Hershel",
	  "Herta",
	  "Hertha",
	  "Hester",
	  "Hettie",
	  "Hilario",
	  "Hilbert",
	  "Hilda",
	  "Hildegard",
	  "Hillard",
	  "Hillary",
	  "Hilma",
	  "Hilton",
	  "Hipolito",
	  "Hiram",
	  "Hobart",
	  "Holden",
	  "Hollie",
	  "Hollis",
	  "Holly",
	  "Hope",
	  "Horace",
	  "Horacio",
	  "Hortense",
	  "Hosea",
	  "Houston",
	  "Howard",
	  "Howell",
	  "Hoyt",
	  "Hubert",
	  "Hudson",
	  "Hugh",
	  "Hulda",
	  "Humberto",
	  "Hunter",
	  "Hyman",
	  "Ian",
	  "Ibrahim",
	  "Icie",
	  "Ida",
	  "Idell",
	  "Idella",
	  "Ignacio",
	  "Ignatius",
	  "Ike",
	  "Ila",
	  "Ilene",
	  "Iliana",
	  "Ima",
	  "Imani",
	  "Imelda",
	  "Immanuel",
	  "Imogene",
	  "Ines",
	  "Irma",
	  "Irving",
	  "Irwin",
	  "Isaac",
	  "Isabel",
	  "Isabell",
	  "Isabella",
	  "Isabelle",
	  "Isac",
	  "Isadore",
	  "Isai",
	  "Isaiah",
	  "Isaias",
	  "Isidro",
	  "Ismael",
	  "Isobel",
	  "Isom",
	  "Israel",
	  "Issac",
	  "Itzel",
	  "Iva",
	  "Ivah",
	  "Ivory",
	  "Ivy",
	  "Izabella",
	  "Izaiah",
	  "Jabari",
	  "Jace",
	  "Jacey",
	  "Jacinthe",
	  "Jacinto",
	  "Jack",
	  "Jackeline",
	  "Jackie",
	  "Jacklyn",
	  "Jackson",
	  "Jacky",
	  "Jaclyn",
	  "Jacquelyn",
	  "Jacques",
	  "Jacynthe",
	  "Jada",
	  "Jade",
	  "Jaden",
	  "Jadon",
	  "Jadyn",
	  "Jaeden",
	  "Jaida",
	  "Jaiden",
	  "Jailyn",
	  "Jaime",
	  "Jairo",
	  "Jakayla",
	  "Jake",
	  "Jakob",
	  "Jaleel",
	  "Jalen",
	  "Jalon",
	  "Jalyn",
	  "Jamaal",
	  "Jamal",
	  "Jamar",
	  "Jamarcus",
	  "Jamel",
	  "Jameson",
	  "Jamey",
	  "Jamie",
	  "Jamil",
	  "Jamir",
	  "Jamison",
	  "Jammie",
	  "Jan",
	  "Jana",
	  "Janae",
	  "Jane",
	  "Janelle",
	  "Janessa",
	  "Janet",
	  "Janice",
	  "Janick",
	  "Janie",
	  "Janis",
	  "Janiya",
	  "Jannie",
	  "Jany",
	  "Jaquan",
	  "Jaquelin",
	  "Jaqueline",
	  "Jared",
	  "Jaren",
	  "Jarod",
	  "Jaron",
	  "Jarred",
	  "Jarrell",
	  "Jarret",
	  "Jarrett",
	  "Jarrod",
	  "Jarvis",
	  "Jasen",
	  "Jasmin",
	  "Jason",
	  "Jasper",
	  "Jaunita",
	  "Javier",
	  "Javon",
	  "Javonte",
	  "Jay",
	  "Jayce",
	  "Jaycee",
	  "Jayda",
	  "Jayde",
	  "Jayden",
	  "Jaydon",
	  "Jaylan",
	  "Jaylen",
	  "Jaylin",
	  "Jaylon",
	  "Jayme",
	  "Jayne",
	  "Jayson",
	  "Jazlyn",
	  "Jazmin",
	  "Jazmyn",
	  "Jazmyne",
	  "Jean",
	  "Jeanette",
	  "Jeanie",
	  "Jeanne",
	  "Jed",
	  "Jedediah",
	  "Jedidiah",
	  "Jeff",
	  "Jefferey",
	  "Jeffery",
	  "Jeffrey",
	  "Jeffry",
	  "Jena",
	  "Jenifer",
	  "Jennie",
	  "Jennifer",
	  "Jennings",
	  "Jennyfer",
	  "Jensen",
	  "Jerad",
	  "Jerald",
	  "Jeramie",
	  "Jeramy",
	  "Jerel",
	  "Jeremie",
	  "Jeremy",
	  "Jermain",
	  "Jermaine",
	  "Jermey",
	  "Jerod",
	  "Jerome",
	  "Jeromy",
	  "Jerrell",
	  "Jerrod",
	  "Jerrold",
	  "Jerry",
	  "Jess",
	  "Jesse",
	  "Jessica",
	  "Jessie",
	  "Jessika",
	  "Jessy",
	  "Jessyca",
	  "Jesus",
	  "Jett",
	  "Jettie",
	  "Jevon",
	  "Jewel",
	  "Jewell",
	  "Jillian",
	  "Jimmie",
	  "Jimmy",
	  "Jo",
	  "Joan",
	  "Joana",
	  "Joanie",
	  "Joanne",
	  "Joannie",
	  "Joanny",
	  "Joany",
	  "Joaquin",
	  "Jocelyn",
	  "Jodie",
	  "Jody",
	  "Joe",
	  "Joel",
	  "Joelle",
	  "Joesph",
	  "Joey",
	  "Johan",
	  "Johann",
	  "Johanna",
	  "Johathan",
	  "John",
	  "Johnathan",
	  "Johnathon",
	  "Johnnie",
	  "Johnny",
	  "Johnpaul",
	  "Johnson",
	  "Jolie",
	  "Jon",
	  "Jonas",
	  "Jonatan",
	  "Jonathan",
	  "Jonathon",
	  "Jordan",
	  "Jordane",
	  "Jordi",
	  "Jordon",
	  "Jordy",
	  "Jordyn",
	  "Jorge",
	  "Jose",
	  "Josefa",
	  "Josefina",
	  "Joseph",
	  "Josephine",
	  "Josh",
	  "Joshua",
	  "Joshuah",
	  "Josiah",
	  "Josiane",
	  "Josianne",
	  "Josie",
	  "Josue",
	  "Jovan",
	  "Jovani",
	  "Jovanny",
	  "Jovany",
	  "Joy",
	  "Joyce",
	  "Juana",
	  "Juanita",
	  "Judah",
	  "Judd",
	  "Jude",
	  "Judge",
	  "Judson",
	  "Judy",
	  "Jules",
	  "Julia",
	  "Julian",
	  "Juliana",
	  "Julianne",
	  "Julie",
	  "Julien",
	  "Juliet",
	  "Julio",
	  "Julius",
	  "June",
	  "Junior",
	  "Junius",
	  "Justen",
	  "Justice",
	  "Justina",
	  "Justine",
	  "Juston",
	  "Justus",
	  "Justyn",
	  "Juvenal",
	  "Juwan",
	  "Kacey",
	  "Kaci",
	  "Kacie",
	  "Kade",
	  "Kaden",
	  "Kadin",
	  "Kaela",
	  "Kaelyn",
	  "Kaia",
	  "Kailee",
	  "Kailey",
	  "Kailyn",
	  "Kaitlin",
	  "Kaitlyn",
	  "Kale",
	  "Kaleb",
	  "Kaleigh",
	  "Kaley",
	  "Kali",
	  "Kallie",
	  "Kameron",
	  "Kamille",
	  "Kamren",
	  "Kamron",
	  "Kamryn",
	  "Kane",
	  "Kara",
	  "Kareem",
	  "Karelle",
	  "Karen",
	  "Kari",
	  "Kariane",
	  "Karianne",
	  "Karina",
	  "Karine",
	  "Karl",
	  "Karlee",
	  "Karley",
	  "Karli",
	  "Karlie",
	  "Karolann",
	  "Karson",
	  "Kasandra",
	  "Kasey",
	  "Kassandra",
	  "Katarina",
	  "Katelin",
	  "Katelyn",
	  "Katelynn",
	  "Katharina",
	  "Katherine",
	  "Katheryn",
	  "Kathleen",
	  "Kathlyn",
	  "Kathryn",
	  "Kathryne",
	  "Katlyn",
	  "Katlynn",
	  "Katrina",
	  "Katrine",
	  "Kattie",
	  "Kavon",
	  "Kay",
	  "Kaya",
	  "Kaycee",
	  "Kayden",
	  "Kayla",
	  "Kaylah",
	  "Kaylee",
	  "Kayleigh",
	  "Kayley",
	  "Kayli",
	  "Kaylie",
	  "Kaylin",
	  "Keagan",
	  "Keanu",
	  "Keara",
	  "Keaton",
	  "Keegan",
	  "Keeley",
	  "Keely",
	  "Keenan",
	  "Keira",
	  "Keith",
	  "Kellen",
	  "Kelley",
	  "Kelli",
	  "Kellie",
	  "Kelly",
	  "Kelsi",
	  "Kelsie",
	  "Kelton",
	  "Kelvin",
	  "Ken",
	  "Kendall",
	  "Kendra",
	  "Kendrick",
	  "Kenna",
	  "Kennedi",
	  "Kennedy",
	  "Kenneth",
	  "Kennith",
	  "Kenny",
	  "Kenton",
	  "Kenya",
	  "Kenyatta",
	  "Kenyon",
	  "Keon",
	  "Keshaun",
	  "Keshawn",
	  "Keven",
	  "Kevin",
	  "Kevon",
	  "Keyon",
	  "Keyshawn",
	  "Khalid",
	  "Khalil",
	  "Kian",
	  "Kiana",
	  "Kianna",
	  "Kiara",
	  "Kiarra",
	  "Kiel",
	  "Kiera",
	  "Kieran",
	  "Kiley",
	  "Kim",
	  "Kimberly",
	  "King",
	  "Kip",
	  "Kira",
	  "Kirk",
	  "Kirsten",
	  "Kirstin",
	  "Kitty",
	  "Kobe",
	  "Koby",
	  "Kody",
	  "Kolby",
	  "Kole",
	  "Korbin",
	  "Korey",
	  "Kory",
	  "Kraig",
	  "Kris",
	  "Krista",
	  "Kristian",
	  "Kristin",
	  "Kristina",
	  "Kristofer",
	  "Kristoffer",
	  "Kristopher",
	  "Kristy",
	  "Krystal",
	  "Krystel",
	  "Krystina",
	  "Kurt",
	  "Kurtis",
	  "Kyla",
	  "Kyle",
	  "Kylee",
	  "Kyleigh",
	  "Kyler",
	  "Kylie",
	  "Kyra",
	  "Lacey",
	  "Lacy",
	  "Ladarius",
	  "Lafayette",
	  "Laila",
	  "Laisha",
	  "Lamar",
	  "Lambert",
	  "Lamont",
	  "Lance",
	  "Landen",
	  "Lane",
	  "Laney",
	  "Larissa",
	  "Laron",
	  "Larry",
	  "Larue",
	  "Laura",
	  "Laurel",
	  "Lauren",
	  "Laurence",
	  "Lauretta",
	  "Lauriane",
	  "Laurianne",
	  "Laurie",
	  "Laurine",
	  "Laury",
	  "Lauryn",
	  "Lavada",
	  "Lavern",
	  "Laverna",
	  "Laverne",
	  "Lavina",
	  "Lavinia",
	  "Lavon",
	  "Lavonne",
	  "Lawrence",
	  "Lawson",
	  "Layla",
	  "Layne",
	  "Lazaro",
	  "Lea",
	  "Leann",
	  "Leanna",
	  "Leanne",
	  "Leatha",
	  "Leda",
	  "Lee",
	  "Leif",
	  "Leila",
	  "Leilani",
	  "Lela",
	  "Lelah",
	  "Leland",
	  "Lelia",
	  "Lempi",
	  "Lemuel",
	  "Lenna",
	  "Lennie",
	  "Lenny",
	  "Lenora",
	  "Lenore",
	  "Leo",
	  "Leola",
	  "Leon",
	  "Leonard",
	  "Leonardo",
	  "Leone",
	  "Leonel",
	  "Leonie",
	  "Leonor",
	  "Leonora",
	  "Leopold",
	  "Leopoldo",
	  "Leora",
	  "Lera",
	  "Lesley",
	  "Leslie",
	  "Lesly",
	  "Lessie",
	  "Lester",
	  "Leta",
	  "Letha",
	  "Letitia",
	  "Levi",
	  "Lew",
	  "Lewis",
	  "Lexi",
	  "Lexie",
	  "Lexus",
	  "Lia",
	  "Liam",
	  "Liana",
	  "Libbie",
	  "Libby",
	  "Lila",
	  "Lilian",
	  "Liliana",
	  "Liliane",
	  "Lilla",
	  "Lillian",
	  "Lilliana",
	  "Lillie",
	  "Lilly",
	  "Lily",
	  "Lilyan",
	  "Lina",
	  "Lincoln",
	  "Linda",
	  "Lindsay",
	  "Lindsey",
	  "Linnea",
	  "Linnie",
	  "Linwood",
	  "Lionel",
	  "Lisa",
	  "Lisandro",
	  "Lisette",
	  "Litzy",
	  "Liza",
	  "Lizeth",
	  "Lizzie",
	  "Llewellyn",
	  "Lloyd",
	  "Logan",
	  "Lois",
	  "Lola",
	  "Lolita",
	  "Loma",
	  "Lon",
	  "London",
	  "Lonie",
	  "Lonnie",
	  "Lonny",
	  "Lonzo",
	  "Lora",
	  "Loraine",
	  "Loren",
	  "Lorena",
	  "Lorenz",
	  "Lorenza",
	  "Lorenzo",
	  "Lori",
	  "Lorine",
	  "Lorna",
	  "Lottie",
	  "Lou",
	  "Louie",
	  "Louisa",
	  "Lourdes",
	  "Louvenia",
	  "Lowell",
	  "Loy",
	  "Loyal",
	  "Loyce",
	  "Lucas",
	  "Luciano",
	  "Lucie",
	  "Lucienne",
	  "Lucile",
	  "Lucinda",
	  "Lucio",
	  "Lucious",
	  "Lucius",
	  "Lucy",
	  "Ludie",
	  "Ludwig",
	  "Lue",
	  "Luella",
	  "Luigi",
	  "Luis",
	  "Luisa",
	  "Lukas",
	  "Lula",
	  "Lulu",
	  "Luna",
	  "Lupe",
	  "Lura",
	  "Lurline",
	  "Luther",
	  "Luz",
	  "Lyda",
	  "Lydia",
	  "Lyla",
	  "Lynn",
	  "Lyric",
	  "Lysanne",
	  "Mabel",
	  "Mabelle",
	  "Mable",
	  "Mac",
	  "Macey",
	  "Maci",
	  "Macie",
	  "Mack",
	  "Mackenzie",
	  "Macy",
	  "Madaline",
	  "Madalyn",
	  "Maddison",
	  "Madeline",
	  "Madelyn",
	  "Madelynn",
	  "Madge",
	  "Madie",
	  "Madilyn",
	  "Madisen",
	  "Madison",
	  "Madisyn",
	  "Madonna",
	  "Madyson",
	  "Mae",
	  "Maegan",
	  "Maeve",
	  "Mafalda",
	  "Magali",
	  "Magdalen",
	  "Magdalena",
	  "Maggie",
	  "Magnolia",
	  "Magnus",
	  "Maia",
	  "Maida",
	  "Maiya",
	  "Major",
	  "Makayla",
	  "Makenna",
	  "Makenzie",
	  "Malachi",
	  "Malcolm",
	  "Malika",
	  "Malinda",
	  "Mallie",
	  "Mallory",
	  "Malvina",
	  "Mandy",
	  "Manley",
	  "Manuel",
	  "Manuela",
	  "Mara",
	  "Marc",
	  "Marcel",
	  "Marcelina",
	  "Marcelino",
	  "Marcella",
	  "Marcelle",
	  "Marcellus",
	  "Marcelo",
	  "Marcia",
	  "Marco",
	  "Marcos",
	  "Marcus",
	  "Margaret",
	  "Margarete",
	  "Margarett",
	  "Margaretta",
	  "Margarette",
	  "Margarita",
	  "Marge",
	  "Margie",
	  "Margot",
	  "Margret",
	  "Marguerite",
	  "Maria",
	  "Mariah",
	  "Mariam",
	  "Marian",
	  "Mariana",
	  "Mariane",
	  "Marianna",
	  "Marianne",
	  "Mariano",
	  "Maribel",
	  "Marie",
	  "Mariela",
	  "Marielle",
	  "Marietta",
	  "Marilie",
	  "Marilou",
	  "Marilyne",
	  "Marina",
	  "Mario",
	  "Marion",
	  "Marisa",
	  "Marisol",
	  "Maritza",
	  "Marjolaine",
	  "Marjorie",
	  "Marjory",
	  "Mark",
	  "Markus",
	  "Marlee",
	  "Marlen",
	  "Marlene",
	  "Marley",
	  "Marlin",
	  "Marlon",
	  "Marques",
	  "Marquis",
	  "Marquise",
	  "Marshall",
	  "Marta",
	  "Martin",
	  "Martina",
	  "Martine",
	  "Marty",
	  "Marvin",
	  "Mary",
	  "Maryam",
	  "Maryjane",
	  "Maryse",
	  "Mason",
	  "Mateo",
	  "Mathew",
	  "Mathias",
	  "Mathilde",
	  "Matilda",
	  "Matilde",
	  "Matt",
	  "Matteo",
	  "Mattie",
	  "Maud",
	  "Maude",
	  "Maudie",
	  "Maureen",
	  "Maurice",
	  "Mauricio",
	  "Maurine",
	  "Maverick",
	  "Mavis",
	  "Max",
	  "Maxie",
	  "Maxime",
	  "Maximilian",
	  "Maximillia",
	  "Maximillian",
	  "Maximo",
	  "Maximus",
	  "Maxine",
	  "Maxwell",
	  "May",
	  "Maya",
	  "Maybell",
	  "Maybelle",
	  "Maye",
	  "Maymie",
	  "Maynard",
	  "Mayra",
	  "Mazie",
	  "Mckayla",
	  "Mckenna",
	  "Mckenzie",
	  "Meagan",
	  "Meaghan",
	  "Meda",
	  "Megane",
	  "Meggie",
	  "Meghan",
	  "Mekhi",
	  "Melany",
	  "Melba",
	  "Melisa",
	  "Melissa",
	  "Mellie",
	  "Melody",
	  "Melvin",
	  "Melvina",
	  "Melyna",
	  "Melyssa",
	  "Mercedes",
	  "Meredith",
	  "Merl",
	  "Merle",
	  "Merlin",
	  "Merritt",
	  "Mertie",
	  "Mervin",
	  "Meta",
	  "Mia",
	  "Micaela",
	  "Micah",
	  "Michael",
	  "Michaela",
	  "Michale",
	  "Micheal",
	  "Michel",
	  "Michele",
	  "Michelle",
	  "Miguel",
	  "Mikayla",
	  "Mike",
	  "Mikel",
	  "Milan",
	  "Miles",
	  "Milford",
	  "Miller",
	  "Millie",
	  "Milo",
	  "Milton",
	  "Mina",
	  "Minerva",
	  "Minnie",
	  "Miracle",
	  "Mireille",
	  "Mireya",
	  "Misael",
	  "Missouri",
	  "Misty",
	  "Mitchel",
	  "Mitchell",
	  "Mittie",
	  "Modesta",
	  "Modesto",
	  "Mohamed",
	  "Mohammad",
	  "Mohammed",
	  "Moises",
	  "Mollie",
	  "Molly",
	  "Mona",
	  "Monica",
	  "Monique",
	  "Monroe",
	  "Monserrat",
	  "Monserrate",
	  "Montana",
	  "Monte",
	  "Monty",
	  "Morgan",
	  "Moriah",
	  "Morris",
	  "Mortimer",
	  "Morton",
	  "Mose",
	  "Moses",
	  "Moshe",
	  "Mossie",
	  "Mozell",
	  "Mozelle",
	  "Muhammad",
	  "Muriel",
	  "Murl",
	  "Murphy",
	  "Murray",
	  "Mustafa",
	  "Mya",
	  "Myah",
	  "Mylene",
	  "Myles",
	  "Myra",
	  "Myriam",
	  "Myrl",
	  "Myrna",
	  "Myron",
	  "Myrtice",
	  "Myrtie",
	  "Myrtis",
	  "Myrtle",
	  "Nadia",
	  "Nakia",
	  "Name",
	  "Nannie",
	  "Naomi",
	  "Naomie",
	  "Napoleon",
	  "Narciso",
	  "Nash",
	  "Nasir",
	  "Nat",
	  "Natalia",
	  "Natalie",
	  "Natasha",
	  "Nathan",
	  "Nathanael",
	  "Nathanial",
	  "Nathaniel",
	  "Nathen",
	  "Nayeli",
	  "Neal",
	  "Ned",
	  "Nedra",
	  "Neha",
	  "Neil",
	  "Nelda",
	  "Nella",
	  "Nelle",
	  "Nellie",
	  "Nels",
	  "Nelson",
	  "Neoma",
	  "Nestor",
	  "Nettie",
	  "Neva",
	  "Newell",
	  "Newton",
	  "Nia",
	  "Nicholas",
	  "Nicholaus",
	  "Nichole",
	  "Nick",
	  "Nicklaus",
	  "Nickolas",
	  "Nico",
	  "Nicola",
	  "Nicolas",
	  "Nicole",
	  "Nicolette",
	  "Nigel",
	  "Nikita",
	  "Nikki",
	  "Nikko",
	  "Niko",
	  "Nikolas",
	  "Nils",
	  "Nina",
	  "Noah",
	  "Noble",
	  "Noe",
	  "Noel",
	  "Noelia",
	  "Noemi",
	  "Noemie",
	  "Noemy",
	  "Nola",
	  "Nolan",
	  "Nona",
	  "Nora",
	  "Norbert",
	  "Norberto",
	  "Norene",
	  "Norma",
	  "Norris",
	  "Norval",
	  "Norwood",
	  "Nova",
	  "Novella",
	  "Nya",
	  "Nyah",
	  "Nyasia",
	  "Obie",
	  "Oceane",
	  "Ocie",
	  "Octavia",
	  "Oda",
	  "Odell",
	  "Odessa",
	  "Odie",
	  "Ofelia",
	  "Okey",
	  "Ola",
	  "Olaf",
	  "Ole",
	  "Olen",
	  "Oleta",
	  "Olga",
	  "Olin",
	  "Oliver",
	  "Ollie",
	  "Oma",
	  "Omari",
	  "Omer",
	  "Ona",
	  "Onie",
	  "Opal",
	  "Ophelia",
	  "Ora",
	  "Oral",
	  "Oran",
	  "Oren",
	  "Orie",
	  "Orin",
	  "Orion",
	  "Orland",
	  "Orlando",
	  "Orlo",
	  "Orpha",
	  "Orrin",
	  "Orval",
	  "Orville",
	  "Osbaldo",
	  "Osborne",
	  "Oscar",
	  "Osvaldo",
	  "Oswald",
	  "Oswaldo",
	  "Otha",
	  "Otho",
	  "Otilia",
	  "Otis",
	  "Ottilie",
	  "Ottis",
	  "Otto",
	  "Ova",
	  "Owen",
	  "Ozella",
	  "Pablo",
	  "Paige",
	  "Palma",
	  "Pamela",
	  "Pansy",
	  "Paolo",
	  "Paris",
	  "Parker",
	  "Pascale",
	  "Pasquale",
	  "Pat",
	  "Patience",
	  "Patricia",
	  "Patrick",
	  "Patsy",
	  "Pattie",
	  "Paul",
	  "Paula",
	  "Pauline",
	  "Paxton",
	  "Payton",
	  "Pearl",
	  "Pearlie",
	  "Pearline",
	  "Pedro",
	  "Peggie",
	  "Penelope",
	  "Percival",
	  "Percy",
	  "Perry",
	  "Pete",
	  "Peter",
	  "Petra",
	  "Peyton",
	  "Philip",
	  "Phoebe",
	  "Phyllis",
	  "Pierce",
	  "Pierre",
	  "Pietro",
	  "Pink",
	  "Pinkie",
	  "Piper",
	  "Polly",
	  "Porter",
	  "Precious",
	  "Presley",
	  "Preston",
	  "Price",
	  "Prince",
	  "Princess",
	  "Priscilla",
	  "Providenci",
	  "Prudence",
	  "Queen",
	  "Queenie",
	  "Quentin",
	  "Quincy",
	  "Quinn",
	  "Quinten",
	  "Quinton",
	  "Rachael",
	  "Rachel",
	  "Rachelle",
	  "Rae",
	  "Raegan",
	  "Rafael",
	  "Rafaela",
	  "Raheem",
	  "Rahsaan",
	  "Rahul",
	  "Raina",
	  "Raleigh",
	  "Ralph",
	  "Ramiro",
	  "Ramon",
	  "Ramona",
	  "Randal",
	  "Randall",
	  "Randi",
	  "Randy",
	  "Ransom",
	  "Raoul",
	  "Raphael",
	  "Raphaelle",
	  "Raquel",
	  "Rashad",
	  "Rashawn",
	  "Rasheed",
	  "Raul",
	  "Raven",
	  "Ray",
	  "Raymond",
	  "Raymundo",
	  "Reagan",
	  "Reanna",
	  "Reba",
	  "Rebeca",
	  "Rebecca",
	  "Rebeka",
	  "Rebekah",
	  "Reece",
	  "Reed",
	  "Reese",
	  "Regan",
	  "Reggie",
	  "Reginald",
	  "Reid",
	  "Reilly",
	  "Reina",
	  "Reinhold",
	  "Remington",
	  "Rene",
	  "Renee",
	  "Ressie",
	  "Reta",
	  "Retha",
	  "Retta",
	  "Reuben",
	  "Reva",
	  "Rex",
	  "Rey",
	  "Reyes",
	  "Reymundo",
	  "Reyna",
	  "Reynold",
	  "Rhea",
	  "Rhett",
	  "Rhianna",
	  "Rhiannon",
	  "Rhoda",
	  "Ricardo",
	  "Richard",
	  "Richie",
	  "Richmond",
	  "Rick",
	  "Rickey",
	  "Rickie",
	  "Ricky",
	  "Rico",
	  "Rigoberto",
	  "Riley",
	  "Rita",
	  "River",
	  "Robb",
	  "Robbie",
	  "Robert",
	  "Roberta",
	  "Roberto",
	  "Robin",
	  "Robyn",
	  "Rocio",
	  "Rocky",
	  "Rod",
	  "Roderick",
	  "Rodger",
	  "Rodolfo",
	  "Rodrick",
	  "Rodrigo",
	  "Roel",
	  "Rogelio",
	  "Roger",
	  "Rogers",
	  "Rolando",
	  "Rollin",
	  "Roma",
	  "Romaine",
	  "Roman",
	  "Ron",
	  "Ronaldo",
	  "Ronny",
	  "Roosevelt",
	  "Rory",
	  "Rosa",
	  "Rosalee",
	  "Rosalia",
	  "Rosalind",
	  "Rosalinda",
	  "Rosalyn",
	  "Rosamond",
	  "Rosanna",
	  "Rosario",
	  "Roscoe",
	  "Rose",
	  "Rosella",
	  "Roselyn",
	  "Rosemarie",
	  "Rosemary",
	  "Rosendo",
	  "Rosetta",
	  "Rosie",
	  "Rosina",
	  "Roslyn",
	  "Ross",
	  "Rossie",
	  "Rowan",
	  "Rowena",
	  "Rowland",
	  "Roxane",
	  "Roxanne",
	  "Roy",
	  "Royal",
	  "Royce",
	  "Rozella",
	  "Ruben",
	  "Rubie",
	  "Ruby",
	  "Rubye",
	  "Rudolph",
	  "Rudy",
	  "Rupert",
	  "Russ",
	  "Russel",
	  "Russell",
	  "Rusty",
	  "Ruth",
	  "Ruthe",
	  "Ruthie",
	  "Ryan",
	  "Ryann",
	  "Ryder",
	  "Rylan",
	  "Rylee",
	  "Ryleigh",
	  "Ryley",
	  "Sabina",
	  "Sabrina",
	  "Sabryna",
	  "Sadie",
	  "Sadye",
	  "Sage",
	  "Saige",
	  "Sallie",
	  "Sally",
	  "Salma",
	  "Salvador",
	  "Salvatore",
	  "Sam",
	  "Samanta",
	  "Samantha",
	  "Samara",
	  "Samir",
	  "Sammie",
	  "Sammy",
	  "Samson",
	  "Sandra",
	  "Sandrine",
	  "Sandy",
	  "Sanford",
	  "Santa",
	  "Santiago",
	  "Santina",
	  "Santino",
	  "Santos",
	  "Sarah",
	  "Sarai",
	  "Sarina",
	  "Sasha",
	  "Saul",
	  "Savanah",
	  "Savanna",
	  "Savannah",
	  "Savion",
	  "Scarlett",
	  "Schuyler",
	  "Scot",
	  "Scottie",
	  "Scotty",
	  "Seamus",
	  "Sean",
	  "Sebastian",
	  "Sedrick",
	  "Selena",
	  "Selina",
	  "Selmer",
	  "Serena",
	  "Serenity",
	  "Seth",
	  "Shad",
	  "Shaina",
	  "Shakira",
	  "Shana",
	  "Shane",
	  "Shanel",
	  "Shanelle",
	  "Shania",
	  "Shanie",
	  "Shaniya",
	  "Shanna",
	  "Shannon",
	  "Shanny",
	  "Shanon",
	  "Shany",
	  "Sharon",
	  "Shaun",
	  "Shawn",
	  "Shawna",
	  "Shaylee",
	  "Shayna",
	  "Shayne",
	  "Shea",
	  "Sheila",
	  "Sheldon",
	  "Shemar",
	  "Sheridan",
	  "Sherman",
	  "Sherwood",
	  "Shirley",
	  "Shyann",
	  "Shyanne",
	  "Sibyl",
	  "Sid",
	  "Sidney",
	  "Sienna",
	  "Sierra",
	  "Sigmund",
	  "Sigrid",
	  "Sigurd",
	  "Silas",
	  "Sim",
	  "Simeon",
	  "Simone",
	  "Sincere",
	  "Sister",
	  "Skye",
	  "Skyla",
	  "Skylar",
	  "Sofia",
	  "Soledad",
	  "Solon",
	  "Sonia",
	  "Sonny",
	  "Sonya",
	  "Sophia",
	  "Sophie",
	  "Spencer",
	  "Stacey",
	  "Stacy",
	  "Stan",
	  "Stanford",
	  "Stanley",
	  "Stanton",
	  "Stefan",
	  "Stefanie",
	  "Stella",
	  "Stephan",
	  "Stephania",
	  "Stephanie",
	  "Stephany",
	  "Stephen",
	  "Stephon",
	  "Sterling",
	  "Steve",
	  "Stevie",
	  "Stewart",
	  "Stone",
	  "Stuart",
	  "Summer",
	  "Sunny",
	  "Susan",
	  "Susana",
	  "Susanna",
	  "Susie",
	  "Suzanne",
	  "Sven",
	  "Syble",
	  "Sydnee",
	  "Sydney",
	  "Sydni",
	  "Sydnie",
	  "Sylvan",
	  "Sylvester",
	  "Sylvia",
	  "Tabitha",
	  "Tad",
	  "Talia",
	  "Talon",
	  "Tamara",
	  "Tamia",
	  "Tania",
	  "Tanner",
	  "Tanya",
	  "Tara",
	  "Taryn",
	  "Tate",
	  "Tatum",
	  "Tatyana",
	  "Taurean",
	  "Tavares",
	  "Taya",
	  "Taylor",
	  "Teagan",
	  "Ted",
	  "Telly",
	  "Terence",
	  "Teresa",
	  "Terrance",
	  "Terrell",
	  "Terrence",
	  "Terrill",
	  "Terry",
	  "Tess",
	  "Tessie",
	  "Tevin",
	  "Thad",
	  "Thaddeus",
	  "Thalia",
	  "Thea",
	  "Thelma",
	  "Theo",
	  "Theodora",
	  "Theodore",
	  "Theresa",
	  "Therese",
	  "Theresia",
	  "Theron",
	  "Thomas",
	  "Thora",
	  "Thurman",
	  "Tia",
	  "Tiana",
	  "Tianna",
	  "Tiara",
	  "Tierra",
	  "Tiffany",
	  "Tillman",
	  "Timmothy",
	  "Timmy",
	  "Timothy",
	  "Tina",
	  "Tito",
	  "Titus",
	  "Tobin",
	  "Toby",
	  "Tod",
	  "Tom",
	  "Tomas",
	  "Tomasa",
	  "Tommie",
	  "Toney",
	  "Toni",
	  "Tony",
	  "Torey",
	  "Torrance",
	  "Torrey",
	  "Toy",
	  "Trace",
	  "Tracey",
	  "Tracy",
	  "Travis",
	  "Travon",
	  "Tre",
	  "Tremaine",
	  "Tremayne",
	  "Trent",
	  "Trenton",
	  "Tressa",
	  "Tressie",
	  "Treva",
	  "Trever",
	  "Trevion",
	  "Trevor",
	  "Trey",
	  "Trinity",
	  "Trisha",
	  "Tristian",
	  "Tristin",
	  "Triston",
	  "Troy",
	  "Trudie",
	  "Trycia",
	  "Trystan",
	  "Turner",
	  "Twila",
	  "Tyler",
	  "Tyra",
	  "Tyree",
	  "Tyreek",
	  "Tyrel",
	  "Tyrell",
	  "Tyrese",
	  "Tyrique",
	  "Tyshawn",
	  "Tyson",
	  "Ubaldo",
	  "Ulices",
	  "Ulises",
	  "Una",
	  "Unique",
	  "Urban",
	  "Uriah",
	  "Uriel",
	  "Ursula",
	  "Vada",
	  "Valentin",
	  "Valentina",
	  "Valentine",
	  "Valerie",
	  "Vallie",
	  "Van",
	  "Vance",
	  "Vanessa",
	  "Vaughn",
	  "Veda",
	  "Velda",
	  "Vella",
	  "Velma",
	  "Velva",
	  "Vena",
	  "Verda",
	  "Verdie",
	  "Vergie",
	  "Verla",
	  "Verlie",
	  "Vern",
	  "Verna",
	  "Verner",
	  "Vernice",
	  "Vernie",
	  "Vernon",
	  "Verona",
	  "Veronica",
	  "Vesta",
	  "Vicenta",
	  "Vicente",
	  "Vickie",
	  "Vicky",
	  "Victor",
	  "Victoria",
	  "Vida",
	  "Vidal",
	  "Vilma",
	  "Vince",
	  "Vincent",
	  "Vincenza",
	  "Vincenzo",
	  "Vinnie",
	  "Viola",
	  "Violet",
	  "Violette",
	  "Virgie",
	  "Virgil",
	  "Virginia",
	  "Virginie",
	  "Vita",
	  "Vito",
	  "Viva",
	  "Vivian",
	  "Viviane",
	  "Vivianne",
	  "Vivien",
	  "Vivienne",
	  "Vladimir",
	  "Wade",
	  "Waino",
	  "Waldo",
	  "Walker",
	  "Wallace",
	  "Walter",
	  "Walton",
	  "Wanda",
	  "Ward",
	  "Warren",
	  "Watson",
	  "Wava",
	  "Waylon",
	  "Wayne",
	  "Webster",
	  "Weldon",
	  "Wellington",
	  "Wendell",
	  "Wendy",
	  "Werner",
	  "Westley",
	  "Weston",
	  "Whitney",
	  "Wilber",
	  "Wilbert",
	  "Wilburn",
	  "Wiley",
	  "Wilford",
	  "Wilfred",
	  "Wilfredo",
	  "Wilfrid",
	  "Wilhelm",
	  "Wilhelmine",
	  "Will",
	  "Willa",
	  "Willard",
	  "William",
	  "Willie",
	  "Willis",
	  "Willow",
	  "Willy",
	  "Wilma",
	  "Wilmer",
	  "Wilson",
	  "Wilton",
	  "Winfield",
	  "Winifred",
	  "Winnifred",
	  "Winona",
	  "Winston",
	  "Woodrow",
	  "Wyatt",
	  "Wyman",
	  "Xander",
	  "Xavier",
	  "Xzavier",
	  "Yadira",
	  "Yasmeen",
	  "Yasmin",
	  "Yasmine",
	  "Yazmin",
	  "Yesenia",
	  "Yessenia",
	  "Yolanda",
	  "Yoshiko",
	  "Yvette",
	  "Yvonne",
	  "Zachariah",
	  "Zachary",
	  "Zachery",
	  "Zack",
	  "Zackary",
	  "Zackery",
	  "Zakary",
	  "Zander",
	  "Zane",
	  "Zaria",
	  "Zechariah",
	  "Zelda",
	  "Zella",
	  "Zelma",
	  "Zena",
	  "Zetta",
	  "Zion",
	  "Zita",
	  "Zoe",
	  "Zoey",
	  "Zoie",
	  "Zoila",
	  "Zola",
	  "Zora",
	  "Zula"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Abbott",
	  "Abernathy",
	  "Abshire",
	  "Adams",
	  "Altenwerth",
	  "Anderson",
	  "Ankunding",
	  "Armstrong",
	  "Auer",
	  "Aufderhar",
	  "Bahringer",
	  "Bailey",
	  "Balistreri",
	  "Barrows",
	  "Bartell",
	  "Bartoletti",
	  "Barton",
	  "Bashirian",
	  "Batz",
	  "Bauch",
	  "Baumbach",
	  "Bayer",
	  "Beahan",
	  "Beatty",
	  "Bechtelar",
	  "Becker",
	  "Bednar",
	  "Beer",
	  "Beier",
	  "Berge",
	  "Bergnaum",
	  "Bergstrom",
	  "Bernhard",
	  "Bernier",
	  "Bins",
	  "Blanda",
	  "Blick",
	  "Block",
	  "Bode",
	  "Boehm",
	  "Bogan",
	  "Bogisich",
	  "Borer",
	  "Bosco",
	  "Botsford",
	  "Boyer",
	  "Boyle",
	  "Bradtke",
	  "Brakus",
	  "Braun",
	  "Breitenberg",
	  "Brekke",
	  "Brown",
	  "Bruen",
	  "Buckridge",
	  "Carroll",
	  "Carter",
	  "Cartwright",
	  "Casper",
	  "Cassin",
	  "Champlin",
	  "Christiansen",
	  "Cole",
	  "Collier",
	  "Collins",
	  "Conn",
	  "Connelly",
	  "Conroy",
	  "Considine",
	  "Corkery",
	  "Cormier",
	  "Corwin",
	  "Cremin",
	  "Crist",
	  "Crona",
	  "Cronin",
	  "Crooks",
	  "Cruickshank",
	  "Cummerata",
	  "Cummings",
	  "Dach",
	  "D'Amore",
	  "Daniel",
	  "Dare",
	  "Daugherty",
	  "Davis",
	  "Deckow",
	  "Denesik",
	  "Dibbert",
	  "Dickens",
	  "Dicki",
	  "Dickinson",
	  "Dietrich",
	  "Donnelly",
	  "Dooley",
	  "Douglas",
	  "Doyle",
	  "DuBuque",
	  "Durgan",
	  "Ebert",
	  "Effertz",
	  "Eichmann",
	  "Emard",
	  "Emmerich",
	  "Erdman",
	  "Ernser",
	  "Fadel",
	  "Fahey",
	  "Farrell",
	  "Fay",
	  "Feeney",
	  "Feest",
	  "Feil",
	  "Ferry",
	  "Fisher",
	  "Flatley",
	  "Frami",
	  "Franecki",
	  "Friesen",
	  "Fritsch",
	  "Funk",
	  "Gaylord",
	  "Gerhold",
	  "Gerlach",
	  "Gibson",
	  "Gislason",
	  "Gleason",
	  "Gleichner",
	  "Glover",
	  "Goldner",
	  "Goodwin",
	  "Gorczany",
	  "Gottlieb",
	  "Goyette",
	  "Grady",
	  "Graham",
	  "Grant",
	  "Green",
	  "Greenfelder",
	  "Greenholt",
	  "Grimes",
	  "Gulgowski",
	  "Gusikowski",
	  "Gutkowski",
	  "Gutmann",
	  "Haag",
	  "Hackett",
	  "Hagenes",
	  "Hahn",
	  "Haley",
	  "Halvorson",
	  "Hamill",
	  "Hammes",
	  "Hand",
	  "Hane",
	  "Hansen",
	  "Harber",
	  "Harris",
	  "Hartmann",
	  "Harvey",
	  "Hauck",
	  "Hayes",
	  "Heaney",
	  "Heathcote",
	  "Hegmann",
	  "Heidenreich",
	  "Heller",
	  "Herman",
	  "Hermann",
	  "Hermiston",
	  "Herzog",
	  "Hessel",
	  "Hettinger",
	  "Hickle",
	  "Hilll",
	  "Hills",
	  "Hilpert",
	  "Hintz",
	  "Hirthe",
	  "Hodkiewicz",
	  "Hoeger",
	  "Homenick",
	  "Hoppe",
	  "Howe",
	  "Howell",
	  "Hudson",
	  "Huel",
	  "Huels",
	  "Hyatt",
	  "Jacobi",
	  "Jacobs",
	  "Jacobson",
	  "Jakubowski",
	  "Jaskolski",
	  "Jast",
	  "Jenkins",
	  "Jerde",
	  "Johns",
	  "Johnson",
	  "Johnston",
	  "Jones",
	  "Kassulke",
	  "Kautzer",
	  "Keebler",
	  "Keeling",
	  "Kemmer",
	  "Kerluke",
	  "Kertzmann",
	  "Kessler",
	  "Kiehn",
	  "Kihn",
	  "Kilback",
	  "King",
	  "Kirlin",
	  "Klein",
	  "Kling",
	  "Klocko",
	  "Koch",
	  "Koelpin",
	  "Koepp",
	  "Kohler",
	  "Konopelski",
	  "Koss",
	  "Kovacek",
	  "Kozey",
	  "Krajcik",
	  "Kreiger",
	  "Kris",
	  "Kshlerin",
	  "Kub",
	  "Kuhic",
	  "Kuhlman",
	  "Kuhn",
	  "Kulas",
	  "Kunde",
	  "Kunze",
	  "Kuphal",
	  "Kutch",
	  "Kuvalis",
	  "Labadie",
	  "Lakin",
	  "Lang",
	  "Langosh",
	  "Langworth",
	  "Larkin",
	  "Larson",
	  "Leannon",
	  "Lebsack",
	  "Ledner",
	  "Leffler",
	  "Legros",
	  "Lehner",
	  "Lemke",
	  "Lesch",
	  "Leuschke",
	  "Lind",
	  "Lindgren",
	  "Littel",
	  "Little",
	  "Lockman",
	  "Lowe",
	  "Lubowitz",
	  "Lueilwitz",
	  "Luettgen",
	  "Lynch",
	  "Macejkovic",
	  "MacGyver",
	  "Maggio",
	  "Mann",
	  "Mante",
	  "Marks",
	  "Marquardt",
	  "Marvin",
	  "Mayer",
	  "Mayert",
	  "McClure",
	  "McCullough",
	  "McDermott",
	  "McGlynn",
	  "McKenzie",
	  "McLaughlin",
	  "Medhurst",
	  "Mertz",
	  "Metz",
	  "Miller",
	  "Mills",
	  "Mitchell",
	  "Moen",
	  "Mohr",
	  "Monahan",
	  "Moore",
	  "Morar",
	  "Morissette",
	  "Mosciski",
	  "Mraz",
	  "Mueller",
	  "Muller",
	  "Murazik",
	  "Murphy",
	  "Murray",
	  "Nader",
	  "Nicolas",
	  "Nienow",
	  "Nikolaus",
	  "Nitzsche",
	  "Nolan",
	  "Oberbrunner",
	  "O'Connell",
	  "O'Conner",
	  "O'Hara",
	  "O'Keefe",
	  "O'Kon",
	  "Okuneva",
	  "Olson",
	  "Ondricka",
	  "O'Reilly",
	  "Orn",
	  "Ortiz",
	  "Osinski",
	  "Pacocha",
	  "Padberg",
	  "Pagac",
	  "Parisian",
	  "Parker",
	  "Paucek",
	  "Pfannerstill",
	  "Pfeffer",
	  "Pollich",
	  "Pouros",
	  "Powlowski",
	  "Predovic",
	  "Price",
	  "Prohaska",
	  "Prosacco",
	  "Purdy",
	  "Quigley",
	  "Quitzon",
	  "Rath",
	  "Ratke",
	  "Rau",
	  "Raynor",
	  "Reichel",
	  "Reichert",
	  "Reilly",
	  "Reinger",
	  "Rempel",
	  "Renner",
	  "Reynolds",
	  "Rice",
	  "Rippin",
	  "Ritchie",
	  "Robel",
	  "Roberts",
	  "Rodriguez",
	  "Rogahn",
	  "Rohan",
	  "Rolfson",
	  "Romaguera",
	  "Roob",
	  "Rosenbaum",
	  "Rowe",
	  "Ruecker",
	  "Runolfsdottir",
	  "Runolfsson",
	  "Runte",
	  "Russel",
	  "Rutherford",
	  "Ryan",
	  "Sanford",
	  "Satterfield",
	  "Sauer",
	  "Sawayn",
	  "Schaden",
	  "Schaefer",
	  "Schamberger",
	  "Schiller",
	  "Schimmel",
	  "Schinner",
	  "Schmeler",
	  "Schmidt",
	  "Schmitt",
	  "Schneider",
	  "Schoen",
	  "Schowalter",
	  "Schroeder",
	  "Schulist",
	  "Schultz",
	  "Schumm",
	  "Schuppe",
	  "Schuster",
	  "Senger",
	  "Shanahan",
	  "Shields",
	  "Simonis",
	  "Sipes",
	  "Skiles",
	  "Smith",
	  "Smitham",
	  "Spencer",
	  "Spinka",
	  "Sporer",
	  "Stamm",
	  "Stanton",
	  "Stark",
	  "Stehr",
	  "Steuber",
	  "Stiedemann",
	  "Stokes",
	  "Stoltenberg",
	  "Stracke",
	  "Streich",
	  "Stroman",
	  "Strosin",
	  "Swaniawski",
	  "Swift",
	  "Terry",
	  "Thiel",
	  "Thompson",
	  "Tillman",
	  "Torp",
	  "Torphy",
	  "Towne",
	  "Toy",
	  "Trantow",
	  "Tremblay",
	  "Treutel",
	  "Tromp",
	  "Turcotte",
	  "Turner",
	  "Ullrich",
	  "Upton",
	  "Vandervort",
	  "Veum",
	  "Volkman",
	  "Von",
	  "VonRueden",
	  "Waelchi",
	  "Walker",
	  "Walsh",
	  "Walter",
	  "Ward",
	  "Waters",
	  "Watsica",
	  "Weber",
	  "Wehner",
	  "Weimann",
	  "Weissnat",
	  "Welch",
	  "West",
	  "White",
	  "Wiegand",
	  "Wilderman",
	  "Wilkinson",
	  "Will",
	  "Williamson",
	  "Willms",
	  "Windler",
	  "Wintheiser",
	  "Wisoky",
	  "Wisozk",
	  "Witting",
	  "Wiza",
	  "Wolf",
	  "Wolff",
	  "Wuckert",
	  "Wunsch",
	  "Wyman",
	  "Yost",
	  "Yundt",
	  "Zboncak",
	  "Zemlak",
	  "Ziemann",
	  "Zieme",
	  "Zulauf"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Mr.",
	  "Mrs.",
	  "Ms.",
	  "Miss",
	  "Dr."
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Jr.",
	  "Sr.",
	  "I",
	  "II",
	  "III",
	  "IV",
	  "V",
	  "MD",
	  "DDS",
	  "PhD",
	  "DVM"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = {
	  "descriptor": [
	    "Lead",
	    "Senior",
	    "Direct",
	    "Corporate",
	    "Dynamic",
	    "Future",
	    "Product",
	    "National",
	    "Regional",
	    "District",
	    "Central",
	    "Global",
	    "Customer",
	    "Investor",
	    "Dynamic",
	    "International",
	    "Legacy",
	    "Forward",
	    "Internal",
	    "Human",
	    "Chief",
	    "Principal"
	  ],
	  "level": [
	    "Solutions",
	    "Program",
	    "Brand",
	    "Security",
	    "Research",
	    "Marketing",
	    "Directives",
	    "Implementation",
	    "Integration",
	    "Functionality",
	    "Response",
	    "Paradigm",
	    "Tactics",
	    "Identity",
	    "Markets",
	    "Group",
	    "Division",
	    "Applications",
	    "Optimization",
	    "Operations",
	    "Infrastructure",
	    "Intranet",
	    "Communications",
	    "Web",
	    "Branding",
	    "Quality",
	    "Assurance",
	    "Mobility",
	    "Accounts",
	    "Data",
	    "Creative",
	    "Configuration",
	    "Accountability",
	    "Interactions",
	    "Factors",
	    "Usability",
	    "Metrics"
	  ],
	  "job": [
	    "Supervisor",
	    "Associate",
	    "Executive",
	    "Liason",
	    "Officer",
	    "Manager",
	    "Engineer",
	    "Specialist",
	    "Director",
	    "Coordinator",
	    "Administrator",
	    "Architect",
	    "Analyst",
	    "Designer",
	    "Planner",
	    "Orchestrator",
	    "Technician",
	    "Developer",
	    "Producer",
	    "Consultant",
	    "Assistant",
	    "Facilitator",
	    "Agent",
	    "Representative",
	    "Strategist"
	  ]
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{prefix} #{first_name} #{last_name}",
	  "#{first_name} #{last_name} #{suffix}",
	  "#{first_name} #{last_name}",
	  "#{first_name} #{last_name}",
	  "#{first_name} #{last_name}",
	  "#{first_name} #{last_name}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var phone_number = {};
	module['exports'] = phone_number;
	phone_number.formats = __webpack_require__(100);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "###-###-####",
	  "(###) ###-####",
	  "1-###-###-####",
	  "###.###.####",
	  "###-###-####",
	  "(###) ###-####",
	  "1-###-###-####",
	  "###.###.####",
	  "###-###-#### x###",
	  "(###) ###-#### x###",
	  "1-###-###-#### x###",
	  "###.###.#### x###",
	  "###-###-#### x####",
	  "(###) ###-#### x####",
	  "1-###-###-#### x####",
	  "###.###.#### x####",
	  "###-###-#### x#####",
	  "(###) ###-#### x#####",
	  "1-###-###-#### x#####",
	  "###.###.#### x#####"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var cell_phone = {};
	module['exports'] = cell_phone;
	cell_phone.formats = __webpack_require__(102);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "###-###-####",
	  "(###) ###-####",
	  "1-###-###-####",
	  "###.###.####"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var business = {};
	module['exports'] = business;
	business.credit_card_numbers = __webpack_require__(104);
	business.credit_card_expiry_dates = __webpack_require__(105);
	business.credit_card_types = __webpack_require__(106);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "1234-2121-1221-1211",
	  "1212-1221-1121-1234",
	  "1211-1221-1234-2201",
	  "1228-1221-1221-1431"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "2011-10-12",
	  "2012-11-12",
	  "2015-11-11",
	  "2013-9-12"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "visa",
	  "mastercard",
	  "americanexpress",
	  "discover"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var commerce = {};
	module['exports'] = commerce;
	commerce.color = __webpack_require__(108);
	commerce.department = __webpack_require__(109);
	commerce.product_name = __webpack_require__(110);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "red",
	  "green",
	  "blue",
	  "yellow",
	  "purple",
	  "mint green",
	  "teal",
	  "white",
	  "black",
	  "orange",
	  "pink",
	  "grey",
	  "maroon",
	  "violet",
	  "turquoise",
	  "tan",
	  "sky blue",
	  "salmon",
	  "plum",
	  "orchid",
	  "olive",
	  "magenta",
	  "lime",
	  "ivory",
	  "indigo",
	  "gold",
	  "fuchsia",
	  "cyan",
	  "azure",
	  "lavender",
	  "silver"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Books",
	  "Movies",
	  "Music",
	  "Games",
	  "Electronics",
	  "Computers",
	  "Home",
	  "Garden",
	  "Tools",
	  "Grocery",
	  "Health",
	  "Beauty",
	  "Toys",
	  "Kids",
	  "Baby",
	  "Clothing",
	  "Shoes",
	  "Jewelery",
	  "Sports",
	  "Outdoors",
	  "Automotive",
	  "Industrial"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = {
	  "adjective": [
	    "Small",
	    "Ergonomic",
	    "Rustic",
	    "Intelligent",
	    "Gorgeous",
	    "Incredible",
	    "Fantastic",
	    "Practical",
	    "Sleek",
	    "Awesome",
	    "Generic",
	    "Handcrafted",
	    "Handmade",
	    "Licensed",
	    "Refined",
	    "Unbranded",
	    "Tasty"
	  ],
	  "material": [
	    "Steel",
	    "Wooden",
	    "Concrete",
	    "Plastic",
	    "Cotton",
	    "Granite",
	    "Rubber",
	    "Metal",
	    "Soft",
	    "Fresh",
	    "Frozen"
	  ],
	  "product": [
	    "Chair",
	    "Car",
	    "Computer",
	    "Keyboard",
	    "Mouse",
	    "Bike",
	    "Ball",
	    "Gloves",
	    "Pants",
	    "Shirt",
	    "Table",
	    "Shoes",
	    "Hat",
	    "Towels",
	    "Soap",
	    "Tuna",
	    "Chicken",
	    "Fish",
	    "Cheese",
	    "Bacon",
	    "Pizza",
	    "Salad",
	    "Sausages",
	    "Chips"
	  ]
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var team = {};
	module['exports'] = team;
	team.creature = __webpack_require__(112);
	team.name = __webpack_require__(113);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "ants",
	  "bats",
	  "bears",
	  "bees",
	  "birds",
	  "buffalo",
	  "cats",
	  "chickens",
	  "cattle",
	  "dogs",
	  "dolphins",
	  "ducks",
	  "elephants",
	  "fishes",
	  "foxes",
	  "frogs",
	  "geese",
	  "goats",
	  "horses",
	  "kangaroos",
	  "lions",
	  "monkeys",
	  "owls",
	  "oxen",
	  "penguins",
	  "people",
	  "pigs",
	  "rabbits",
	  "sheep",
	  "tigers",
	  "whales",
	  "wolves",
	  "zebras",
	  "banshees",
	  "crows",
	  "black cats",
	  "chimeras",
	  "ghosts",
	  "conspirators",
	  "dragons",
	  "dwarves",
	  "elves",
	  "enchanters",
	  "exorcists",
	  "sons",
	  "foes",
	  "giants",
	  "gnomes",
	  "goblins",
	  "gooses",
	  "griffins",
	  "lycanthropes",
	  "nemesis",
	  "ogres",
	  "oracles",
	  "prophets",
	  "sorcerors",
	  "spiders",
	  "spirits",
	  "vampires",
	  "warlocks",
	  "vixens",
	  "werewolves",
	  "witches",
	  "worshipers",
	  "zombies",
	  "druids"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{Address.state} #{creature}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var hacker = {};
	module['exports'] = hacker;
	hacker.abbreviation = __webpack_require__(115);
	hacker.adjective = __webpack_require__(116);
	hacker.noun = __webpack_require__(117);
	hacker.verb = __webpack_require__(118);
	hacker.ingverb = __webpack_require__(119);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "TCP",
	  "HTTP",
	  "SDD",
	  "RAM",
	  "GB",
	  "CSS",
	  "SSL",
	  "AGP",
	  "SQL",
	  "FTP",
	  "PCI",
	  "AI",
	  "ADP",
	  "RSS",
	  "XML",
	  "EXE",
	  "COM",
	  "HDD",
	  "THX",
	  "SMTP",
	  "SMS",
	  "USB",
	  "PNG",
	  "SAS",
	  "IB",
	  "SCSI",
	  "JSON",
	  "XSS",
	  "JBOD"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "auxiliary",
	  "primary",
	  "back-end",
	  "digital",
	  "open-source",
	  "virtual",
	  "cross-platform",
	  "redundant",
	  "online",
	  "haptic",
	  "multi-byte",
	  "bluetooth",
	  "wireless",
	  "1080p",
	  "neural",
	  "optical",
	  "solid state",
	  "mobile"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "driver",
	  "protocol",
	  "bandwidth",
	  "panel",
	  "microchip",
	  "program",
	  "port",
	  "card",
	  "array",
	  "interface",
	  "system",
	  "sensor",
	  "firewall",
	  "hard drive",
	  "pixel",
	  "alarm",
	  "feed",
	  "monitor",
	  "application",
	  "transmitter",
	  "bus",
	  "circuit",
	  "capacitor",
	  "matrix"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "back up",
	  "bypass",
	  "hack",
	  "override",
	  "compress",
	  "copy",
	  "navigate",
	  "index",
	  "connect",
	  "generate",
	  "quantify",
	  "calculate",
	  "synthesize",
	  "input",
	  "transmit",
	  "program",
	  "reboot",
	  "parse"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "backing up",
	  "bypassing",
	  "hacking",
	  "overriding",
	  "compressing",
	  "copying",
	  "navigating",
	  "indexing",
	  "connecting",
	  "generating",
	  "quantifying",
	  "calculating",
	  "synthesizing",
	  "transmitting",
	  "programming",
	  "parsing"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var app = {};
	module['exports'] = app;
	app.name = __webpack_require__(121);
	app.version = __webpack_require__(122);
	app.author = __webpack_require__(123);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Redhold",
	  "Treeflex",
	  "Trippledex",
	  "Kanlam",
	  "Bigtax",
	  "Daltfresh",
	  "Toughjoyfax",
	  "Mat Lam Tam",
	  "Otcom",
	  "Tres-Zap",
	  "Y-Solowarm",
	  "Tresom",
	  "Voltsillam",
	  "Biodex",
	  "Greenlam",
	  "Viva",
	  "Matsoft",
	  "Temp",
	  "Zoolab",
	  "Subin",
	  "Rank",
	  "Job",
	  "Stringtough",
	  "Tin",
	  "It",
	  "Home Ing",
	  "Zamit",
	  "Sonsing",
	  "Konklab",
	  "Alpha",
	  "Latlux",
	  "Voyatouch",
	  "Alphazap",
	  "Holdlamis",
	  "Zaam-Dox",
	  "Sub-Ex",
	  "Quo Lux",
	  "Bamity",
	  "Ventosanzap",
	  "Lotstring",
	  "Hatity",
	  "Tempsoft",
	  "Overhold",
	  "Fixflex",
	  "Konklux",
	  "Zontrax",
	  "Tampflex",
	  "Span",
	  "Namfix",
	  "Transcof",
	  "Stim",
	  "Fix San",
	  "Sonair",
	  "Stronghold",
	  "Fintone",
	  "Y-find",
	  "Opela",
	  "Lotlux",
	  "Ronstring",
	  "Zathin",
	  "Duobam",
	  "Keylex"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "0.#.#",
	  "0.##",
	  "#.##",
	  "#.#",
	  "#.#.#"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "#{Name.name}",
	  "#{Company.name}"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var finance = {};
	module['exports'] = finance;
	finance.account_type = __webpack_require__(125);
	finance.transaction_type = __webpack_require__(126);
	finance.currency = __webpack_require__(127);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "Checking",
	  "Savings",
	  "Money Market",
	  "Investment",
	  "Home Loan",
	  "Credit Card",
	  "Auto Loan",
	  "Personal Loan"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = [
	  "deposit",
	  "withdrawal",
	  "payment",
	  "invoice"
	];
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {module["exports"] = {
	  "UAE Dirham": {
	    "code": "AED",
	    "symbol": ""
	  },
	  "Afghani": {
	    "code": "AFN",
	    "symbol": "؋"
	  },
	  "Lek": {
	    "code": "ALL",
	    "symbol": "Lek"
	  },
	  "Armenian Dram": {
	    "code": "AMD",
	    "symbol": ""
	  },
	  "Netherlands Antillian Guilder": {
	    "code": "ANG",
	    "symbol": "ƒ"
	  },
	  "Kwanza": {
	    "code": "AOA",
	    "symbol": ""
	  },
	  "Argentine Peso": {
	    "code": "ARS",
	    "symbol": "$"
	  },
	  "Australian Dollar": {
	    "code": "AUD",
	    "symbol": "$"
	  },
	  "Aruban Guilder": {
	    "code": "AWG",
	    "symbol": "ƒ"
	  },
	  "Azerbaijanian Manat": {
	    "code": "AZN",
	    "symbol": "ман"
	  },
	  "Convertible Marks": {
	    "code": "BAM",
	    "symbol": "KM"
	  },
	  "Barbados Dollar": {
	    "code": "BBD",
	    "symbol": "$"
	  },
	  "Taka": {
	    "code": "BDT",
	    "symbol": ""
	  },
	  "Bulgarian Lev": {
	    "code": "BGN",
	    "symbol": "лв"
	  },
	  "Bahraini Dinar": {
	    "code": "BHD",
	    "symbol": ""
	  },
	  "Burundi Franc": {
	    "code": "BIF",
	    "symbol": ""
	  },
	  "Bermudian Dollar (customarily known as Bermuda Dollar)": {
	    "code": "BMD",
	    "symbol": "$"
	  },
	  "Brunei Dollar": {
	    "code": "BND",
	    "symbol": "$"
	  },
	  "Boliviano Mvdol": {
	    "code": "BOB BOV",
	    "symbol": "$b"
	  },
	  "Brazilian Real": {
	    "code": "BRL",
	    "symbol": "R$"
	  },
	  "Bahamian Dollar": {
	    "code": "BSD",
	    "symbol": "$"
	  },
	  "Pula": {
	    "code": "BWP",
	    "symbol": "P"
	  },
	  "Belarussian Ruble": {
	    "code": "BYR",
	    "symbol": "p."
	  },
	  "Belize Dollar": {
	    "code": "BZD",
	    "symbol": "BZ$"
	  },
	  "Canadian Dollar": {
	    "code": "CAD",
	    "symbol": "$"
	  },
	  "Congolese Franc": {
	    "code": "CDF",
	    "symbol": ""
	  },
	  "Swiss Franc": {
	    "code": "CHF",
	    "symbol": "CHF"
	  },
	  "Chilean Peso Unidades de fomento": {
	    "code": "CLP CLF",
	    "symbol": "$"
	  },
	  "Yuan Renminbi": {
	    "code": "CNY",
	    "symbol": "¥"
	  },
	  "Colombian Peso Unidad de Valor Real": {
	    "code": "COP COU",
	    "symbol": "$"
	  },
	  "Costa Rican Colon": {
	    "code": "CRC",
	    "symbol": "₡"
	  },
	  "Cuban Peso Peso Convertible": {
	    "code": "CUP CUC",
	    "symbol": "₱"
	  },
	  "Cape Verde Escudo": {
	    "code": "CVE",
	    "symbol": ""
	  },
	  "Czech Koruna": {
	    "code": "CZK",
	    "symbol": "Kč"
	  },
	  "Djibouti Franc": {
	    "code": "DJF",
	    "symbol": ""
	  },
	  "Danish Krone": {
	    "code": "DKK",
	    "symbol": "kr"
	  },
	  "Dominican Peso": {
	    "code": "DOP",
	    "symbol": "RD$"
	  },
	  "Algerian Dinar": {
	    "code": "DZD",
	    "symbol": ""
	  },
	  "Kroon": {
	    "code": "EEK",
	    "symbol": ""
	  },
	  "Egyptian Pound": {
	    "code": "EGP",
	    "symbol": "£"
	  },
	  "Nakfa": {
	    "code": "ERN",
	    "symbol": ""
	  },
	  "Ethiopian Birr": {
	    "code": "ETB",
	    "symbol": ""
	  },
	  "Euro": {
	    "code": "EUR",
	    "symbol": "€"
	  },
	  "Fiji Dollar": {
	    "code": "FJD",
	    "symbol": "$"
	  },
	  "Falkland Islands Pound": {
	    "code": "FKP",
	    "symbol": "£"
	  },
	  "Pound Sterling": {
	    "code": "GBP",
	    "symbol": "£"
	  },
	  "Lari": {
	    "code": "GEL",
	    "symbol": ""
	  },
	  "Cedi": {
	    "code": "GHS",
	    "symbol": ""
	  },
	  "Gibraltar Pound": {
	    "code": "GIP",
	    "symbol": "£"
	  },
	  "Dalasi": {
	    "code": "GMD",
	    "symbol": ""
	  },
	  "Guinea Franc": {
	    "code": "GNF",
	    "symbol": ""
	  },
	  "Quetzal": {
	    "code": "GTQ",
	    "symbol": "Q"
	  },
	  "Guyana Dollar": {
	    "code": "GYD",
	    "symbol": "$"
	  },
	  "Hong Kong Dollar": {
	    "code": "HKD",
	    "symbol": "$"
	  },
	  "Lempira": {
	    "code": "HNL",
	    "symbol": "L"
	  },
	  "Croatian Kuna": {
	    "code": "HRK",
	    "symbol": "kn"
	  },
	  "Gourde US Dollar": {
	    "code": "HTG USD",
	    "symbol": ""
	  },
	  "Forint": {
	    "code": "HUF",
	    "symbol": "Ft"
	  },
	  "Rupiah": {
	    "code": "IDR",
	    "symbol": "Rp"
	  },
	  "New Israeli Sheqel": {
	    "code": "ILS",
	    "symbol": "₪"
	  },
	  "Indian Rupee": {
	    "code": "INR",
	    "symbol": ""
	  },
	  "Indian Rupee Ngultrum": {
	    "code": "INR BTN",
	    "symbol": ""
	  },
	  "Iraqi Dinar": {
	    "code": "IQD",
	    "symbol": ""
	  },
	  "Iranian Rial": {
	    "code": "IRR",
	    "symbol": "﷼"
	  },
	  "Iceland Krona": {
	    "code": "ISK",
	    "symbol": "kr"
	  },
	  "Jamaican Dollar": {
	    "code": "JMD",
	    "symbol": "J$"
	  },
	  "Jordanian Dinar": {
	    "code": "JOD",
	    "symbol": ""
	  },
	  "Yen": {
	    "code": "JPY",
	    "symbol": "¥"
	  },
	  "Kenyan Shilling": {
	    "code": "KES",
	    "symbol": ""
	  },
	  "Som": {
	    "code": "KGS",
	    "symbol": "лв"
	  },
	  "Riel": {
	    "code": "KHR",
	    "symbol": "៛"
	  },
	  "Comoro Franc": {
	    "code": "KMF",
	    "symbol": ""
	  },
	  "North Korean Won": {
	    "code": "KPW",
	    "symbol": "₩"
	  },
	  "Won": {
	    "code": "KRW",
	    "symbol": "₩"
	  },
	  "Kuwaiti Dinar": {
	    "code": "KWD",
	    "symbol": ""
	  },
	  "Cayman Islands Dollar": {
	    "code": "KYD",
	    "symbol": "$"
	  },
	  "Tenge": {
	    "code": "KZT",
	    "symbol": "лв"
	  },
	  "Kip": {
	    "code": "LAK",
	    "symbol": "₭"
	  },
	  "Lebanese Pound": {
	    "code": "LBP",
	    "symbol": "£"
	  },
	  "Sri Lanka Rupee": {
	    "code": "LKR",
	    "symbol": "₨"
	  },
	  "Liberian Dollar": {
	    "code": "LRD",
	    "symbol": "$"
	  },
	  "Lithuanian Litas": {
	    "code": "LTL",
	    "symbol": "Lt"
	  },
	  "Latvian Lats": {
	    "code": "LVL",
	    "symbol": "Ls"
	  },
	  "Libyan Dinar": {
	    "code": "LYD",
	    "symbol": ""
	  },
	  "Moroccan Dirham": {
	    "code": "MAD",
	    "symbol": ""
	  },
	  "Moldovan Leu": {
	    "code": "MDL",
	    "symbol": ""
	  },
	  "Malagasy Ariary": {
	    "code": "MGA",
	    "symbol": ""
	  },
	  "Denar": {
	    "code": "MKD",
	    "symbol": "ден"
	  },
	  "Kyat": {
	    "code": "MMK",
	    "symbol": ""
	  },
	  "Tugrik": {
	    "code": "MNT",
	    "symbol": "₮"
	  },
	  "Pataca": {
	    "code": "MOP",
	    "symbol": ""
	  },
	  "Ouguiya": {
	    "code": "MRO",
	    "symbol": ""
	  },
	  "Mauritius Rupee": {
	    "code": "MUR",
	    "symbol": "₨"
	  },
	  "Rufiyaa": {
	    "code": "MVR",
	    "symbol": ""
	  },
	  "Kwacha": {
	    "code": "MWK",
	    "symbol": ""
	  },
	  "Mexican Peso Mexican Unidad de Inversion (UDI)": {
	    "code": "MXN MXV",
	    "symbol": "$"
	  },
	  "Malaysian Ringgit": {
	    "code": "MYR",
	    "symbol": "RM"
	  },
	  "Metical": {
	    "code": "MZN",
	    "symbol": "MT"
	  },
	  "Naira": {
	    "code": "NGN",
	    "symbol": "₦"
	  },
	  "Cordoba Oro": {
	    "code": "NIO",
	    "symbol": "C$"
	  },
	  "Norwegian Krone": {
	    "code": "NOK",
	    "symbol": "kr"
	  },
	  "Nepalese Rupee": {
	    "code": "NPR",
	    "symbol": "₨"
	  },
	  "New Zealand Dollar": {
	    "code": "NZD",
	    "symbol": "$"
	  },
	  "Rial Omani": {
	    "code": "OMR",
	    "symbol": "﷼"
	  },
	  "Balboa US Dollar": {
	    "code": "PAB USD",
	    "symbol": "B/."
	  },
	  "Nuevo Sol": {
	    "code": "PEN",
	    "symbol": "S/."
	  },
	  "Kina": {
	    "code": "PGK",
	    "symbol": ""
	  },
	  "Philippine Peso": {
	    "code": "PHP",
	    "symbol": "Php"
	  },
	  "Pakistan Rupee": {
	    "code": "PKR",
	    "symbol": "₨"
	  },
	  "Zloty": {
	    "code": "PLN",
	    "symbol": "zł"
	  },
	  "Guarani": {
	    "code": "PYG",
	    "symbol": "Gs"
	  },
	  "Qatari Rial": {
	    "code": "QAR",
	    "symbol": "﷼"
	  },
	  "New Leu": {
	    "code": "RON",
	    "symbol": "lei"
	  },
	  "Serbian Dinar": {
	    "code": "RSD",
	    "symbol": "Дин."
	  },
	  "Russian Ruble": {
	    "code": "RUB",
	    "symbol": "руб"
	  },
	  "Rwanda Franc": {
	    "code": "RWF",
	    "symbol": ""
	  },
	  "Saudi Riyal": {
	    "code": "SAR",
	    "symbol": "﷼"
	  },
	  "Solomon Islands Dollar": {
	    "code": "SBD",
	    "symbol": "$"
	  },
	  "Seychelles Rupee": {
	    "code": "SCR",
	    "symbol": "₨"
	  },
	  "Sudanese Pound": {
	    "code": "SDG",
	    "symbol": ""
	  },
	  "Swedish Krona": {
	    "code": "SEK",
	    "symbol": "kr"
	  },
	  "Singapore Dollar": {
	    "code": "SGD",
	    "symbol": "$"
	  },
	  "Saint Helena Pound": {
	    "code": "SHP",
	    "symbol": "£"
	  },
	  "Leone": {
	    "code": "SLL",
	    "symbol": ""
	  },
	  "Somali Shilling": {
	    "code": "SOS",
	    "symbol": "S"
	  },
	  "Surinam Dollar": {
	    "code": "SRD",
	    "symbol": "$"
	  },
	  "Dobra": {
	    "code": "STD",
	    "symbol": ""
	  },
	  "El Salvador Colon US Dollar": {
	    "code": "SVC USD",
	    "symbol": "$"
	  },
	  "Syrian Pound": {
	    "code": "SYP",
	    "symbol": "£"
	  },
	  "Lilangeni": {
	    "code": "SZL",
	    "symbol": ""
	  },
	  "Baht": {
	    "code": "THB",
	    "symbol": "฿"
	  },
	  "Somoni": {
	    "code": "TJS",
	    "symbol": ""
	  },
	  "Manat": {
	    "code": "TMT",
	    "symbol": ""
	  },
	  "Tunisian Dinar": {
	    "code": "TND",
	    "symbol": ""
	  },
	  "Pa'anga": {
	    "code": "TOP",
	    "symbol": ""
	  },
	  "Turkish Lira": {
	    "code": "TRY",
	    "symbol": "TL"
	  },
	  "Trinidad and Tobago Dollar": {
	    "code": "TTD",
	    "symbol": "TT$"
	  },
	  "New Taiwan Dollar": {
	    "code": "TWD",
	    "symbol": "NT$"
	  },
	  "Tanzanian Shilling": {
	    "code": "TZS",
	    "symbol": ""
	  },
	  "Hryvnia": {
	    "code": "UAH",
	    "symbol": "₴"
	  },
	  "Uganda Shilling": {
	    "code": "UGX",
	    "symbol": ""
	  },
	  "US Dollar": {
	    "code": "USD",
	    "symbol": "$"
	  },
	  "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
	    "code": "UYU UYI",
	    "symbol": "$U"
	  },
	  "Uzbekistan Sum": {
	    "code": "UZS",
	    "symbol": "лв"
	  },
	  "Bolivar Fuerte": {
	    "code": "VEF",
	    "symbol": "Bs"
	  },
	  "Dong": {
	    "code": "VND",
	    "symbol": "₫"
	  },
	  "Vatu": {
	    "code": "VUV",
	    "symbol": ""
	  },
	  "Tala": {
	    "code": "WST",
	    "symbol": ""
	  },
	  "CFA Franc BEAC": {
	    "code": "XAF",
	    "symbol": ""
	  },
	  "Silver": {
	    "code": "XAG",
	    "symbol": ""
	  },
	  "Gold": {
	    "code": "XAU",
	    "symbol": ""
	  },
	  "Bond Markets Units European Composite Unit (EURCO)": {
	    "code": "XBA",
	    "symbol": ""
	  },
	  "European Monetary Unit (E.M.U.-6)": {
	    "code": "XBB",
	    "symbol": ""
	  },
	  "European Unit of Account 9(E.U.A.-9)": {
	    "code": "XBC",
	    "symbol": ""
	  },
	  "European Unit of Account 17(E.U.A.-17)": {
	    "code": "XBD",
	    "symbol": ""
	  },
	  "East Caribbean Dollar": {
	    "code": "XCD",
	    "symbol": "$"
	  },
	  "SDR": {
	    "code": "XDR",
	    "symbol": ""
	  },
	  "UIC-Franc": {
	    "code": "XFU",
	    "symbol": ""
	  },
	  "CFA Franc BCEAO": {
	    "code": "XOF",
	    "symbol": ""
	  },
	  "Palladium": {
	    "code": "XPD",
	    "symbol": ""
	  },
	  "CFP Franc": {
	    "code": "XPF",
	    "symbol": ""
	  },
	  "Platinum": {
	    "code": "XPT",
	    "symbol": ""
	  },
	  "Codes specifically reserved for testing purposes": {
	    "code": "XTS",
	    "symbol": ""
	  },
	  "Yemeni Rial": {
	    "code": "YER",
	    "symbol": "﷼"
	  },
	  "Rand": {
	    "code": "ZAR",
	    "symbol": "R"
	  },
	  "Rand Loti": {
	    "code": "ZAR LSL",
	    "symbol": ""
	  },
	  "Rand Namibia Dollar": {
	    "code": "ZAR NAD",
	    "symbol": ""
	  },
	  "Zambian Kwacha": {
	    "code": "ZMK",
	    "symbol": ""
	  },
	  "Zimbabwe Dollar": {
	    "code": "ZWL",
	    "symbol": ""
	  }
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var date = {};
	module["exports"] = date;
	date.month = __webpack_require__(129);
	date.weekday = __webpack_require__(130);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799
	module["exports"] = {
	  wide: [
	    "January",
	    "February",
	    "March",
	    "April",
	    "May",
	    "June",
	    "July",
	    "August",
	    "September",
	    "October",
	    "November",
	    "December"
	  ],
	  // Property "wide_context" is optional, if not set then "wide" will be used instead
	  // It is used to specify a word in context, which may differ from a stand-alone word
	  wide_context: [
	    "January",
	    "February",
	    "March",
	    "April",
	    "May",
	    "June",
	    "July",
	    "August",
	    "September",
	    "October",
	    "November",
	    "December"
	  ],
	  abbr: [
	    "Jan",
	    "Feb",
	    "Mar",
	    "Apr",
	    "May",
	    "Jun",
	    "Jul",
	    "Aug",
	    "Sep",
	    "Oct",
	    "Nov",
	    "Dec"
	  ],
	  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
	  // It is used to specify a word in context, which may differ from a stand-alone word
	  abbr_context: [
	    "Jan",
	    "Feb",
	    "Mar",
	    "Apr",
	    "May",
	    "Jun",
	    "Jul",
	    "Aug",
	    "Sep",
	    "Oct",
	    "Nov",
	    "Dec"
	  ]
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847
	module["exports"] = {
	  wide: [
	    "Sunday",
	    "Monday",
	    "Tuesday",
	    "Wednesday",
	    "Thursday",
	    "Friday",
	    "Saturday"
	  ],
	  // Property "wide_context" is optional, if not set then "wide" will be used instead
	  // It is used to specify a word in context, which may differ from a stand-alone word
	  wide_context: [
	    "Sunday",
	    "Monday",
	    "Tuesday",
	    "Wednesday",
	    "Thursday",
	    "Friday",
	    "Saturday"
	  ],
	  abbr: [
	    "Sun",
	    "Mon",
	    "Tue",
	    "Wed",
	    "Thu",
	    "Fri",
	    "Sat"
	  ],
	  // Property "abbr_context" is optional, if not set then "abbr" will be used instead
	  // It is used to specify a word in context, which may differ from a stand-alone word
	  abbr_context: [
	    "Sun",
	    "Mon",
	    "Tue",
	    "Wed",
	    "Thu",
	    "Fri",
	    "Sat"
	  ]
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var system = {};
	module['exports'] = system;
	system.mimeTypes = __webpack_require__(132);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*
	
	The MIT License (MIT)
	
	Copyright (c) 2014 Jonathan Ong me@jongleberry.com
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	
	Definitions from mime-db v1.21.0
	For updates check: https://github.com/jshttp/mime-db/blob/master/db.json
	
	*/
	
	module['exports'] = {
	  "application/1d-interleaved-parityfec": {
	    "source": "iana"
	  },
	  "application/3gpdash-qoe-report+xml": {
	    "source": "iana"
	  },
	  "application/3gpp-ims+xml": {
	    "source": "iana"
	  },
	  "application/a2l": {
	    "source": "iana"
	  },
	  "application/activemessage": {
	    "source": "iana"
	  },
	  "application/alto-costmap+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-costmapfilter+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-directory+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-endpointcost+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-endpointcostparams+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-endpointprop+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-endpointpropparams+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-error+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-networkmap+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/alto-networkmapfilter+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/aml": {
	    "source": "iana"
	  },
	  "application/andrew-inset": {
	    "source": "iana",
	    "extensions": ["ez"]
	  },
	  "application/applefile": {
	    "source": "iana"
	  },
	  "application/applixware": {
	    "source": "apache",
	    "extensions": ["aw"]
	  },
	  "application/atf": {
	    "source": "iana"
	  },
	  "application/atfx": {
	    "source": "iana"
	  },
	  "application/atom+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["atom"]
	  },
	  "application/atomcat+xml": {
	    "source": "iana",
	    "extensions": ["atomcat"]
	  },
	  "application/atomdeleted+xml": {
	    "source": "iana"
	  },
	  "application/atomicmail": {
	    "source": "iana"
	  },
	  "application/atomsvc+xml": {
	    "source": "iana",
	    "extensions": ["atomsvc"]
	  },
	  "application/atxml": {
	    "source": "iana"
	  },
	  "application/auth-policy+xml": {
	    "source": "iana"
	  },
	  "application/bacnet-xdd+zip": {
	    "source": "iana"
	  },
	  "application/batch-smtp": {
	    "source": "iana"
	  },
	  "application/bdoc": {
	    "compressible": false,
	    "extensions": ["bdoc"]
	  },
	  "application/beep+xml": {
	    "source": "iana"
	  },
	  "application/calendar+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/calendar+xml": {
	    "source": "iana"
	  },
	  "application/call-completion": {
	    "source": "iana"
	  },
	  "application/cals-1840": {
	    "source": "iana"
	  },
	  "application/cbor": {
	    "source": "iana"
	  },
	  "application/ccmp+xml": {
	    "source": "iana"
	  },
	  "application/ccxml+xml": {
	    "source": "iana",
	    "extensions": ["ccxml"]
	  },
	  "application/cdfx+xml": {
	    "source": "iana"
	  },
	  "application/cdmi-capability": {
	    "source": "iana",
	    "extensions": ["cdmia"]
	  },
	  "application/cdmi-container": {
	    "source": "iana",
	    "extensions": ["cdmic"]
	  },
	  "application/cdmi-domain": {
	    "source": "iana",
	    "extensions": ["cdmid"]
	  },
	  "application/cdmi-object": {
	    "source": "iana",
	    "extensions": ["cdmio"]
	  },
	  "application/cdmi-queue": {
	    "source": "iana",
	    "extensions": ["cdmiq"]
	  },
	  "application/cdni": {
	    "source": "iana"
	  },
	  "application/cea": {
	    "source": "iana"
	  },
	  "application/cea-2018+xml": {
	    "source": "iana"
	  },
	  "application/cellml+xml": {
	    "source": "iana"
	  },
	  "application/cfw": {
	    "source": "iana"
	  },
	  "application/cms": {
	    "source": "iana"
	  },
	  "application/cnrp+xml": {
	    "source": "iana"
	  },
	  "application/coap-group+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/commonground": {
	    "source": "iana"
	  },
	  "application/conference-info+xml": {
	    "source": "iana"
	  },
	  "application/cpl+xml": {
	    "source": "iana"
	  },
	  "application/csrattrs": {
	    "source": "iana"
	  },
	  "application/csta+xml": {
	    "source": "iana"
	  },
	  "application/cstadata+xml": {
	    "source": "iana"
	  },
	  "application/csvm+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/cu-seeme": {
	    "source": "apache",
	    "extensions": ["cu"]
	  },
	  "application/cybercash": {
	    "source": "iana"
	  },
	  "application/dart": {
	    "compressible": true
	  },
	  "application/dash+xml": {
	    "source": "iana",
	    "extensions": ["mdp"]
	  },
	  "application/dashdelta": {
	    "source": "iana"
	  },
	  "application/davmount+xml": {
	    "source": "iana",
	    "extensions": ["davmount"]
	  },
	  "application/dca-rft": {
	    "source": "iana"
	  },
	  "application/dcd": {
	    "source": "iana"
	  },
	  "application/dec-dx": {
	    "source": "iana"
	  },
	  "application/dialog-info+xml": {
	    "source": "iana"
	  },
	  "application/dicom": {
	    "source": "iana"
	  },
	  "application/dii": {
	    "source": "iana"
	  },
	  "application/dit": {
	    "source": "iana"
	  },
	  "application/dns": {
	    "source": "iana"
	  },
	  "application/docbook+xml": {
	    "source": "apache",
	    "extensions": ["dbk"]
	  },
	  "application/dskpp+xml": {
	    "source": "iana"
	  },
	  "application/dssc+der": {
	    "source": "iana",
	    "extensions": ["dssc"]
	  },
	  "application/dssc+xml": {
	    "source": "iana",
	    "extensions": ["xdssc"]
	  },
	  "application/dvcs": {
	    "source": "iana"
	  },
	  "application/ecmascript": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["ecma"]
	  },
	  "application/edi-consent": {
	    "source": "iana"
	  },
	  "application/edi-x12": {
	    "source": "iana",
	    "compressible": false
	  },
	  "application/edifact": {
	    "source": "iana",
	    "compressible": false
	  },
	  "application/emergencycalldata.comment+xml": {
	    "source": "iana"
	  },
	  "application/emergencycalldata.deviceinfo+xml": {
	    "source": "iana"
	  },
	  "application/emergencycalldata.providerinfo+xml": {
	    "source": "iana"
	  },
	  "application/emergencycalldata.serviceinfo+xml": {
	    "source": "iana"
	  },
	  "application/emergencycalldata.subscriberinfo+xml": {
	    "source": "iana"
	  },
	  "application/emma+xml": {
	    "source": "iana",
	    "extensions": ["emma"]
	  },
	  "application/emotionml+xml": {
	    "source": "iana"
	  },
	  "application/encaprtp": {
	    "source": "iana"
	  },
	  "application/epp+xml": {
	    "source": "iana"
	  },
	  "application/epub+zip": {
	    "source": "iana",
	    "extensions": ["epub"]
	  },
	  "application/eshop": {
	    "source": "iana"
	  },
	  "application/exi": {
	    "source": "iana",
	    "extensions": ["exi"]
	  },
	  "application/fastinfoset": {
	    "source": "iana"
	  },
	  "application/fastsoap": {
	    "source": "iana"
	  },
	  "application/fdt+xml": {
	    "source": "iana"
	  },
	  "application/fits": {
	    "source": "iana"
	  },
	  "application/font-sfnt": {
	    "source": "iana"
	  },
	  "application/font-tdpfr": {
	    "source": "iana",
	    "extensions": ["pfr"]
	  },
	  "application/font-woff": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["woff"]
	  },
	  "application/font-woff2": {
	    "compressible": false,
	    "extensions": ["woff2"]
	  },
	  "application/framework-attributes+xml": {
	    "source": "iana"
	  },
	  "application/gml+xml": {
	    "source": "apache",
	    "extensions": ["gml"]
	  },
	  "application/gpx+xml": {
	    "source": "apache",
	    "extensions": ["gpx"]
	  },
	  "application/gxf": {
	    "source": "apache",
	    "extensions": ["gxf"]
	  },
	  "application/gzip": {
	    "source": "iana",
	    "compressible": false
	  },
	  "application/h224": {
	    "source": "iana"
	  },
	  "application/held+xml": {
	    "source": "iana"
	  },
	  "application/http": {
	    "source": "iana"
	  },
	  "application/hyperstudio": {
	    "source": "iana",
	    "extensions": ["stk"]
	  },
	  "application/ibe-key-request+xml": {
	    "source": "iana"
	  },
	  "application/ibe-pkg-reply+xml": {
	    "source": "iana"
	  },
	  "application/ibe-pp-data": {
	    "source": "iana"
	  },
	  "application/iges": {
	    "source": "iana"
	  },
	  "application/im-iscomposing+xml": {
	    "source": "iana"
	  },
	  "application/index": {
	    "source": "iana"
	  },
	  "application/index.cmd": {
	    "source": "iana"
	  },
	  "application/index.obj": {
	    "source": "iana"
	  },
	  "application/index.response": {
	    "source": "iana"
	  },
	  "application/index.vnd": {
	    "source": "iana"
	  },
	  "application/inkml+xml": {
	    "source": "iana",
	    "extensions": ["ink","inkml"]
	  },
	  "application/iotp": {
	    "source": "iana"
	  },
	  "application/ipfix": {
	    "source": "iana",
	    "extensions": ["ipfix"]
	  },
	  "application/ipp": {
	    "source": "iana"
	  },
	  "application/isup": {
	    "source": "iana"
	  },
	  "application/its+xml": {
	    "source": "iana"
	  },
	  "application/java-archive": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["jar","war","ear"]
	  },
	  "application/java-serialized-object": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["ser"]
	  },
	  "application/java-vm": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["class"]
	  },
	  "application/javascript": {
	    "source": "iana",
	    "charset": "UTF-8",
	    "compressible": true,
	    "extensions": ["js"]
	  },
	  "application/jose": {
	    "source": "iana"
	  },
	  "application/jose+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/jrd+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/json": {
	    "source": "iana",
	    "charset": "UTF-8",
	    "compressible": true,
	    "extensions": ["json","map"]
	  },
	  "application/json-patch+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/json-seq": {
	    "source": "iana"
	  },
	  "application/json5": {
	    "extensions": ["json5"]
	  },
	  "application/jsonml+json": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["jsonml"]
	  },
	  "application/jwk+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/jwk-set+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/jwt": {
	    "source": "iana"
	  },
	  "application/kpml-request+xml": {
	    "source": "iana"
	  },
	  "application/kpml-response+xml": {
	    "source": "iana"
	  },
	  "application/ld+json": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["jsonld"]
	  },
	  "application/link-format": {
	    "source": "iana"
	  },
	  "application/load-control+xml": {
	    "source": "iana"
	  },
	  "application/lost+xml": {
	    "source": "iana",
	    "extensions": ["lostxml"]
	  },
	  "application/lostsync+xml": {
	    "source": "iana"
	  },
	  "application/lxf": {
	    "source": "iana"
	  },
	  "application/mac-binhex40": {
	    "source": "iana",
	    "extensions": ["hqx"]
	  },
	  "application/mac-compactpro": {
	    "source": "apache",
	    "extensions": ["cpt"]
	  },
	  "application/macwriteii": {
	    "source": "iana"
	  },
	  "application/mads+xml": {
	    "source": "iana",
	    "extensions": ["mads"]
	  },
	  "application/manifest+json": {
	    "charset": "UTF-8",
	    "compressible": true,
	    "extensions": ["webmanifest"]
	  },
	  "application/marc": {
	    "source": "iana",
	    "extensions": ["mrc"]
	  },
	  "application/marcxml+xml": {
	    "source": "iana",
	    "extensions": ["mrcx"]
	  },
	  "application/mathematica": {
	    "source": "iana",
	    "extensions": ["ma","nb","mb"]
	  },
	  "application/mathml+xml": {
	    "source": "iana",
	    "extensions": ["mathml"]
	  },
	  "application/mathml-content+xml": {
	    "source": "iana"
	  },
	  "application/mathml-presentation+xml": {
	    "source": "iana"
	  },
	  "application/mbms-associated-procedure-description+xml": {
	    "source": "iana"
	  },
	  "application/mbms-deregister+xml": {
	    "source": "iana"
	  },
	  "application/mbms-envelope+xml": {
	    "source": "iana"
	  },
	  "application/mbms-msk+xml": {
	    "source": "iana"
	  },
	  "application/mbms-msk-response+xml": {
	    "source": "iana"
	  },
	  "application/mbms-protection-description+xml": {
	    "source": "iana"
	  },
	  "application/mbms-reception-report+xml": {
	    "source": "iana"
	  },
	  "application/mbms-register+xml": {
	    "source": "iana"
	  },
	  "application/mbms-register-response+xml": {
	    "source": "iana"
	  },
	  "application/mbms-schedule+xml": {
	    "source": "iana"
	  },
	  "application/mbms-user-service-description+xml": {
	    "source": "iana"
	  },
	  "application/mbox": {
	    "source": "iana",
	    "extensions": ["mbox"]
	  },
	  "application/media-policy-dataset+xml": {
	    "source": "iana"
	  },
	  "application/media_control+xml": {
	    "source": "iana"
	  },
	  "application/mediaservercontrol+xml": {
	    "source": "iana",
	    "extensions": ["mscml"]
	  },
	  "application/merge-patch+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/metalink+xml": {
	    "source": "apache",
	    "extensions": ["metalink"]
	  },
	  "application/metalink4+xml": {
	    "source": "iana",
	    "extensions": ["meta4"]
	  },
	  "application/mets+xml": {
	    "source": "iana",
	    "extensions": ["mets"]
	  },
	  "application/mf4": {
	    "source": "iana"
	  },
	  "application/mikey": {
	    "source": "iana"
	  },
	  "application/mods+xml": {
	    "source": "iana",
	    "extensions": ["mods"]
	  },
	  "application/moss-keys": {
	    "source": "iana"
	  },
	  "application/moss-signature": {
	    "source": "iana"
	  },
	  "application/mosskey-data": {
	    "source": "iana"
	  },
	  "application/mosskey-request": {
	    "source": "iana"
	  },
	  "application/mp21": {
	    "source": "iana",
	    "extensions": ["m21","mp21"]
	  },
	  "application/mp4": {
	    "source": "iana",
	    "extensions": ["mp4s","m4p"]
	  },
	  "application/mpeg4-generic": {
	    "source": "iana"
	  },
	  "application/mpeg4-iod": {
	    "source": "iana"
	  },
	  "application/mpeg4-iod-xmt": {
	    "source": "iana"
	  },
	  "application/mrb-consumer+xml": {
	    "source": "iana"
	  },
	  "application/mrb-publish+xml": {
	    "source": "iana"
	  },
	  "application/msc-ivr+xml": {
	    "source": "iana"
	  },
	  "application/msc-mixer+xml": {
	    "source": "iana"
	  },
	  "application/msword": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["doc","dot"]
	  },
	  "application/mxf": {
	    "source": "iana",
	    "extensions": ["mxf"]
	  },
	  "application/nasdata": {
	    "source": "iana"
	  },
	  "application/news-checkgroups": {
	    "source": "iana"
	  },
	  "application/news-groupinfo": {
	    "source": "iana"
	  },
	  "application/news-transmission": {
	    "source": "iana"
	  },
	  "application/nlsml+xml": {
	    "source": "iana"
	  },
	  "application/nss": {
	    "source": "iana"
	  },
	  "application/ocsp-request": {
	    "source": "iana"
	  },
	  "application/ocsp-response": {
	    "source": "iana"
	  },
	  "application/octet-stream": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]
	  },
	  "application/oda": {
	    "source": "iana",
	    "extensions": ["oda"]
	  },
	  "application/odx": {
	    "source": "iana"
	  },
	  "application/oebps-package+xml": {
	    "source": "iana",
	    "extensions": ["opf"]
	  },
	  "application/ogg": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["ogx"]
	  },
	  "application/omdoc+xml": {
	    "source": "apache",
	    "extensions": ["omdoc"]
	  },
	  "application/onenote": {
	    "source": "apache",
	    "extensions": ["onetoc","onetoc2","onetmp","onepkg"]
	  },
	  "application/oxps": {
	    "source": "iana",
	    "extensions": ["oxps"]
	  },
	  "application/p2p-overlay+xml": {
	    "source": "iana"
	  },
	  "application/parityfec": {
	    "source": "iana"
	  },
	  "application/patch-ops-error+xml": {
	    "source": "iana",
	    "extensions": ["xer"]
	  },
	  "application/pdf": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["pdf"]
	  },
	  "application/pdx": {
	    "source": "iana"
	  },
	  "application/pgp-encrypted": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["pgp"]
	  },
	  "application/pgp-keys": {
	    "source": "iana"
	  },
	  "application/pgp-signature": {
	    "source": "iana",
	    "extensions": ["asc","sig"]
	  },
	  "application/pics-rules": {
	    "source": "apache",
	    "extensions": ["prf"]
	  },
	  "application/pidf+xml": {
	    "source": "iana"
	  },
	  "application/pidf-diff+xml": {
	    "source": "iana"
	  },
	  "application/pkcs10": {
	    "source": "iana",
	    "extensions": ["p10"]
	  },
	  "application/pkcs12": {
	    "source": "iana"
	  },
	  "application/pkcs7-mime": {
	    "source": "iana",
	    "extensions": ["p7m","p7c"]
	  },
	  "application/pkcs7-signature": {
	    "source": "iana",
	    "extensions": ["p7s"]
	  },
	  "application/pkcs8": {
	    "source": "iana",
	    "extensions": ["p8"]
	  },
	  "application/pkix-attr-cert": {
	    "source": "iana",
	    "extensions": ["ac"]
	  },
	  "application/pkix-cert": {
	    "source": "iana",
	    "extensions": ["cer"]
	  },
	  "application/pkix-crl": {
	    "source": "iana",
	    "extensions": ["crl"]
	  },
	  "application/pkix-pkipath": {
	    "source": "iana",
	    "extensions": ["pkipath"]
	  },
	  "application/pkixcmp": {
	    "source": "iana",
	    "extensions": ["pki"]
	  },
	  "application/pls+xml": {
	    "source": "iana",
	    "extensions": ["pls"]
	  },
	  "application/poc-settings+xml": {
	    "source": "iana"
	  },
	  "application/postscript": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["ai","eps","ps"]
	  },
	  "application/provenance+xml": {
	    "source": "iana"
	  },
	  "application/prs.alvestrand.titrax-sheet": {
	    "source": "iana"
	  },
	  "application/prs.cww": {
	    "source": "iana",
	    "extensions": ["cww"]
	  },
	  "application/prs.hpub+zip": {
	    "source": "iana"
	  },
	  "application/prs.nprend": {
	    "source": "iana"
	  },
	  "application/prs.plucker": {
	    "source": "iana"
	  },
	  "application/prs.rdf-xml-crypt": {
	    "source": "iana"
	  },
	  "application/prs.xsf+xml": {
	    "source": "iana"
	  },
	  "application/pskc+xml": {
	    "source": "iana",
	    "extensions": ["pskcxml"]
	  },
	  "application/qsig": {
	    "source": "iana"
	  },
	  "application/raptorfec": {
	    "source": "iana"
	  },
	  "application/rdap+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/rdf+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["rdf"]
	  },
	  "application/reginfo+xml": {
	    "source": "iana",
	    "extensions": ["rif"]
	  },
	  "application/relax-ng-compact-syntax": {
	    "source": "iana",
	    "extensions": ["rnc"]
	  },
	  "application/remote-printing": {
	    "source": "iana"
	  },
	  "application/reputon+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/resource-lists+xml": {
	    "source": "iana",
	    "extensions": ["rl"]
	  },
	  "application/resource-lists-diff+xml": {
	    "source": "iana",
	    "extensions": ["rld"]
	  },
	  "application/rfc+xml": {
	    "source": "iana"
	  },
	  "application/riscos": {
	    "source": "iana"
	  },
	  "application/rlmi+xml": {
	    "source": "iana"
	  },
	  "application/rls-services+xml": {
	    "source": "iana",
	    "extensions": ["rs"]
	  },
	  "application/rpki-ghostbusters": {
	    "source": "iana",
	    "extensions": ["gbr"]
	  },
	  "application/rpki-manifest": {
	    "source": "iana",
	    "extensions": ["mft"]
	  },
	  "application/rpki-roa": {
	    "source": "iana",
	    "extensions": ["roa"]
	  },
	  "application/rpki-updown": {
	    "source": "iana"
	  },
	  "application/rsd+xml": {
	    "source": "apache",
	    "extensions": ["rsd"]
	  },
	  "application/rss+xml": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["rss"]
	  },
	  "application/rtf": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["rtf"]
	  },
	  "application/rtploopback": {
	    "source": "iana"
	  },
	  "application/rtx": {
	    "source": "iana"
	  },
	  "application/samlassertion+xml": {
	    "source": "iana"
	  },
	  "application/samlmetadata+xml": {
	    "source": "iana"
	  },
	  "application/sbml+xml": {
	    "source": "iana",
	    "extensions": ["sbml"]
	  },
	  "application/scaip+xml": {
	    "source": "iana"
	  },
	  "application/scim+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/scvp-cv-request": {
	    "source": "iana",
	    "extensions": ["scq"]
	  },
	  "application/scvp-cv-response": {
	    "source": "iana",
	    "extensions": ["scs"]
	  },
	  "application/scvp-vp-request": {
	    "source": "iana",
	    "extensions": ["spq"]
	  },
	  "application/scvp-vp-response": {
	    "source": "iana",
	    "extensions": ["spp"]
	  },
	  "application/sdp": {
	    "source": "iana",
	    "extensions": ["sdp"]
	  },
	  "application/sep+xml": {
	    "source": "iana"
	  },
	  "application/sep-exi": {
	    "source": "iana"
	  },
	  "application/session-info": {
	    "source": "iana"
	  },
	  "application/set-payment": {
	    "source": "iana"
	  },
	  "application/set-payment-initiation": {
	    "source": "iana",
	    "extensions": ["setpay"]
	  },
	  "application/set-registration": {
	    "source": "iana"
	  },
	  "application/set-registration-initiation": {
	    "source": "iana",
	    "extensions": ["setreg"]
	  },
	  "application/sgml": {
	    "source": "iana"
	  },
	  "application/sgml-open-catalog": {
	    "source": "iana"
	  },
	  "application/shf+xml": {
	    "source": "iana",
	    "extensions": ["shf"]
	  },
	  "application/sieve": {
	    "source": "iana"
	  },
	  "application/simple-filter+xml": {
	    "source": "iana"
	  },
	  "application/simple-message-summary": {
	    "source": "iana"
	  },
	  "application/simplesymbolcontainer": {
	    "source": "iana"
	  },
	  "application/slate": {
	    "source": "iana"
	  },
	  "application/smil": {
	    "source": "iana"
	  },
	  "application/smil+xml": {
	    "source": "iana",
	    "extensions": ["smi","smil"]
	  },
	  "application/smpte336m": {
	    "source": "iana"
	  },
	  "application/soap+fastinfoset": {
	    "source": "iana"
	  },
	  "application/soap+xml": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/sparql-query": {
	    "source": "iana",
	    "extensions": ["rq"]
	  },
	  "application/sparql-results+xml": {
	    "source": "iana",
	    "extensions": ["srx"]
	  },
	  "application/spirits-event+xml": {
	    "source": "iana"
	  },
	  "application/sql": {
	    "source": "iana"
	  },
	  "application/srgs": {
	    "source": "iana",
	    "extensions": ["gram"]
	  },
	  "application/srgs+xml": {
	    "source": "iana",
	    "extensions": ["grxml"]
	  },
	  "application/sru+xml": {
	    "source": "iana",
	    "extensions": ["sru"]
	  },
	  "application/ssdl+xml": {
	    "source": "apache",
	    "extensions": ["ssdl"]
	  },
	  "application/ssml+xml": {
	    "source": "iana",
	    "extensions": ["ssml"]
	  },
	  "application/tamp-apex-update": {
	    "source": "iana"
	  },
	  "application/tamp-apex-update-confirm": {
	    "source": "iana"
	  },
	  "application/tamp-community-update": {
	    "source": "iana"
	  },
	  "application/tamp-community-update-confirm": {
	    "source": "iana"
	  },
	  "application/tamp-error": {
	    "source": "iana"
	  },
	  "application/tamp-sequence-adjust": {
	    "source": "iana"
	  },
	  "application/tamp-sequence-adjust-confirm": {
	    "source": "iana"
	  },
	  "application/tamp-status-query": {
	    "source": "iana"
	  },
	  "application/tamp-status-response": {
	    "source": "iana"
	  },
	  "application/tamp-update": {
	    "source": "iana"
	  },
	  "application/tamp-update-confirm": {
	    "source": "iana"
	  },
	  "application/tar": {
	    "compressible": true
	  },
	  "application/tei+xml": {
	    "source": "iana",
	    "extensions": ["tei","teicorpus"]
	  },
	  "application/thraud+xml": {
	    "source": "iana",
	    "extensions": ["tfi"]
	  },
	  "application/timestamp-query": {
	    "source": "iana"
	  },
	  "application/timestamp-reply": {
	    "source": "iana"
	  },
	  "application/timestamped-data": {
	    "source": "iana",
	    "extensions": ["tsd"]
	  },
	  "application/ttml+xml": {
	    "source": "iana"
	  },
	  "application/tve-trigger": {
	    "source": "iana"
	  },
	  "application/ulpfec": {
	    "source": "iana"
	  },
	  "application/urc-grpsheet+xml": {
	    "source": "iana"
	  },
	  "application/urc-ressheet+xml": {
	    "source": "iana"
	  },
	  "application/urc-targetdesc+xml": {
	    "source": "iana"
	  },
	  "application/urc-uisocketdesc+xml": {
	    "source": "iana"
	  },
	  "application/vcard+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vcard+xml": {
	    "source": "iana"
	  },
	  "application/vemmi": {
	    "source": "iana"
	  },
	  "application/vividence.scriptfile": {
	    "source": "apache"
	  },
	  "application/vnd.3gpp-prose+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp-prose-pc3ch+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.access-transfer-events+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.bsf+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.mid-call+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.pic-bw-large": {
	    "source": "iana",
	    "extensions": ["plb"]
	  },
	  "application/vnd.3gpp.pic-bw-small": {
	    "source": "iana",
	    "extensions": ["psb"]
	  },
	  "application/vnd.3gpp.pic-bw-var": {
	    "source": "iana",
	    "extensions": ["pvb"]
	  },
	  "application/vnd.3gpp.sms": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.srvcc-ext+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.srvcc-info+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.state-and-event-info+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp.ussd+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp2.bcmcsinfo+xml": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp2.sms": {
	    "source": "iana"
	  },
	  "application/vnd.3gpp2.tcap": {
	    "source": "iana",
	    "extensions": ["tcap"]
	  },
	  "application/vnd.3m.post-it-notes": {
	    "source": "iana",
	    "extensions": ["pwn"]
	  },
	  "application/vnd.accpac.simply.aso": {
	    "source": "iana",
	    "extensions": ["aso"]
	  },
	  "application/vnd.accpac.simply.imp": {
	    "source": "iana",
	    "extensions": ["imp"]
	  },
	  "application/vnd.acucobol": {
	    "source": "iana",
	    "extensions": ["acu"]
	  },
	  "application/vnd.acucorp": {
	    "source": "iana",
	    "extensions": ["atc","acutc"]
	  },
	  "application/vnd.adobe.air-application-installer-package+zip": {
	    "source": "apache",
	    "extensions": ["air"]
	  },
	  "application/vnd.adobe.flash.movie": {
	    "source": "iana"
	  },
	  "application/vnd.adobe.formscentral.fcdt": {
	    "source": "iana",
	    "extensions": ["fcdt"]
	  },
	  "application/vnd.adobe.fxp": {
	    "source": "iana",
	    "extensions": ["fxp","fxpl"]
	  },
	  "application/vnd.adobe.partial-upload": {
	    "source": "iana"
	  },
	  "application/vnd.adobe.xdp+xml": {
	    "source": "iana",
	    "extensions": ["xdp"]
	  },
	  "application/vnd.adobe.xfdf": {
	    "source": "iana",
	    "extensions": ["xfdf"]
	  },
	  "application/vnd.aether.imp": {
	    "source": "iana"
	  },
	  "application/vnd.ah-barcode": {
	    "source": "iana"
	  },
	  "application/vnd.ahead.space": {
	    "source": "iana",
	    "extensions": ["ahead"]
	  },
	  "application/vnd.airzip.filesecure.azf": {
	    "source": "iana",
	    "extensions": ["azf"]
	  },
	  "application/vnd.airzip.filesecure.azs": {
	    "source": "iana",
	    "extensions": ["azs"]
	  },
	  "application/vnd.amazon.ebook": {
	    "source": "apache",
	    "extensions": ["azw"]
	  },
	  "application/vnd.americandynamics.acc": {
	    "source": "iana",
	    "extensions": ["acc"]
	  },
	  "application/vnd.amiga.ami": {
	    "source": "iana",
	    "extensions": ["ami"]
	  },
	  "application/vnd.amundsen.maze+xml": {
	    "source": "iana"
	  },
	  "application/vnd.android.package-archive": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["apk"]
	  },
	  "application/vnd.anki": {
	    "source": "iana"
	  },
	  "application/vnd.anser-web-certificate-issue-initiation": {
	    "source": "iana",
	    "extensions": ["cii"]
	  },
	  "application/vnd.anser-web-funds-transfer-initiation": {
	    "source": "apache",
	    "extensions": ["fti"]
	  },
	  "application/vnd.antix.game-component": {
	    "source": "iana",
	    "extensions": ["atx"]
	  },
	  "application/vnd.apache.thrift.binary": {
	    "source": "iana"
	  },
	  "application/vnd.apache.thrift.compact": {
	    "source": "iana"
	  },
	  "application/vnd.apache.thrift.json": {
	    "source": "iana"
	  },
	  "application/vnd.api+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.apple.installer+xml": {
	    "source": "iana",
	    "extensions": ["mpkg"]
	  },
	  "application/vnd.apple.mpegurl": {
	    "source": "iana",
	    "extensions": ["m3u8"]
	  },
	  "application/vnd.apple.pkpass": {
	    "compressible": false,
	    "extensions": ["pkpass"]
	  },
	  "application/vnd.arastra.swi": {
	    "source": "iana"
	  },
	  "application/vnd.aristanetworks.swi": {
	    "source": "iana",
	    "extensions": ["swi"]
	  },
	  "application/vnd.artsquare": {
	    "source": "iana"
	  },
	  "application/vnd.astraea-software.iota": {
	    "source": "iana",
	    "extensions": ["iota"]
	  },
	  "application/vnd.audiograph": {
	    "source": "iana",
	    "extensions": ["aep"]
	  },
	  "application/vnd.autopackage": {
	    "source": "iana"
	  },
	  "application/vnd.avistar+xml": {
	    "source": "iana"
	  },
	  "application/vnd.balsamiq.bmml+xml": {
	    "source": "iana"
	  },
	  "application/vnd.balsamiq.bmpr": {
	    "source": "iana"
	  },
	  "application/vnd.bekitzur-stech+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.biopax.rdf+xml": {
	    "source": "iana"
	  },
	  "application/vnd.blueice.multipass": {
	    "source": "iana",
	    "extensions": ["mpm"]
	  },
	  "application/vnd.bluetooth.ep.oob": {
	    "source": "iana"
	  },
	  "application/vnd.bluetooth.le.oob": {
	    "source": "iana"
	  },
	  "application/vnd.bmi": {
	    "source": "iana",
	    "extensions": ["bmi"]
	  },
	  "application/vnd.businessobjects": {
	    "source": "iana",
	    "extensions": ["rep"]
	  },
	  "application/vnd.cab-jscript": {
	    "source": "iana"
	  },
	  "application/vnd.canon-cpdl": {
	    "source": "iana"
	  },
	  "application/vnd.canon-lips": {
	    "source": "iana"
	  },
	  "application/vnd.cendio.thinlinc.clientconf": {
	    "source": "iana"
	  },
	  "application/vnd.century-systems.tcp_stream": {
	    "source": "iana"
	  },
	  "application/vnd.chemdraw+xml": {
	    "source": "iana",
	    "extensions": ["cdxml"]
	  },
	  "application/vnd.chipnuts.karaoke-mmd": {
	    "source": "iana",
	    "extensions": ["mmd"]
	  },
	  "application/vnd.cinderella": {
	    "source": "iana",
	    "extensions": ["cdy"]
	  },
	  "application/vnd.cirpack.isdn-ext": {
	    "source": "iana"
	  },
	  "application/vnd.citationstyles.style+xml": {
	    "source": "iana"
	  },
	  "application/vnd.claymore": {
	    "source": "iana",
	    "extensions": ["cla"]
	  },
	  "application/vnd.cloanto.rp9": {
	    "source": "iana",
	    "extensions": ["rp9"]
	  },
	  "application/vnd.clonk.c4group": {
	    "source": "iana",
	    "extensions": ["c4g","c4d","c4f","c4p","c4u"]
	  },
	  "application/vnd.cluetrust.cartomobile-config": {
	    "source": "iana",
	    "extensions": ["c11amc"]
	  },
	  "application/vnd.cluetrust.cartomobile-config-pkg": {
	    "source": "iana",
	    "extensions": ["c11amz"]
	  },
	  "application/vnd.coffeescript": {
	    "source": "iana"
	  },
	  "application/vnd.collection+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.collection.doc+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.collection.next+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.commerce-battelle": {
	    "source": "iana"
	  },
	  "application/vnd.commonspace": {
	    "source": "iana",
	    "extensions": ["csp"]
	  },
	  "application/vnd.contact.cmsg": {
	    "source": "iana",
	    "extensions": ["cdbcmsg"]
	  },
	  "application/vnd.cosmocaller": {
	    "source": "iana",
	    "extensions": ["cmc"]
	  },
	  "application/vnd.crick.clicker": {
	    "source": "iana",
	    "extensions": ["clkx"]
	  },
	  "application/vnd.crick.clicker.keyboard": {
	    "source": "iana",
	    "extensions": ["clkk"]
	  },
	  "application/vnd.crick.clicker.palette": {
	    "source": "iana",
	    "extensions": ["clkp"]
	  },
	  "application/vnd.crick.clicker.template": {
	    "source": "iana",
	    "extensions": ["clkt"]
	  },
	  "application/vnd.crick.clicker.wordbank": {
	    "source": "iana",
	    "extensions": ["clkw"]
	  },
	  "application/vnd.criticaltools.wbs+xml": {
	    "source": "iana",
	    "extensions": ["wbs"]
	  },
	  "application/vnd.ctc-posml": {
	    "source": "iana",
	    "extensions": ["pml"]
	  },
	  "application/vnd.ctct.ws+xml": {
	    "source": "iana"
	  },
	  "application/vnd.cups-pdf": {
	    "source": "iana"
	  },
	  "application/vnd.cups-postscript": {
	    "source": "iana"
	  },
	  "application/vnd.cups-ppd": {
	    "source": "iana",
	    "extensions": ["ppd"]
	  },
	  "application/vnd.cups-raster": {
	    "source": "iana"
	  },
	  "application/vnd.cups-raw": {
	    "source": "iana"
	  },
	  "application/vnd.curl": {
	    "source": "iana"
	  },
	  "application/vnd.curl.car": {
	    "source": "apache",
	    "extensions": ["car"]
	  },
	  "application/vnd.curl.pcurl": {
	    "source": "apache",
	    "extensions": ["pcurl"]
	  },
	  "application/vnd.cyan.dean.root+xml": {
	    "source": "iana"
	  },
	  "application/vnd.cybank": {
	    "source": "iana"
	  },
	  "application/vnd.dart": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["dart"]
	  },
	  "application/vnd.data-vision.rdz": {
	    "source": "iana",
	    "extensions": ["rdz"]
	  },
	  "application/vnd.debian.binary-package": {
	    "source": "iana"
	  },
	  "application/vnd.dece.data": {
	    "source": "iana",
	    "extensions": ["uvf","uvvf","uvd","uvvd"]
	  },
	  "application/vnd.dece.ttml+xml": {
	    "source": "iana",
	    "extensions": ["uvt","uvvt"]
	  },
	  "application/vnd.dece.unspecified": {
	    "source": "iana",
	    "extensions": ["uvx","uvvx"]
	  },
	  "application/vnd.dece.zip": {
	    "source": "iana",
	    "extensions": ["uvz","uvvz"]
	  },
	  "application/vnd.denovo.fcselayout-link": {
	    "source": "iana",
	    "extensions": ["fe_launch"]
	  },
	  "application/vnd.desmume-movie": {
	    "source": "iana"
	  },
	  "application/vnd.dir-bi.plate-dl-nosuffix": {
	    "source": "iana"
	  },
	  "application/vnd.dm.delegation+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dna": {
	    "source": "iana",
	    "extensions": ["dna"]
	  },
	  "application/vnd.document+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.dolby.mlp": {
	    "source": "apache",
	    "extensions": ["mlp"]
	  },
	  "application/vnd.dolby.mobile.1": {
	    "source": "iana"
	  },
	  "application/vnd.dolby.mobile.2": {
	    "source": "iana"
	  },
	  "application/vnd.doremir.scorecloud-binary-document": {
	    "source": "iana"
	  },
	  "application/vnd.dpgraph": {
	    "source": "iana",
	    "extensions": ["dpg"]
	  },
	  "application/vnd.dreamfactory": {
	    "source": "iana",
	    "extensions": ["dfac"]
	  },
	  "application/vnd.drive+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ds-keypoint": {
	    "source": "apache",
	    "extensions": ["kpxx"]
	  },
	  "application/vnd.dtg.local": {
	    "source": "iana"
	  },
	  "application/vnd.dtg.local.flash": {
	    "source": "iana"
	  },
	  "application/vnd.dtg.local.html": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ait": {
	    "source": "iana",
	    "extensions": ["ait"]
	  },
	  "application/vnd.dvb.dvbj": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.esgcontainer": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ipdcdftnotifaccess": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ipdcesgaccess": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ipdcesgaccess2": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ipdcesgpdd": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.ipdcroaming": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.iptv.alfec-base": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.iptv.alfec-enhancement": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-aggregate-root+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-container+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-generic+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-ia-msglist+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-ia-registration-request+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-ia-registration-response+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.notif-init+xml": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.pfr": {
	    "source": "iana"
	  },
	  "application/vnd.dvb.service": {
	    "source": "iana",
	    "extensions": ["svc"]
	  },
	  "application/vnd.dxr": {
	    "source": "iana"
	  },
	  "application/vnd.dynageo": {
	    "source": "iana",
	    "extensions": ["geo"]
	  },
	  "application/vnd.dzr": {
	    "source": "iana"
	  },
	  "application/vnd.easykaraoke.cdgdownload": {
	    "source": "iana"
	  },
	  "application/vnd.ecdis-update": {
	    "source": "iana"
	  },
	  "application/vnd.ecowin.chart": {
	    "source": "iana",
	    "extensions": ["mag"]
	  },
	  "application/vnd.ecowin.filerequest": {
	    "source": "iana"
	  },
	  "application/vnd.ecowin.fileupdate": {
	    "source": "iana"
	  },
	  "application/vnd.ecowin.series": {
	    "source": "iana"
	  },
	  "application/vnd.ecowin.seriesrequest": {
	    "source": "iana"
	  },
	  "application/vnd.ecowin.seriesupdate": {
	    "source": "iana"
	  },
	  "application/vnd.emclient.accessrequest+xml": {
	    "source": "iana"
	  },
	  "application/vnd.enliven": {
	    "source": "iana",
	    "extensions": ["nml"]
	  },
	  "application/vnd.enphase.envoy": {
	    "source": "iana"
	  },
	  "application/vnd.eprints.data+xml": {
	    "source": "iana"
	  },
	  "application/vnd.epson.esf": {
	    "source": "iana",
	    "extensions": ["esf"]
	  },
	  "application/vnd.epson.msf": {
	    "source": "iana",
	    "extensions": ["msf"]
	  },
	  "application/vnd.epson.quickanime": {
	    "source": "iana",
	    "extensions": ["qam"]
	  },
	  "application/vnd.epson.salt": {
	    "source": "iana",
	    "extensions": ["slt"]
	  },
	  "application/vnd.epson.ssf": {
	    "source": "iana",
	    "extensions": ["ssf"]
	  },
	  "application/vnd.ericsson.quickcall": {
	    "source": "iana"
	  },
	  "application/vnd.eszigno3+xml": {
	    "source": "iana",
	    "extensions": ["es3","et3"]
	  },
	  "application/vnd.etsi.aoc+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.asic-e+zip": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.asic-s+zip": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.cug+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvcommand+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvdiscovery+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvprofile+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvsad-bc+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvsad-cod+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvsad-npvr+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvservice+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvsync+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.iptvueprofile+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.mcid+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.mheg5": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.overload-control-policy-dataset+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.pstn+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.sci+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.simservs+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.timestamp-token": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.tsl+xml": {
	    "source": "iana"
	  },
	  "application/vnd.etsi.tsl.der": {
	    "source": "iana"
	  },
	  "application/vnd.eudora.data": {
	    "source": "iana"
	  },
	  "application/vnd.ezpix-album": {
	    "source": "iana",
	    "extensions": ["ez2"]
	  },
	  "application/vnd.ezpix-package": {
	    "source": "iana",
	    "extensions": ["ez3"]
	  },
	  "application/vnd.f-secure.mobile": {
	    "source": "iana"
	  },
	  "application/vnd.fastcopy-disk-image": {
	    "source": "iana"
	  },
	  "application/vnd.fdf": {
	    "source": "iana",
	    "extensions": ["fdf"]
	  },
	  "application/vnd.fdsn.mseed": {
	    "source": "iana",
	    "extensions": ["mseed"]
	  },
	  "application/vnd.fdsn.seed": {
	    "source": "iana",
	    "extensions": ["seed","dataless"]
	  },
	  "application/vnd.ffsns": {
	    "source": "iana"
	  },
	  "application/vnd.filmit.zfc": {
	    "source": "iana"
	  },
	  "application/vnd.fints": {
	    "source": "iana"
	  },
	  "application/vnd.firemonkeys.cloudcell": {
	    "source": "iana"
	  },
	  "application/vnd.flographit": {
	    "source": "iana",
	    "extensions": ["gph"]
	  },
	  "application/vnd.fluxtime.clip": {
	    "source": "iana",
	    "extensions": ["ftc"]
	  },
	  "application/vnd.font-fontforge-sfd": {
	    "source": "iana"
	  },
	  "application/vnd.framemaker": {
	    "source": "iana",
	    "extensions": ["fm","frame","maker","book"]
	  },
	  "application/vnd.frogans.fnc": {
	    "source": "iana",
	    "extensions": ["fnc"]
	  },
	  "application/vnd.frogans.ltf": {
	    "source": "iana",
	    "extensions": ["ltf"]
	  },
	  "application/vnd.fsc.weblaunch": {
	    "source": "iana",
	    "extensions": ["fsc"]
	  },
	  "application/vnd.fujitsu.oasys": {
	    "source": "iana",
	    "extensions": ["oas"]
	  },
	  "application/vnd.fujitsu.oasys2": {
	    "source": "iana",
	    "extensions": ["oa2"]
	  },
	  "application/vnd.fujitsu.oasys3": {
	    "source": "iana",
	    "extensions": ["oa3"]
	  },
	  "application/vnd.fujitsu.oasysgp": {
	    "source": "iana",
	    "extensions": ["fg5"]
	  },
	  "application/vnd.fujitsu.oasysprs": {
	    "source": "iana",
	    "extensions": ["bh2"]
	  },
	  "application/vnd.fujixerox.art-ex": {
	    "source": "iana"
	  },
	  "application/vnd.fujixerox.art4": {
	    "source": "iana"
	  },
	  "application/vnd.fujixerox.ddd": {
	    "source": "iana",
	    "extensions": ["ddd"]
	  },
	  "application/vnd.fujixerox.docuworks": {
	    "source": "iana",
	    "extensions": ["xdw"]
	  },
	  "application/vnd.fujixerox.docuworks.binder": {
	    "source": "iana",
	    "extensions": ["xbd"]
	  },
	  "application/vnd.fujixerox.docuworks.container": {
	    "source": "iana"
	  },
	  "application/vnd.fujixerox.hbpl": {
	    "source": "iana"
	  },
	  "application/vnd.fut-misnet": {
	    "source": "iana"
	  },
	  "application/vnd.fuzzysheet": {
	    "source": "iana",
	    "extensions": ["fzs"]
	  },
	  "application/vnd.genomatix.tuxedo": {
	    "source": "iana",
	    "extensions": ["txd"]
	  },
	  "application/vnd.geo+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.geocube+xml": {
	    "source": "iana"
	  },
	  "application/vnd.geogebra.file": {
	    "source": "iana",
	    "extensions": ["ggb"]
	  },
	  "application/vnd.geogebra.tool": {
	    "source": "iana",
	    "extensions": ["ggt"]
	  },
	  "application/vnd.geometry-explorer": {
	    "source": "iana",
	    "extensions": ["gex","gre"]
	  },
	  "application/vnd.geonext": {
	    "source": "iana",
	    "extensions": ["gxt"]
	  },
	  "application/vnd.geoplan": {
	    "source": "iana",
	    "extensions": ["g2w"]
	  },
	  "application/vnd.geospace": {
	    "source": "iana",
	    "extensions": ["g3w"]
	  },
	  "application/vnd.gerber": {
	    "source": "iana"
	  },
	  "application/vnd.globalplatform.card-content-mgt": {
	    "source": "iana"
	  },
	  "application/vnd.globalplatform.card-content-mgt-response": {
	    "source": "iana"
	  },
	  "application/vnd.gmx": {
	    "source": "iana",
	    "extensions": ["gmx"]
	  },
	  "application/vnd.google-apps.document": {
	    "compressible": false,
	    "extensions": ["gdoc"]
	  },
	  "application/vnd.google-apps.presentation": {
	    "compressible": false,
	    "extensions": ["gslides"]
	  },
	  "application/vnd.google-apps.spreadsheet": {
	    "compressible": false,
	    "extensions": ["gsheet"]
	  },
	  "application/vnd.google-earth.kml+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["kml"]
	  },
	  "application/vnd.google-earth.kmz": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["kmz"]
	  },
	  "application/vnd.gov.sk.e-form+xml": {
	    "source": "iana"
	  },
	  "application/vnd.gov.sk.e-form+zip": {
	    "source": "iana"
	  },
	  "application/vnd.gov.sk.xmldatacontainer+xml": {
	    "source": "iana"
	  },
	  "application/vnd.grafeq": {
	    "source": "iana",
	    "extensions": ["gqf","gqs"]
	  },
	  "application/vnd.gridmp": {
	    "source": "iana"
	  },
	  "application/vnd.groove-account": {
	    "source": "iana",
	    "extensions": ["gac"]
	  },
	  "application/vnd.groove-help": {
	    "source": "iana",
	    "extensions": ["ghf"]
	  },
	  "application/vnd.groove-identity-message": {
	    "source": "iana",
	    "extensions": ["gim"]
	  },
	  "application/vnd.groove-injector": {
	    "source": "iana",
	    "extensions": ["grv"]
	  },
	  "application/vnd.groove-tool-message": {
	    "source": "iana",
	    "extensions": ["gtm"]
	  },
	  "application/vnd.groove-tool-template": {
	    "source": "iana",
	    "extensions": ["tpl"]
	  },
	  "application/vnd.groove-vcard": {
	    "source": "iana",
	    "extensions": ["vcg"]
	  },
	  "application/vnd.hal+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.hal+xml": {
	    "source": "iana",
	    "extensions": ["hal"]
	  },
	  "application/vnd.handheld-entertainment+xml": {
	    "source": "iana",
	    "extensions": ["zmm"]
	  },
	  "application/vnd.hbci": {
	    "source": "iana",
	    "extensions": ["hbci"]
	  },
	  "application/vnd.hcl-bireports": {
	    "source": "iana"
	  },
	  "application/vnd.heroku+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.hhe.lesson-player": {
	    "source": "iana",
	    "extensions": ["les"]
	  },
	  "application/vnd.hp-hpgl": {
	    "source": "iana",
	    "extensions": ["hpgl"]
	  },
	  "application/vnd.hp-hpid": {
	    "source": "iana",
	    "extensions": ["hpid"]
	  },
	  "application/vnd.hp-hps": {
	    "source": "iana",
	    "extensions": ["hps"]
	  },
	  "application/vnd.hp-jlyt": {
	    "source": "iana",
	    "extensions": ["jlt"]
	  },
	  "application/vnd.hp-pcl": {
	    "source": "iana",
	    "extensions": ["pcl"]
	  },
	  "application/vnd.hp-pclxl": {
	    "source": "iana",
	    "extensions": ["pclxl"]
	  },
	  "application/vnd.httphone": {
	    "source": "iana"
	  },
	  "application/vnd.hydrostatix.sof-data": {
	    "source": "iana",
	    "extensions": ["sfd-hdstx"]
	  },
	  "application/vnd.hyperdrive+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.hzn-3d-crossword": {
	    "source": "iana"
	  },
	  "application/vnd.ibm.afplinedata": {
	    "source": "iana"
	  },
	  "application/vnd.ibm.electronic-media": {
	    "source": "iana"
	  },
	  "application/vnd.ibm.minipay": {
	    "source": "iana",
	    "extensions": ["mpy"]
	  },
	  "application/vnd.ibm.modcap": {
	    "source": "iana",
	    "extensions": ["afp","listafp","list3820"]
	  },
	  "application/vnd.ibm.rights-management": {
	    "source": "iana",
	    "extensions": ["irm"]
	  },
	  "application/vnd.ibm.secure-container": {
	    "source": "iana",
	    "extensions": ["sc"]
	  },
	  "application/vnd.iccprofile": {
	    "source": "iana",
	    "extensions": ["icc","icm"]
	  },
	  "application/vnd.ieee.1905": {
	    "source": "iana"
	  },
	  "application/vnd.igloader": {
	    "source": "iana",
	    "extensions": ["igl"]
	  },
	  "application/vnd.immervision-ivp": {
	    "source": "iana",
	    "extensions": ["ivp"]
	  },
	  "application/vnd.immervision-ivu": {
	    "source": "iana",
	    "extensions": ["ivu"]
	  },
	  "application/vnd.ims.imsccv1p1": {
	    "source": "iana"
	  },
	  "application/vnd.ims.imsccv1p2": {
	    "source": "iana"
	  },
	  "application/vnd.ims.imsccv1p3": {
	    "source": "iana"
	  },
	  "application/vnd.ims.lis.v2.result+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ims.lti.v2.toolproxy+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ims.lti.v2.toolproxy.id+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ims.lti.v2.toolsettings+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.ims.lti.v2.toolsettings.simple+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.informedcontrol.rms+xml": {
	    "source": "iana"
	  },
	  "application/vnd.informix-visionary": {
	    "source": "iana"
	  },
	  "application/vnd.infotech.project": {
	    "source": "iana"
	  },
	  "application/vnd.infotech.project+xml": {
	    "source": "iana"
	  },
	  "application/vnd.innopath.wamp.notification": {
	    "source": "iana"
	  },
	  "application/vnd.insors.igm": {
	    "source": "iana",
	    "extensions": ["igm"]
	  },
	  "application/vnd.intercon.formnet": {
	    "source": "iana",
	    "extensions": ["xpw","xpx"]
	  },
	  "application/vnd.intergeo": {
	    "source": "iana",
	    "extensions": ["i2g"]
	  },
	  "application/vnd.intertrust.digibox": {
	    "source": "iana"
	  },
	  "application/vnd.intertrust.nncp": {
	    "source": "iana"
	  },
	  "application/vnd.intu.qbo": {
	    "source": "iana",
	    "extensions": ["qbo"]
	  },
	  "application/vnd.intu.qfx": {
	    "source": "iana",
	    "extensions": ["qfx"]
	  },
	  "application/vnd.iptc.g2.catalogitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.conceptitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.knowledgeitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.newsitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.newsmessage+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.packageitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.iptc.g2.planningitem+xml": {
	    "source": "iana"
	  },
	  "application/vnd.ipunplugged.rcprofile": {
	    "source": "iana",
	    "extensions": ["rcprofile"]
	  },
	  "application/vnd.irepository.package+xml": {
	    "source": "iana",
	    "extensions": ["irp"]
	  },
	  "application/vnd.is-xpr": {
	    "source": "iana",
	    "extensions": ["xpr"]
	  },
	  "application/vnd.isac.fcs": {
	    "source": "iana",
	    "extensions": ["fcs"]
	  },
	  "application/vnd.jam": {
	    "source": "iana",
	    "extensions": ["jam"]
	  },
	  "application/vnd.japannet-directory-service": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-jpnstore-wakeup": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-payment-wakeup": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-registration": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-registration-wakeup": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-setstore-wakeup": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-verification": {
	    "source": "iana"
	  },
	  "application/vnd.japannet-verification-wakeup": {
	    "source": "iana"
	  },
	  "application/vnd.jcp.javame.midlet-rms": {
	    "source": "iana",
	    "extensions": ["rms"]
	  },
	  "application/vnd.jisp": {
	    "source": "iana",
	    "extensions": ["jisp"]
	  },
	  "application/vnd.joost.joda-archive": {
	    "source": "iana",
	    "extensions": ["joda"]
	  },
	  "application/vnd.jsk.isdn-ngn": {
	    "source": "iana"
	  },
	  "application/vnd.kahootz": {
	    "source": "iana",
	    "extensions": ["ktz","ktr"]
	  },
	  "application/vnd.kde.karbon": {
	    "source": "iana",
	    "extensions": ["karbon"]
	  },
	  "application/vnd.kde.kchart": {
	    "source": "iana",
	    "extensions": ["chrt"]
	  },
	  "application/vnd.kde.kformula": {
	    "source": "iana",
	    "extensions": ["kfo"]
	  },
	  "application/vnd.kde.kivio": {
	    "source": "iana",
	    "extensions": ["flw"]
	  },
	  "application/vnd.kde.kontour": {
	    "source": "iana",
	    "extensions": ["kon"]
	  },
	  "application/vnd.kde.kpresenter": {
	    "source": "iana",
	    "extensions": ["kpr","kpt"]
	  },
	  "application/vnd.kde.kspread": {
	    "source": "iana",
	    "extensions": ["ksp"]
	  },
	  "application/vnd.kde.kword": {
	    "source": "iana",
	    "extensions": ["kwd","kwt"]
	  },
	  "application/vnd.kenameaapp": {
	    "source": "iana",
	    "extensions": ["htke"]
	  },
	  "application/vnd.kidspiration": {
	    "source": "iana",
	    "extensions": ["kia"]
	  },
	  "application/vnd.kinar": {
	    "source": "iana",
	    "extensions": ["kne","knp"]
	  },
	  "application/vnd.koan": {
	    "source": "iana",
	    "extensions": ["skp","skd","skt","skm"]
	  },
	  "application/vnd.kodak-descriptor": {
	    "source": "iana",
	    "extensions": ["sse"]
	  },
	  "application/vnd.las.las+xml": {
	    "source": "iana",
	    "extensions": ["lasxml"]
	  },
	  "application/vnd.liberty-request+xml": {
	    "source": "iana"
	  },
	  "application/vnd.llamagraphics.life-balance.desktop": {
	    "source": "iana",
	    "extensions": ["lbd"]
	  },
	  "application/vnd.llamagraphics.life-balance.exchange+xml": {
	    "source": "iana",
	    "extensions": ["lbe"]
	  },
	  "application/vnd.lotus-1-2-3": {
	    "source": "iana",
	    "extensions": ["123"]
	  },
	  "application/vnd.lotus-approach": {
	    "source": "iana",
	    "extensions": ["apr"]
	  },
	  "application/vnd.lotus-freelance": {
	    "source": "iana",
	    "extensions": ["pre"]
	  },
	  "application/vnd.lotus-notes": {
	    "source": "iana",
	    "extensions": ["nsf"]
	  },
	  "application/vnd.lotus-organizer": {
	    "source": "iana",
	    "extensions": ["org"]
	  },
	  "application/vnd.lotus-screencam": {
	    "source": "iana",
	    "extensions": ["scm"]
	  },
	  "application/vnd.lotus-wordpro": {
	    "source": "iana",
	    "extensions": ["lwp"]
	  },
	  "application/vnd.macports.portpkg": {
	    "source": "iana",
	    "extensions": ["portpkg"]
	  },
	  "application/vnd.mapbox-vector-tile": {
	    "source": "iana"
	  },
	  "application/vnd.marlin.drm.actiontoken+xml": {
	    "source": "iana"
	  },
	  "application/vnd.marlin.drm.conftoken+xml": {
	    "source": "iana"
	  },
	  "application/vnd.marlin.drm.license+xml": {
	    "source": "iana"
	  },
	  "application/vnd.marlin.drm.mdcf": {
	    "source": "iana"
	  },
	  "application/vnd.mason+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.maxmind.maxmind-db": {
	    "source": "iana"
	  },
	  "application/vnd.mcd": {
	    "source": "iana",
	    "extensions": ["mcd"]
	  },
	  "application/vnd.medcalcdata": {
	    "source": "iana",
	    "extensions": ["mc1"]
	  },
	  "application/vnd.mediastation.cdkey": {
	    "source": "iana",
	    "extensions": ["cdkey"]
	  },
	  "application/vnd.meridian-slingshot": {
	    "source": "iana"
	  },
	  "application/vnd.mfer": {
	    "source": "iana",
	    "extensions": ["mwf"]
	  },
	  "application/vnd.mfmp": {
	    "source": "iana",
	    "extensions": ["mfm"]
	  },
	  "application/vnd.micro+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.micrografx.flo": {
	    "source": "iana",
	    "extensions": ["flo"]
	  },
	  "application/vnd.micrografx.igx": {
	    "source": "iana",
	    "extensions": ["igx"]
	  },
	  "application/vnd.microsoft.portable-executable": {
	    "source": "iana"
	  },
	  "application/vnd.miele+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.mif": {
	    "source": "iana",
	    "extensions": ["mif"]
	  },
	  "application/vnd.minisoft-hp3000-save": {
	    "source": "iana"
	  },
	  "application/vnd.mitsubishi.misty-guard.trustweb": {
	    "source": "iana"
	  },
	  "application/vnd.mobius.daf": {
	    "source": "iana",
	    "extensions": ["daf"]
	  },
	  "application/vnd.mobius.dis": {
	    "source": "iana",
	    "extensions": ["dis"]
	  },
	  "application/vnd.mobius.mbk": {
	    "source": "iana",
	    "extensions": ["mbk"]
	  },
	  "application/vnd.mobius.mqy": {
	    "source": "iana",
	    "extensions": ["mqy"]
	  },
	  "application/vnd.mobius.msl": {
	    "source": "iana",
	    "extensions": ["msl"]
	  },
	  "application/vnd.mobius.plc": {
	    "source": "iana",
	    "extensions": ["plc"]
	  },
	  "application/vnd.mobius.txf": {
	    "source": "iana",
	    "extensions": ["txf"]
	  },
	  "application/vnd.mophun.application": {
	    "source": "iana",
	    "extensions": ["mpn"]
	  },
	  "application/vnd.mophun.certificate": {
	    "source": "iana",
	    "extensions": ["mpc"]
	  },
	  "application/vnd.motorola.flexsuite": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.adsi": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.fis": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.gotap": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.kmr": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.ttc": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.flexsuite.wem": {
	    "source": "iana"
	  },
	  "application/vnd.motorola.iprm": {
	    "source": "iana"
	  },
	  "application/vnd.mozilla.xul+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["xul"]
	  },
	  "application/vnd.ms-3mfdocument": {
	    "source": "iana"
	  },
	  "application/vnd.ms-artgalry": {
	    "source": "iana",
	    "extensions": ["cil"]
	  },
	  "application/vnd.ms-asf": {
	    "source": "iana"
	  },
	  "application/vnd.ms-cab-compressed": {
	    "source": "iana",
	    "extensions": ["cab"]
	  },
	  "application/vnd.ms-color.iccprofile": {
	    "source": "apache"
	  },
	  "application/vnd.ms-excel": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["xls","xlm","xla","xlc","xlt","xlw"]
	  },
	  "application/vnd.ms-excel.addin.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["xlam"]
	  },
	  "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["xlsb"]
	  },
	  "application/vnd.ms-excel.sheet.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["xlsm"]
	  },
	  "application/vnd.ms-excel.template.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["xltm"]
	  },
	  "application/vnd.ms-fontobject": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["eot"]
	  },
	  "application/vnd.ms-htmlhelp": {
	    "source": "iana",
	    "extensions": ["chm"]
	  },
	  "application/vnd.ms-ims": {
	    "source": "iana",
	    "extensions": ["ims"]
	  },
	  "application/vnd.ms-lrm": {
	    "source": "iana",
	    "extensions": ["lrm"]
	  },
	  "application/vnd.ms-office.activex+xml": {
	    "source": "iana"
	  },
	  "application/vnd.ms-officetheme": {
	    "source": "iana",
	    "extensions": ["thmx"]
	  },
	  "application/vnd.ms-opentype": {
	    "source": "apache",
	    "compressible": true
	  },
	  "application/vnd.ms-package.obfuscated-opentype": {
	    "source": "apache"
	  },
	  "application/vnd.ms-pki.seccat": {
	    "source": "apache",
	    "extensions": ["cat"]
	  },
	  "application/vnd.ms-pki.stl": {
	    "source": "apache",
	    "extensions": ["stl"]
	  },
	  "application/vnd.ms-playready.initiator+xml": {
	    "source": "iana"
	  },
	  "application/vnd.ms-powerpoint": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["ppt","pps","pot"]
	  },
	  "application/vnd.ms-powerpoint.addin.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["ppam"]
	  },
	  "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["pptm"]
	  },
	  "application/vnd.ms-powerpoint.slide.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["sldm"]
	  },
	  "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["ppsm"]
	  },
	  "application/vnd.ms-powerpoint.template.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["potm"]
	  },
	  "application/vnd.ms-printdevicecapabilities+xml": {
	    "source": "iana"
	  },
	  "application/vnd.ms-printing.printticket+xml": {
	    "source": "apache"
	  },
	  "application/vnd.ms-project": {
	    "source": "iana",
	    "extensions": ["mpp","mpt"]
	  },
	  "application/vnd.ms-tnef": {
	    "source": "iana"
	  },
	  "application/vnd.ms-windows.devicepairing": {
	    "source": "iana"
	  },
	  "application/vnd.ms-windows.nwprinting.oob": {
	    "source": "iana"
	  },
	  "application/vnd.ms-windows.printerpairing": {
	    "source": "iana"
	  },
	  "application/vnd.ms-windows.wsd.oob": {
	    "source": "iana"
	  },
	  "application/vnd.ms-wmdrm.lic-chlg-req": {
	    "source": "iana"
	  },
	  "application/vnd.ms-wmdrm.lic-resp": {
	    "source": "iana"
	  },
	  "application/vnd.ms-wmdrm.meter-chlg-req": {
	    "source": "iana"
	  },
	  "application/vnd.ms-wmdrm.meter-resp": {
	    "source": "iana"
	  },
	  "application/vnd.ms-word.document.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["docm"]
	  },
	  "application/vnd.ms-word.template.macroenabled.12": {
	    "source": "iana",
	    "extensions": ["dotm"]
	  },
	  "application/vnd.ms-works": {
	    "source": "iana",
	    "extensions": ["wps","wks","wcm","wdb"]
	  },
	  "application/vnd.ms-wpl": {
	    "source": "iana",
	    "extensions": ["wpl"]
	  },
	  "application/vnd.ms-xpsdocument": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["xps"]
	  },
	  "application/vnd.msa-disk-image": {
	    "source": "iana"
	  },
	  "application/vnd.mseq": {
	    "source": "iana",
	    "extensions": ["mseq"]
	  },
	  "application/vnd.msign": {
	    "source": "iana"
	  },
	  "application/vnd.multiad.creator": {
	    "source": "iana"
	  },
	  "application/vnd.multiad.creator.cif": {
	    "source": "iana"
	  },
	  "application/vnd.music-niff": {
	    "source": "iana"
	  },
	  "application/vnd.musician": {
	    "source": "iana",
	    "extensions": ["mus"]
	  },
	  "application/vnd.muvee.style": {
	    "source": "iana",
	    "extensions": ["msty"]
	  },
	  "application/vnd.mynfc": {
	    "source": "iana",
	    "extensions": ["taglet"]
	  },
	  "application/vnd.ncd.control": {
	    "source": "iana"
	  },
	  "application/vnd.ncd.reference": {
	    "source": "iana"
	  },
	  "application/vnd.nervana": {
	    "source": "iana"
	  },
	  "application/vnd.netfpx": {
	    "source": "iana"
	  },
	  "application/vnd.neurolanguage.nlu": {
	    "source": "iana",
	    "extensions": ["nlu"]
	  },
	  "application/vnd.nintendo.nitro.rom": {
	    "source": "iana"
	  },
	  "application/vnd.nintendo.snes.rom": {
	    "source": "iana"
	  },
	  "application/vnd.nitf": {
	    "source": "iana",
	    "extensions": ["ntf","nitf"]
	  },
	  "application/vnd.noblenet-directory": {
	    "source": "iana",
	    "extensions": ["nnd"]
	  },
	  "application/vnd.noblenet-sealer": {
	    "source": "iana",
	    "extensions": ["nns"]
	  },
	  "application/vnd.noblenet-web": {
	    "source": "iana",
	    "extensions": ["nnw"]
	  },
	  "application/vnd.nokia.catalogs": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.conml+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.conml+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.iptv.config+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.isds-radio-presets": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.landmark+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.landmark+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.landmarkcollection+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.n-gage.ac+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.n-gage.data": {
	    "source": "iana",
	    "extensions": ["ngdat"]
	  },
	  "application/vnd.nokia.n-gage.symbian.install": {
	    "source": "iana",
	    "extensions": ["n-gage"]
	  },
	  "application/vnd.nokia.ncd": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.pcd+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.pcd+xml": {
	    "source": "iana"
	  },
	  "application/vnd.nokia.radio-preset": {
	    "source": "iana",
	    "extensions": ["rpst"]
	  },
	  "application/vnd.nokia.radio-presets": {
	    "source": "iana",
	    "extensions": ["rpss"]
	  },
	  "application/vnd.novadigm.edm": {
	    "source": "iana",
	    "extensions": ["edm"]
	  },
	  "application/vnd.novadigm.edx": {
	    "source": "iana",
	    "extensions": ["edx"]
	  },
	  "application/vnd.novadigm.ext": {
	    "source": "iana",
	    "extensions": ["ext"]
	  },
	  "application/vnd.ntt-local.content-share": {
	    "source": "iana"
	  },
	  "application/vnd.ntt-local.file-transfer": {
	    "source": "iana"
	  },
	  "application/vnd.ntt-local.ogw_remote-access": {
	    "source": "iana"
	  },
	  "application/vnd.ntt-local.sip-ta_remote": {
	    "source": "iana"
	  },
	  "application/vnd.ntt-local.sip-ta_tcp_stream": {
	    "source": "iana"
	  },
	  "application/vnd.oasis.opendocument.chart": {
	    "source": "iana",
	    "extensions": ["odc"]
	  },
	  "application/vnd.oasis.opendocument.chart-template": {
	    "source": "iana",
	    "extensions": ["otc"]
	  },
	  "application/vnd.oasis.opendocument.database": {
	    "source": "iana",
	    "extensions": ["odb"]
	  },
	  "application/vnd.oasis.opendocument.formula": {
	    "source": "iana",
	    "extensions": ["odf"]
	  },
	  "application/vnd.oasis.opendocument.formula-template": {
	    "source": "iana",
	    "extensions": ["odft"]
	  },
	  "application/vnd.oasis.opendocument.graphics": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["odg"]
	  },
	  "application/vnd.oasis.opendocument.graphics-template": {
	    "source": "iana",
	    "extensions": ["otg"]
	  },
	  "application/vnd.oasis.opendocument.image": {
	    "source": "iana",
	    "extensions": ["odi"]
	  },
	  "application/vnd.oasis.opendocument.image-template": {
	    "source": "iana",
	    "extensions": ["oti"]
	  },
	  "application/vnd.oasis.opendocument.presentation": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["odp"]
	  },
	  "application/vnd.oasis.opendocument.presentation-template": {
	    "source": "iana",
	    "extensions": ["otp"]
	  },
	  "application/vnd.oasis.opendocument.spreadsheet": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["ods"]
	  },
	  "application/vnd.oasis.opendocument.spreadsheet-template": {
	    "source": "iana",
	    "extensions": ["ots"]
	  },
	  "application/vnd.oasis.opendocument.text": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["odt"]
	  },
	  "application/vnd.oasis.opendocument.text-master": {
	    "source": "iana",
	    "extensions": ["odm"]
	  },
	  "application/vnd.oasis.opendocument.text-template": {
	    "source": "iana",
	    "extensions": ["ott"]
	  },
	  "application/vnd.oasis.opendocument.text-web": {
	    "source": "iana",
	    "extensions": ["oth"]
	  },
	  "application/vnd.obn": {
	    "source": "iana"
	  },
	  "application/vnd.oftn.l10n+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.oipf.contentaccessdownload+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.contentaccessstreaming+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.cspg-hexbinary": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.dae.svg+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.dae.xhtml+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.mippvcontrolmessage+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.pae.gem": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.spdiscovery+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.spdlist+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.ueprofile+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oipf.userprofile+xml": {
	    "source": "iana"
	  },
	  "application/vnd.olpc-sugar": {
	    "source": "iana",
	    "extensions": ["xo"]
	  },
	  "application/vnd.oma-scws-config": {
	    "source": "iana"
	  },
	  "application/vnd.oma-scws-http-request": {
	    "source": "iana"
	  },
	  "application/vnd.oma-scws-http-response": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.drm-trigger+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.imd+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.ltkm": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.notification+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.provisioningtrigger": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.sgboot": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.sgdd+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.sgdu": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.simple-symbol-container": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.smartcard-trigger+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.sprov+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.bcast.stkm": {
	    "source": "iana"
	  },
	  "application/vnd.oma.cab-address-book+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.cab-feature-handler+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.cab-pcc+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.cab-subs-invite+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.cab-user-prefs+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.dcd": {
	    "source": "iana"
	  },
	  "application/vnd.oma.dcdc": {
	    "source": "iana"
	  },
	  "application/vnd.oma.dd2+xml": {
	    "source": "iana",
	    "extensions": ["dd2"]
	  },
	  "application/vnd.oma.drm.risd+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.group-usage-list+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.pal+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.poc.detailed-progress-report+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.poc.final-report+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.poc.groups+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.poc.invocation-descriptor+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.poc.optimized-progress-report+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.push": {
	    "source": "iana"
	  },
	  "application/vnd.oma.scidm.messages+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oma.xcap-directory+xml": {
	    "source": "iana"
	  },
	  "application/vnd.omads-email+xml": {
	    "source": "iana"
	  },
	  "application/vnd.omads-file+xml": {
	    "source": "iana"
	  },
	  "application/vnd.omads-folder+xml": {
	    "source": "iana"
	  },
	  "application/vnd.omaloc-supl-init": {
	    "source": "iana"
	  },
	  "application/vnd.openblox.game+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openblox.game-binary": {
	    "source": "iana"
	  },
	  "application/vnd.openeye.oeb": {
	    "source": "iana"
	  },
	  "application/vnd.openofficeorg.extension": {
	    "source": "apache",
	    "extensions": ["oxt"]
	  },
	  "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawing+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml-template": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["pptx"]
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slide": {
	    "source": "iana",
	    "extensions": ["sldx"]
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
	    "source": "iana",
	    "extensions": ["ppsx"]
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.template": {
	    "source": "apache",
	    "extensions": ["potx"]
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["xlsx"]
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
	    "source": "apache",
	    "extensions": ["xltx"]
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.theme+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.vmldrawing": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["docx"]
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
	    "source": "apache",
	    "extensions": ["dotx"]
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-package.core-properties+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
	    "source": "iana"
	  },
	  "application/vnd.openxmlformats-package.relationships+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oracle.resource+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.orange.indata": {
	    "source": "iana"
	  },
	  "application/vnd.osa.netdeploy": {
	    "source": "iana"
	  },
	  "application/vnd.osgeo.mapguide.package": {
	    "source": "iana",
	    "extensions": ["mgp"]
	  },
	  "application/vnd.osgi.bundle": {
	    "source": "iana"
	  },
	  "application/vnd.osgi.dp": {
	    "source": "iana",
	    "extensions": ["dp"]
	  },
	  "application/vnd.osgi.subsystem": {
	    "source": "iana",
	    "extensions": ["esa"]
	  },
	  "application/vnd.otps.ct-kip+xml": {
	    "source": "iana"
	  },
	  "application/vnd.oxli.countgraph": {
	    "source": "iana"
	  },
	  "application/vnd.pagerduty+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.palm": {
	    "source": "iana",
	    "extensions": ["pdb","pqa","oprc"]
	  },
	  "application/vnd.panoply": {
	    "source": "iana"
	  },
	  "application/vnd.paos+xml": {
	    "source": "iana"
	  },
	  "application/vnd.paos.xml": {
	    "source": "apache"
	  },
	  "application/vnd.pawaafile": {
	    "source": "iana",
	    "extensions": ["paw"]
	  },
	  "application/vnd.pcos": {
	    "source": "iana"
	  },
	  "application/vnd.pg.format": {
	    "source": "iana",
	    "extensions": ["str"]
	  },
	  "application/vnd.pg.osasli": {
	    "source": "iana",
	    "extensions": ["ei6"]
	  },
	  "application/vnd.piaccess.application-licence": {
	    "source": "iana"
	  },
	  "application/vnd.picsel": {
	    "source": "iana",
	    "extensions": ["efif"]
	  },
	  "application/vnd.pmi.widget": {
	    "source": "iana",
	    "extensions": ["wg"]
	  },
	  "application/vnd.poc.group-advertisement+xml": {
	    "source": "iana"
	  },
	  "application/vnd.pocketlearn": {
	    "source": "iana",
	    "extensions": ["plf"]
	  },
	  "application/vnd.powerbuilder6": {
	    "source": "iana",
	    "extensions": ["pbd"]
	  },
	  "application/vnd.powerbuilder6-s": {
	    "source": "iana"
	  },
	  "application/vnd.powerbuilder7": {
	    "source": "iana"
	  },
	  "application/vnd.powerbuilder7-s": {
	    "source": "iana"
	  },
	  "application/vnd.powerbuilder75": {
	    "source": "iana"
	  },
	  "application/vnd.powerbuilder75-s": {
	    "source": "iana"
	  },
	  "application/vnd.preminet": {
	    "source": "iana"
	  },
	  "application/vnd.previewsystems.box": {
	    "source": "iana",
	    "extensions": ["box"]
	  },
	  "application/vnd.proteus.magazine": {
	    "source": "iana",
	    "extensions": ["mgz"]
	  },
	  "application/vnd.publishare-delta-tree": {
	    "source": "iana",
	    "extensions": ["qps"]
	  },
	  "application/vnd.pvi.ptid1": {
	    "source": "iana",
	    "extensions": ["ptid"]
	  },
	  "application/vnd.pwg-multiplexed": {
	    "source": "iana"
	  },
	  "application/vnd.pwg-xhtml-print+xml": {
	    "source": "iana"
	  },
	  "application/vnd.qualcomm.brew-app-res": {
	    "source": "iana"
	  },
	  "application/vnd.quark.quarkxpress": {
	    "source": "iana",
	    "extensions": ["qxd","qxt","qwd","qwt","qxl","qxb"]
	  },
	  "application/vnd.quobject-quoxdocument": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.moml+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-audit+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-audit-conf+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-audit-conn+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-audit-dialog+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-audit-stream+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-conf+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-base+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-fax-detect+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-group+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-speech+xml": {
	    "source": "iana"
	  },
	  "application/vnd.radisys.msml-dialog-transform+xml": {
	    "source": "iana"
	  },
	  "application/vnd.rainstor.data": {
	    "source": "iana"
	  },
	  "application/vnd.rapid": {
	    "source": "iana"
	  },
	  "application/vnd.realvnc.bed": {
	    "source": "iana",
	    "extensions": ["bed"]
	  },
	  "application/vnd.recordare.musicxml": {
	    "source": "iana",
	    "extensions": ["mxl"]
	  },
	  "application/vnd.recordare.musicxml+xml": {
	    "source": "iana",
	    "extensions": ["musicxml"]
	  },
	  "application/vnd.renlearn.rlprint": {
	    "source": "iana"
	  },
	  "application/vnd.rig.cryptonote": {
	    "source": "iana",
	    "extensions": ["cryptonote"]
	  },
	  "application/vnd.rim.cod": {
	    "source": "apache",
	    "extensions": ["cod"]
	  },
	  "application/vnd.rn-realmedia": {
	    "source": "apache",
	    "extensions": ["rm"]
	  },
	  "application/vnd.rn-realmedia-vbr": {
	    "source": "apache",
	    "extensions": ["rmvb"]
	  },
	  "application/vnd.route66.link66+xml": {
	    "source": "iana",
	    "extensions": ["link66"]
	  },
	  "application/vnd.rs-274x": {
	    "source": "iana"
	  },
	  "application/vnd.ruckus.download": {
	    "source": "iana"
	  },
	  "application/vnd.s3sms": {
	    "source": "iana"
	  },
	  "application/vnd.sailingtracker.track": {
	    "source": "iana",
	    "extensions": ["st"]
	  },
	  "application/vnd.sbm.cid": {
	    "source": "iana"
	  },
	  "application/vnd.sbm.mid2": {
	    "source": "iana"
	  },
	  "application/vnd.scribus": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.3df": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.csf": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.doc": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.eml": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.mht": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.net": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.ppt": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.tiff": {
	    "source": "iana"
	  },
	  "application/vnd.sealed.xls": {
	    "source": "iana"
	  },
	  "application/vnd.sealedmedia.softseal.html": {
	    "source": "iana"
	  },
	  "application/vnd.sealedmedia.softseal.pdf": {
	    "source": "iana"
	  },
	  "application/vnd.seemail": {
	    "source": "iana",
	    "extensions": ["see"]
	  },
	  "application/vnd.sema": {
	    "source": "iana",
	    "extensions": ["sema"]
	  },
	  "application/vnd.semd": {
	    "source": "iana",
	    "extensions": ["semd"]
	  },
	  "application/vnd.semf": {
	    "source": "iana",
	    "extensions": ["semf"]
	  },
	  "application/vnd.shana.informed.formdata": {
	    "source": "iana",
	    "extensions": ["ifm"]
	  },
	  "application/vnd.shana.informed.formtemplate": {
	    "source": "iana",
	    "extensions": ["itp"]
	  },
	  "application/vnd.shana.informed.interchange": {
	    "source": "iana",
	    "extensions": ["iif"]
	  },
	  "application/vnd.shana.informed.package": {
	    "source": "iana",
	    "extensions": ["ipk"]
	  },
	  "application/vnd.simtech-mindmapper": {
	    "source": "iana",
	    "extensions": ["twd","twds"]
	  },
	  "application/vnd.siren+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.smaf": {
	    "source": "iana",
	    "extensions": ["mmf"]
	  },
	  "application/vnd.smart.notebook": {
	    "source": "iana"
	  },
	  "application/vnd.smart.teacher": {
	    "source": "iana",
	    "extensions": ["teacher"]
	  },
	  "application/vnd.software602.filler.form+xml": {
	    "source": "iana"
	  },
	  "application/vnd.software602.filler.form-xml-zip": {
	    "source": "iana"
	  },
	  "application/vnd.solent.sdkm+xml": {
	    "source": "iana",
	    "extensions": ["sdkm","sdkd"]
	  },
	  "application/vnd.spotfire.dxp": {
	    "source": "iana",
	    "extensions": ["dxp"]
	  },
	  "application/vnd.spotfire.sfs": {
	    "source": "iana",
	    "extensions": ["sfs"]
	  },
	  "application/vnd.sss-cod": {
	    "source": "iana"
	  },
	  "application/vnd.sss-dtf": {
	    "source": "iana"
	  },
	  "application/vnd.sss-ntf": {
	    "source": "iana"
	  },
	  "application/vnd.stardivision.calc": {
	    "source": "apache",
	    "extensions": ["sdc"]
	  },
	  "application/vnd.stardivision.draw": {
	    "source": "apache",
	    "extensions": ["sda"]
	  },
	  "application/vnd.stardivision.impress": {
	    "source": "apache",
	    "extensions": ["sdd"]
	  },
	  "application/vnd.stardivision.math": {
	    "source": "apache",
	    "extensions": ["smf"]
	  },
	  "application/vnd.stardivision.writer": {
	    "source": "apache",
	    "extensions": ["sdw","vor"]
	  },
	  "application/vnd.stardivision.writer-global": {
	    "source": "apache",
	    "extensions": ["sgl"]
	  },
	  "application/vnd.stepmania.package": {
	    "source": "iana",
	    "extensions": ["smzip"]
	  },
	  "application/vnd.stepmania.stepchart": {
	    "source": "iana",
	    "extensions": ["sm"]
	  },
	  "application/vnd.street-stream": {
	    "source": "iana"
	  },
	  "application/vnd.sun.wadl+xml": {
	    "source": "iana"
	  },
	  "application/vnd.sun.xml.calc": {
	    "source": "apache",
	    "extensions": ["sxc"]
	  },
	  "application/vnd.sun.xml.calc.template": {
	    "source": "apache",
	    "extensions": ["stc"]
	  },
	  "application/vnd.sun.xml.draw": {
	    "source": "apache",
	    "extensions": ["sxd"]
	  },
	  "application/vnd.sun.xml.draw.template": {
	    "source": "apache",
	    "extensions": ["std"]
	  },
	  "application/vnd.sun.xml.impress": {
	    "source": "apache",
	    "extensions": ["sxi"]
	  },
	  "application/vnd.sun.xml.impress.template": {
	    "source": "apache",
	    "extensions": ["sti"]
	  },
	  "application/vnd.sun.xml.math": {
	    "source": "apache",
	    "extensions": ["sxm"]
	  },
	  "application/vnd.sun.xml.writer": {
	    "source": "apache",
	    "extensions": ["sxw"]
	  },
	  "application/vnd.sun.xml.writer.global": {
	    "source": "apache",
	    "extensions": ["sxg"]
	  },
	  "application/vnd.sun.xml.writer.template": {
	    "source": "apache",
	    "extensions": ["stw"]
	  },
	  "application/vnd.sus-calendar": {
	    "source": "iana",
	    "extensions": ["sus","susp"]
	  },
	  "application/vnd.svd": {
	    "source": "iana",
	    "extensions": ["svd"]
	  },
	  "application/vnd.swiftview-ics": {
	    "source": "iana"
	  },
	  "application/vnd.symbian.install": {
	    "source": "apache",
	    "extensions": ["sis","sisx"]
	  },
	  "application/vnd.syncml+xml": {
	    "source": "iana",
	    "extensions": ["xsm"]
	  },
	  "application/vnd.syncml.dm+wbxml": {
	    "source": "iana",
	    "extensions": ["bdm"]
	  },
	  "application/vnd.syncml.dm+xml": {
	    "source": "iana",
	    "extensions": ["xdm"]
	  },
	  "application/vnd.syncml.dm.notification": {
	    "source": "iana"
	  },
	  "application/vnd.syncml.dmddf+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.syncml.dmddf+xml": {
	    "source": "iana"
	  },
	  "application/vnd.syncml.dmtnds+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.syncml.dmtnds+xml": {
	    "source": "iana"
	  },
	  "application/vnd.syncml.ds.notification": {
	    "source": "iana"
	  },
	  "application/vnd.tao.intent-module-archive": {
	    "source": "iana",
	    "extensions": ["tao"]
	  },
	  "application/vnd.tcpdump.pcap": {
	    "source": "iana",
	    "extensions": ["pcap","cap","dmp"]
	  },
	  "application/vnd.tmd.mediaflex.api+xml": {
	    "source": "iana"
	  },
	  "application/vnd.tml": {
	    "source": "iana"
	  },
	  "application/vnd.tmobile-livetv": {
	    "source": "iana",
	    "extensions": ["tmo"]
	  },
	  "application/vnd.trid.tpt": {
	    "source": "iana",
	    "extensions": ["tpt"]
	  },
	  "application/vnd.triscape.mxs": {
	    "source": "iana",
	    "extensions": ["mxs"]
	  },
	  "application/vnd.trueapp": {
	    "source": "iana",
	    "extensions": ["tra"]
	  },
	  "application/vnd.truedoc": {
	    "source": "iana"
	  },
	  "application/vnd.ubisoft.webplayer": {
	    "source": "iana"
	  },
	  "application/vnd.ufdl": {
	    "source": "iana",
	    "extensions": ["ufd","ufdl"]
	  },
	  "application/vnd.uiq.theme": {
	    "source": "iana",
	    "extensions": ["utz"]
	  },
	  "application/vnd.umajin": {
	    "source": "iana",
	    "extensions": ["umj"]
	  },
	  "application/vnd.unity": {
	    "source": "iana",
	    "extensions": ["unityweb"]
	  },
	  "application/vnd.uoml+xml": {
	    "source": "iana",
	    "extensions": ["uoml"]
	  },
	  "application/vnd.uplanet.alert": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.alert-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.bearer-choice": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.bearer-choice-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.cacheop": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.cacheop-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.channel": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.channel-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.list": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.list-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.listcmd": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.listcmd-wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.uplanet.signal": {
	    "source": "iana"
	  },
	  "application/vnd.uri-map": {
	    "source": "iana"
	  },
	  "application/vnd.valve.source.material": {
	    "source": "iana"
	  },
	  "application/vnd.vcx": {
	    "source": "iana",
	    "extensions": ["vcx"]
	  },
	  "application/vnd.vd-study": {
	    "source": "iana"
	  },
	  "application/vnd.vectorworks": {
	    "source": "iana"
	  },
	  "application/vnd.verimatrix.vcas": {
	    "source": "iana"
	  },
	  "application/vnd.vidsoft.vidconference": {
	    "source": "iana"
	  },
	  "application/vnd.visio": {
	    "source": "iana",
	    "extensions": ["vsd","vst","vss","vsw"]
	  },
	  "application/vnd.visionary": {
	    "source": "iana",
	    "extensions": ["vis"]
	  },
	  "application/vnd.vividence.scriptfile": {
	    "source": "iana"
	  },
	  "application/vnd.vsf": {
	    "source": "iana",
	    "extensions": ["vsf"]
	  },
	  "application/vnd.wap.sic": {
	    "source": "iana"
	  },
	  "application/vnd.wap.slc": {
	    "source": "iana"
	  },
	  "application/vnd.wap.wbxml": {
	    "source": "iana",
	    "extensions": ["wbxml"]
	  },
	  "application/vnd.wap.wmlc": {
	    "source": "iana",
	    "extensions": ["wmlc"]
	  },
	  "application/vnd.wap.wmlscriptc": {
	    "source": "iana",
	    "extensions": ["wmlsc"]
	  },
	  "application/vnd.webturbo": {
	    "source": "iana",
	    "extensions": ["wtb"]
	  },
	  "application/vnd.wfa.p2p": {
	    "source": "iana"
	  },
	  "application/vnd.wfa.wsc": {
	    "source": "iana"
	  },
	  "application/vnd.windows.devicepairing": {
	    "source": "iana"
	  },
	  "application/vnd.wmc": {
	    "source": "iana"
	  },
	  "application/vnd.wmf.bootstrap": {
	    "source": "iana"
	  },
	  "application/vnd.wolfram.mathematica": {
	    "source": "iana"
	  },
	  "application/vnd.wolfram.mathematica.package": {
	    "source": "iana"
	  },
	  "application/vnd.wolfram.player": {
	    "source": "iana",
	    "extensions": ["nbp"]
	  },
	  "application/vnd.wordperfect": {
	    "source": "iana",
	    "extensions": ["wpd"]
	  },
	  "application/vnd.wqd": {
	    "source": "iana",
	    "extensions": ["wqd"]
	  },
	  "application/vnd.wrq-hp3000-labelled": {
	    "source": "iana"
	  },
	  "application/vnd.wt.stf": {
	    "source": "iana",
	    "extensions": ["stf"]
	  },
	  "application/vnd.wv.csp+wbxml": {
	    "source": "iana"
	  },
	  "application/vnd.wv.csp+xml": {
	    "source": "iana"
	  },
	  "application/vnd.wv.ssp+xml": {
	    "source": "iana"
	  },
	  "application/vnd.xacml+json": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/vnd.xara": {
	    "source": "iana",
	    "extensions": ["xar"]
	  },
	  "application/vnd.xfdl": {
	    "source": "iana",
	    "extensions": ["xfdl"]
	  },
	  "application/vnd.xfdl.webform": {
	    "source": "iana"
	  },
	  "application/vnd.xmi+xml": {
	    "source": "iana"
	  },
	  "application/vnd.xmpie.cpkg": {
	    "source": "iana"
	  },
	  "application/vnd.xmpie.dpkg": {
	    "source": "iana"
	  },
	  "application/vnd.xmpie.plan": {
	    "source": "iana"
	  },
	  "application/vnd.xmpie.ppkg": {
	    "source": "iana"
	  },
	  "application/vnd.xmpie.xlim": {
	    "source": "iana"
	  },
	  "application/vnd.yamaha.hv-dic": {
	    "source": "iana",
	    "extensions": ["hvd"]
	  },
	  "application/vnd.yamaha.hv-script": {
	    "source": "iana",
	    "extensions": ["hvs"]
	  },
	  "application/vnd.yamaha.hv-voice": {
	    "source": "iana",
	    "extensions": ["hvp"]
	  },
	  "application/vnd.yamaha.openscoreformat": {
	    "source": "iana",
	    "extensions": ["osf"]
	  },
	  "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
	    "source": "iana",
	    "extensions": ["osfpvg"]
	  },
	  "application/vnd.yamaha.remote-setup": {
	    "source": "iana"
	  },
	  "application/vnd.yamaha.smaf-audio": {
	    "source": "iana",
	    "extensions": ["saf"]
	  },
	  "application/vnd.yamaha.smaf-phrase": {
	    "source": "iana",
	    "extensions": ["spf"]
	  },
	  "application/vnd.yamaha.through-ngn": {
	    "source": "iana"
	  },
	  "application/vnd.yamaha.tunnel-udpencap": {
	    "source": "iana"
	  },
	  "application/vnd.yaoweme": {
	    "source": "iana"
	  },
	  "application/vnd.yellowriver-custom-menu": {
	    "source": "iana",
	    "extensions": ["cmp"]
	  },
	  "application/vnd.zul": {
	    "source": "iana",
	    "extensions": ["zir","zirz"]
	  },
	  "application/vnd.zzazz.deck+xml": {
	    "source": "iana",
	    "extensions": ["zaz"]
	  },
	  "application/voicexml+xml": {
	    "source": "iana",
	    "extensions": ["vxml"]
	  },
	  "application/vq-rtcpxr": {
	    "source": "iana"
	  },
	  "application/watcherinfo+xml": {
	    "source": "iana"
	  },
	  "application/whoispp-query": {
	    "source": "iana"
	  },
	  "application/whoispp-response": {
	    "source": "iana"
	  },
	  "application/widget": {
	    "source": "iana",
	    "extensions": ["wgt"]
	  },
	  "application/winhlp": {
	    "source": "apache",
	    "extensions": ["hlp"]
	  },
	  "application/wita": {
	    "source": "iana"
	  },
	  "application/wordperfect5.1": {
	    "source": "iana"
	  },
	  "application/wsdl+xml": {
	    "source": "iana",
	    "extensions": ["wsdl"]
	  },
	  "application/wspolicy+xml": {
	    "source": "iana",
	    "extensions": ["wspolicy"]
	  },
	  "application/x-7z-compressed": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["7z"]
	  },
	  "application/x-abiword": {
	    "source": "apache",
	    "extensions": ["abw"]
	  },
	  "application/x-ace-compressed": {
	    "source": "apache",
	    "extensions": ["ace"]
	  },
	  "application/x-amf": {
	    "source": "apache"
	  },
	  "application/x-apple-diskimage": {
	    "source": "apache",
	    "extensions": ["dmg"]
	  },
	  "application/x-authorware-bin": {
	    "source": "apache",
	    "extensions": ["aab","x32","u32","vox"]
	  },
	  "application/x-authorware-map": {
	    "source": "apache",
	    "extensions": ["aam"]
	  },
	  "application/x-authorware-seg": {
	    "source": "apache",
	    "extensions": ["aas"]
	  },
	  "application/x-bcpio": {
	    "source": "apache",
	    "extensions": ["bcpio"]
	  },
	  "application/x-bdoc": {
	    "compressible": false,
	    "extensions": ["bdoc"]
	  },
	  "application/x-bittorrent": {
	    "source": "apache",
	    "extensions": ["torrent"]
	  },
	  "application/x-blorb": {
	    "source": "apache",
	    "extensions": ["blb","blorb"]
	  },
	  "application/x-bzip": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["bz"]
	  },
	  "application/x-bzip2": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["bz2","boz"]
	  },
	  "application/x-cbr": {
	    "source": "apache",
	    "extensions": ["cbr","cba","cbt","cbz","cb7"]
	  },
	  "application/x-cdlink": {
	    "source": "apache",
	    "extensions": ["vcd"]
	  },
	  "application/x-cfs-compressed": {
	    "source": "apache",
	    "extensions": ["cfs"]
	  },
	  "application/x-chat": {
	    "source": "apache",
	    "extensions": ["chat"]
	  },
	  "application/x-chess-pgn": {
	    "source": "apache",
	    "extensions": ["pgn"]
	  },
	  "application/x-chrome-extension": {
	    "extensions": ["crx"]
	  },
	  "application/x-cocoa": {
	    "source": "nginx",
	    "extensions": ["cco"]
	  },
	  "application/x-compress": {
	    "source": "apache"
	  },
	  "application/x-conference": {
	    "source": "apache",
	    "extensions": ["nsc"]
	  },
	  "application/x-cpio": {
	    "source": "apache",
	    "extensions": ["cpio"]
	  },
	  "application/x-csh": {
	    "source": "apache",
	    "extensions": ["csh"]
	  },
	  "application/x-deb": {
	    "compressible": false
	  },
	  "application/x-debian-package": {
	    "source": "apache",
	    "extensions": ["deb","udeb"]
	  },
	  "application/x-dgc-compressed": {
	    "source": "apache",
	    "extensions": ["dgc"]
	  },
	  "application/x-director": {
	    "source": "apache",
	    "extensions": ["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]
	  },
	  "application/x-doom": {
	    "source": "apache",
	    "extensions": ["wad"]
	  },
	  "application/x-dtbncx+xml": {
	    "source": "apache",
	    "extensions": ["ncx"]
	  },
	  "application/x-dtbook+xml": {
	    "source": "apache",
	    "extensions": ["dtb"]
	  },
	  "application/x-dtbresource+xml": {
	    "source": "apache",
	    "extensions": ["res"]
	  },
	  "application/x-dvi": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["dvi"]
	  },
	  "application/x-envoy": {
	    "source": "apache",
	    "extensions": ["evy"]
	  },
	  "application/x-eva": {
	    "source": "apache",
	    "extensions": ["eva"]
	  },
	  "application/x-font-bdf": {
	    "source": "apache",
	    "extensions": ["bdf"]
	  },
	  "application/x-font-dos": {
	    "source": "apache"
	  },
	  "application/x-font-framemaker": {
	    "source": "apache"
	  },
	  "application/x-font-ghostscript": {
	    "source": "apache",
	    "extensions": ["gsf"]
	  },
	  "application/x-font-libgrx": {
	    "source": "apache"
	  },
	  "application/x-font-linux-psf": {
	    "source": "apache",
	    "extensions": ["psf"]
	  },
	  "application/x-font-otf": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["otf"]
	  },
	  "application/x-font-pcf": {
	    "source": "apache",
	    "extensions": ["pcf"]
	  },
	  "application/x-font-snf": {
	    "source": "apache",
	    "extensions": ["snf"]
	  },
	  "application/x-font-speedo": {
	    "source": "apache"
	  },
	  "application/x-font-sunos-news": {
	    "source": "apache"
	  },
	  "application/x-font-ttf": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["ttf","ttc"]
	  },
	  "application/x-font-type1": {
	    "source": "apache",
	    "extensions": ["pfa","pfb","pfm","afm"]
	  },
	  "application/x-font-vfont": {
	    "source": "apache"
	  },
	  "application/x-freearc": {
	    "source": "apache",
	    "extensions": ["arc"]
	  },
	  "application/x-futuresplash": {
	    "source": "apache",
	    "extensions": ["spl"]
	  },
	  "application/x-gca-compressed": {
	    "source": "apache",
	    "extensions": ["gca"]
	  },
	  "application/x-glulx": {
	    "source": "apache",
	    "extensions": ["ulx"]
	  },
	  "application/x-gnumeric": {
	    "source": "apache",
	    "extensions": ["gnumeric"]
	  },
	  "application/x-gramps-xml": {
	    "source": "apache",
	    "extensions": ["gramps"]
	  },
	  "application/x-gtar": {
	    "source": "apache",
	    "extensions": ["gtar"]
	  },
	  "application/x-gzip": {
	    "source": "apache"
	  },
	  "application/x-hdf": {
	    "source": "apache",
	    "extensions": ["hdf"]
	  },
	  "application/x-httpd-php": {
	    "compressible": true,
	    "extensions": ["php"]
	  },
	  "application/x-install-instructions": {
	    "source": "apache",
	    "extensions": ["install"]
	  },
	  "application/x-iso9660-image": {
	    "source": "apache",
	    "extensions": ["iso"]
	  },
	  "application/x-java-archive-diff": {
	    "source": "nginx",
	    "extensions": ["jardiff"]
	  },
	  "application/x-java-jnlp-file": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["jnlp"]
	  },
	  "application/x-javascript": {
	    "compressible": true
	  },
	  "application/x-latex": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["latex"]
	  },
	  "application/x-lua-bytecode": {
	    "extensions": ["luac"]
	  },
	  "application/x-lzh-compressed": {
	    "source": "apache",
	    "extensions": ["lzh","lha"]
	  },
	  "application/x-makeself": {
	    "source": "nginx",
	    "extensions": ["run"]
	  },
	  "application/x-mie": {
	    "source": "apache",
	    "extensions": ["mie"]
	  },
	  "application/x-mobipocket-ebook": {
	    "source": "apache",
	    "extensions": ["prc","mobi"]
	  },
	  "application/x-mpegurl": {
	    "compressible": false
	  },
	  "application/x-ms-application": {
	    "source": "apache",
	    "extensions": ["application"]
	  },
	  "application/x-ms-shortcut": {
	    "source": "apache",
	    "extensions": ["lnk"]
	  },
	  "application/x-ms-wmd": {
	    "source": "apache",
	    "extensions": ["wmd"]
	  },
	  "application/x-ms-wmz": {
	    "source": "apache",
	    "extensions": ["wmz"]
	  },
	  "application/x-ms-xbap": {
	    "source": "apache",
	    "extensions": ["xbap"]
	  },
	  "application/x-msaccess": {
	    "source": "apache",
	    "extensions": ["mdb"]
	  },
	  "application/x-msbinder": {
	    "source": "apache",
	    "extensions": ["obd"]
	  },
	  "application/x-mscardfile": {
	    "source": "apache",
	    "extensions": ["crd"]
	  },
	  "application/x-msclip": {
	    "source": "apache",
	    "extensions": ["clp"]
	  },
	  "application/x-msdos-program": {
	    "extensions": ["exe"]
	  },
	  "application/x-msdownload": {
	    "source": "apache",
	    "extensions": ["exe","dll","com","bat","msi"]
	  },
	  "application/x-msmediaview": {
	    "source": "apache",
	    "extensions": ["mvb","m13","m14"]
	  },
	  "application/x-msmetafile": {
	    "source": "apache",
	    "extensions": ["wmf","wmz","emf","emz"]
	  },
	  "application/x-msmoney": {
	    "source": "apache",
	    "extensions": ["mny"]
	  },
	  "application/x-mspublisher": {
	    "source": "apache",
	    "extensions": ["pub"]
	  },
	  "application/x-msschedule": {
	    "source": "apache",
	    "extensions": ["scd"]
	  },
	  "application/x-msterminal": {
	    "source": "apache",
	    "extensions": ["trm"]
	  },
	  "application/x-mswrite": {
	    "source": "apache",
	    "extensions": ["wri"]
	  },
	  "application/x-netcdf": {
	    "source": "apache",
	    "extensions": ["nc","cdf"]
	  },
	  "application/x-ns-proxy-autoconfig": {
	    "compressible": true,
	    "extensions": ["pac"]
	  },
	  "application/x-nzb": {
	    "source": "apache",
	    "extensions": ["nzb"]
	  },
	  "application/x-perl": {
	    "source": "nginx",
	    "extensions": ["pl","pm"]
	  },
	  "application/x-pilot": {
	    "source": "nginx",
	    "extensions": ["prc","pdb"]
	  },
	  "application/x-pkcs12": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["p12","pfx"]
	  },
	  "application/x-pkcs7-certificates": {
	    "source": "apache",
	    "extensions": ["p7b","spc"]
	  },
	  "application/x-pkcs7-certreqresp": {
	    "source": "apache",
	    "extensions": ["p7r"]
	  },
	  "application/x-rar-compressed": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["rar"]
	  },
	  "application/x-redhat-package-manager": {
	    "source": "nginx",
	    "extensions": ["rpm"]
	  },
	  "application/x-research-info-systems": {
	    "source": "apache",
	    "extensions": ["ris"]
	  },
	  "application/x-sea": {
	    "source": "nginx",
	    "extensions": ["sea"]
	  },
	  "application/x-sh": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["sh"]
	  },
	  "application/x-shar": {
	    "source": "apache",
	    "extensions": ["shar"]
	  },
	  "application/x-shockwave-flash": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["swf"]
	  },
	  "application/x-silverlight-app": {
	    "source": "apache",
	    "extensions": ["xap"]
	  },
	  "application/x-sql": {
	    "source": "apache",
	    "extensions": ["sql"]
	  },
	  "application/x-stuffit": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["sit"]
	  },
	  "application/x-stuffitx": {
	    "source": "apache",
	    "extensions": ["sitx"]
	  },
	  "application/x-subrip": {
	    "source": "apache",
	    "extensions": ["srt"]
	  },
	  "application/x-sv4cpio": {
	    "source": "apache",
	    "extensions": ["sv4cpio"]
	  },
	  "application/x-sv4crc": {
	    "source": "apache",
	    "extensions": ["sv4crc"]
	  },
	  "application/x-t3vm-image": {
	    "source": "apache",
	    "extensions": ["t3"]
	  },
	  "application/x-tads": {
	    "source": "apache",
	    "extensions": ["gam"]
	  },
	  "application/x-tar": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["tar"]
	  },
	  "application/x-tcl": {
	    "source": "apache",
	    "extensions": ["tcl","tk"]
	  },
	  "application/x-tex": {
	    "source": "apache",
	    "extensions": ["tex"]
	  },
	  "application/x-tex-tfm": {
	    "source": "apache",
	    "extensions": ["tfm"]
	  },
	  "application/x-texinfo": {
	    "source": "apache",
	    "extensions": ["texinfo","texi"]
	  },
	  "application/x-tgif": {
	    "source": "apache",
	    "extensions": ["obj"]
	  },
	  "application/x-ustar": {
	    "source": "apache",
	    "extensions": ["ustar"]
	  },
	  "application/x-wais-source": {
	    "source": "apache",
	    "extensions": ["src"]
	  },
	  "application/x-web-app-manifest+json": {
	    "compressible": true,
	    "extensions": ["webapp"]
	  },
	  "application/x-www-form-urlencoded": {
	    "source": "iana",
	    "compressible": true
	  },
	  "application/x-x509-ca-cert": {
	    "source": "apache",
	    "extensions": ["der","crt","pem"]
	  },
	  "application/x-xfig": {
	    "source": "apache",
	    "extensions": ["fig"]
	  },
	  "application/x-xliff+xml": {
	    "source": "apache",
	    "extensions": ["xlf"]
	  },
	  "application/x-xpinstall": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["xpi"]
	  },
	  "application/x-xz": {
	    "source": "apache",
	    "extensions": ["xz"]
	  },
	  "application/x-zmachine": {
	    "source": "apache",
	    "extensions": ["z1","z2","z3","z4","z5","z6","z7","z8"]
	  },
	  "application/x400-bp": {
	    "source": "iana"
	  },
	  "application/xacml+xml": {
	    "source": "iana"
	  },
	  "application/xaml+xml": {
	    "source": "apache",
	    "extensions": ["xaml"]
	  },
	  "application/xcap-att+xml": {
	    "source": "iana"
	  },
	  "application/xcap-caps+xml": {
	    "source": "iana"
	  },
	  "application/xcap-diff+xml": {
	    "source": "iana",
	    "extensions": ["xdf"]
	  },
	  "application/xcap-el+xml": {
	    "source": "iana"
	  },
	  "application/xcap-error+xml": {
	    "source": "iana"
	  },
	  "application/xcap-ns+xml": {
	    "source": "iana"
	  },
	  "application/xcon-conference-info+xml": {
	    "source": "iana"
	  },
	  "application/xcon-conference-info-diff+xml": {
	    "source": "iana"
	  },
	  "application/xenc+xml": {
	    "source": "iana",
	    "extensions": ["xenc"]
	  },
	  "application/xhtml+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["xhtml","xht"]
	  },
	  "application/xhtml-voice+xml": {
	    "source": "apache"
	  },
	  "application/xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["xml","xsl","xsd"]
	  },
	  "application/xml-dtd": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["dtd"]
	  },
	  "application/xml-external-parsed-entity": {
	    "source": "iana"
	  },
	  "application/xml-patch+xml": {
	    "source": "iana"
	  },
	  "application/xmpp+xml": {
	    "source": "iana"
	  },
	  "application/xop+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["xop"]
	  },
	  "application/xproc+xml": {
	    "source": "apache",
	    "extensions": ["xpl"]
	  },
	  "application/xslt+xml": {
	    "source": "iana",
	    "extensions": ["xslt"]
	  },
	  "application/xspf+xml": {
	    "source": "apache",
	    "extensions": ["xspf"]
	  },
	  "application/xv+xml": {
	    "source": "iana",
	    "extensions": ["mxml","xhvml","xvml","xvm"]
	  },
	  "application/yang": {
	    "source": "iana",
	    "extensions": ["yang"]
	  },
	  "application/yin+xml": {
	    "source": "iana",
	    "extensions": ["yin"]
	  },
	  "application/zip": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["zip"]
	  },
	  "application/zlib": {
	    "source": "iana"
	  },
	  "audio/1d-interleaved-parityfec": {
	    "source": "iana"
	  },
	  "audio/32kadpcm": {
	    "source": "iana"
	  },
	  "audio/3gpp": {
	    "source": "iana"
	  },
	  "audio/3gpp2": {
	    "source": "iana"
	  },
	  "audio/ac3": {
	    "source": "iana"
	  },
	  "audio/adpcm": {
	    "source": "apache",
	    "extensions": ["adp"]
	  },
	  "audio/amr": {
	    "source": "iana"
	  },
	  "audio/amr-wb": {
	    "source": "iana"
	  },
	  "audio/amr-wb+": {
	    "source": "iana"
	  },
	  "audio/aptx": {
	    "source": "iana"
	  },
	  "audio/asc": {
	    "source": "iana"
	  },
	  "audio/atrac-advanced-lossless": {
	    "source": "iana"
	  },
	  "audio/atrac-x": {
	    "source": "iana"
	  },
	  "audio/atrac3": {
	    "source": "iana"
	  },
	  "audio/basic": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["au","snd"]
	  },
	  "audio/bv16": {
	    "source": "iana"
	  },
	  "audio/bv32": {
	    "source": "iana"
	  },
	  "audio/clearmode": {
	    "source": "iana"
	  },
	  "audio/cn": {
	    "source": "iana"
	  },
	  "audio/dat12": {
	    "source": "iana"
	  },
	  "audio/dls": {
	    "source": "iana"
	  },
	  "audio/dsr-es201108": {
	    "source": "iana"
	  },
	  "audio/dsr-es202050": {
	    "source": "iana"
	  },
	  "audio/dsr-es202211": {
	    "source": "iana"
	  },
	  "audio/dsr-es202212": {
	    "source": "iana"
	  },
	  "audio/dv": {
	    "source": "iana"
	  },
	  "audio/dvi4": {
	    "source": "iana"
	  },
	  "audio/eac3": {
	    "source": "iana"
	  },
	  "audio/encaprtp": {
	    "source": "iana"
	  },
	  "audio/evrc": {
	    "source": "iana"
	  },
	  "audio/evrc-qcp": {
	    "source": "iana"
	  },
	  "audio/evrc0": {
	    "source": "iana"
	  },
	  "audio/evrc1": {
	    "source": "iana"
	  },
	  "audio/evrcb": {
	    "source": "iana"
	  },
	  "audio/evrcb0": {
	    "source": "iana"
	  },
	  "audio/evrcb1": {
	    "source": "iana"
	  },
	  "audio/evrcnw": {
	    "source": "iana"
	  },
	  "audio/evrcnw0": {
	    "source": "iana"
	  },
	  "audio/evrcnw1": {
	    "source": "iana"
	  },
	  "audio/evrcwb": {
	    "source": "iana"
	  },
	  "audio/evrcwb0": {
	    "source": "iana"
	  },
	  "audio/evrcwb1": {
	    "source": "iana"
	  },
	  "audio/evs": {
	    "source": "iana"
	  },
	  "audio/fwdred": {
	    "source": "iana"
	  },
	  "audio/g711-0": {
	    "source": "iana"
	  },
	  "audio/g719": {
	    "source": "iana"
	  },
	  "audio/g722": {
	    "source": "iana"
	  },
	  "audio/g7221": {
	    "source": "iana"
	  },
	  "audio/g723": {
	    "source": "iana"
	  },
	  "audio/g726-16": {
	    "source": "iana"
	  },
	  "audio/g726-24": {
	    "source": "iana"
	  },
	  "audio/g726-32": {
	    "source": "iana"
	  },
	  "audio/g726-40": {
	    "source": "iana"
	  },
	  "audio/g728": {
	    "source": "iana"
	  },
	  "audio/g729": {
	    "source": "iana"
	  },
	  "audio/g7291": {
	    "source": "iana"
	  },
	  "audio/g729d": {
	    "source": "iana"
	  },
	  "audio/g729e": {
	    "source": "iana"
	  },
	  "audio/gsm": {
	    "source": "iana"
	  },
	  "audio/gsm-efr": {
	    "source": "iana"
	  },
	  "audio/gsm-hr-08": {
	    "source": "iana"
	  },
	  "audio/ilbc": {
	    "source": "iana"
	  },
	  "audio/ip-mr_v2.5": {
	    "source": "iana"
	  },
	  "audio/isac": {
	    "source": "apache"
	  },
	  "audio/l16": {
	    "source": "iana"
	  },
	  "audio/l20": {
	    "source": "iana"
	  },
	  "audio/l24": {
	    "source": "iana",
	    "compressible": false
	  },
	  "audio/l8": {
	    "source": "iana"
	  },
	  "audio/lpc": {
	    "source": "iana"
	  },
	  "audio/midi": {
	    "source": "apache",
	    "extensions": ["mid","midi","kar","rmi"]
	  },
	  "audio/mobile-xmf": {
	    "source": "iana"
	  },
	  "audio/mp4": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["mp4a","m4a"]
	  },
	  "audio/mp4a-latm": {
	    "source": "iana"
	  },
	  "audio/mpa": {
	    "source": "iana"
	  },
	  "audio/mpa-robust": {
	    "source": "iana"
	  },
	  "audio/mpeg": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["mpga","mp2","mp2a","mp3","m2a","m3a"]
	  },
	  "audio/mpeg4-generic": {
	    "source": "iana"
	  },
	  "audio/musepack": {
	    "source": "apache"
	  },
	  "audio/ogg": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["oga","ogg","spx"]
	  },
	  "audio/opus": {
	    "source": "iana"
	  },
	  "audio/parityfec": {
	    "source": "iana"
	  },
	  "audio/pcma": {
	    "source": "iana"
	  },
	  "audio/pcma-wb": {
	    "source": "iana"
	  },
	  "audio/pcmu": {
	    "source": "iana"
	  },
	  "audio/pcmu-wb": {
	    "source": "iana"
	  },
	  "audio/prs.sid": {
	    "source": "iana"
	  },
	  "audio/qcelp": {
	    "source": "iana"
	  },
	  "audio/raptorfec": {
	    "source": "iana"
	  },
	  "audio/red": {
	    "source": "iana"
	  },
	  "audio/rtp-enc-aescm128": {
	    "source": "iana"
	  },
	  "audio/rtp-midi": {
	    "source": "iana"
	  },
	  "audio/rtploopback": {
	    "source": "iana"
	  },
	  "audio/rtx": {
	    "source": "iana"
	  },
	  "audio/s3m": {
	    "source": "apache",
	    "extensions": ["s3m"]
	  },
	  "audio/silk": {
	    "source": "apache",
	    "extensions": ["sil"]
	  },
	  "audio/smv": {
	    "source": "iana"
	  },
	  "audio/smv-qcp": {
	    "source": "iana"
	  },
	  "audio/smv0": {
	    "source": "iana"
	  },
	  "audio/sp-midi": {
	    "source": "iana"
	  },
	  "audio/speex": {
	    "source": "iana"
	  },
	  "audio/t140c": {
	    "source": "iana"
	  },
	  "audio/t38": {
	    "source": "iana"
	  },
	  "audio/telephone-event": {
	    "source": "iana"
	  },
	  "audio/tone": {
	    "source": "iana"
	  },
	  "audio/uemclip": {
	    "source": "iana"
	  },
	  "audio/ulpfec": {
	    "source": "iana"
	  },
	  "audio/vdvi": {
	    "source": "iana"
	  },
	  "audio/vmr-wb": {
	    "source": "iana"
	  },
	  "audio/vnd.3gpp.iufp": {
	    "source": "iana"
	  },
	  "audio/vnd.4sb": {
	    "source": "iana"
	  },
	  "audio/vnd.audiokoz": {
	    "source": "iana"
	  },
	  "audio/vnd.celp": {
	    "source": "iana"
	  },
	  "audio/vnd.cisco.nse": {
	    "source": "iana"
	  },
	  "audio/vnd.cmles.radio-events": {
	    "source": "iana"
	  },
	  "audio/vnd.cns.anp1": {
	    "source": "iana"
	  },
	  "audio/vnd.cns.inf1": {
	    "source": "iana"
	  },
	  "audio/vnd.dece.audio": {
	    "source": "iana",
	    "extensions": ["uva","uvva"]
	  },
	  "audio/vnd.digital-winds": {
	    "source": "iana",
	    "extensions": ["eol"]
	  },
	  "audio/vnd.dlna.adts": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.heaac.1": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.heaac.2": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.mlp": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.mps": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.pl2": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.pl2x": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.pl2z": {
	    "source": "iana"
	  },
	  "audio/vnd.dolby.pulse.1": {
	    "source": "iana"
	  },
	  "audio/vnd.dra": {
	    "source": "iana",
	    "extensions": ["dra"]
	  },
	  "audio/vnd.dts": {
	    "source": "iana",
	    "extensions": ["dts"]
	  },
	  "audio/vnd.dts.hd": {
	    "source": "iana",
	    "extensions": ["dtshd"]
	  },
	  "audio/vnd.dvb.file": {
	    "source": "iana"
	  },
	  "audio/vnd.everad.plj": {
	    "source": "iana"
	  },
	  "audio/vnd.hns.audio": {
	    "source": "iana"
	  },
	  "audio/vnd.lucent.voice": {
	    "source": "iana",
	    "extensions": ["lvp"]
	  },
	  "audio/vnd.ms-playready.media.pya": {
	    "source": "iana",
	    "extensions": ["pya"]
	  },
	  "audio/vnd.nokia.mobile-xmf": {
	    "source": "iana"
	  },
	  "audio/vnd.nortel.vbk": {
	    "source": "iana"
	  },
	  "audio/vnd.nuera.ecelp4800": {
	    "source": "iana",
	    "extensions": ["ecelp4800"]
	  },
	  "audio/vnd.nuera.ecelp7470": {
	    "source": "iana",
	    "extensions": ["ecelp7470"]
	  },
	  "audio/vnd.nuera.ecelp9600": {
	    "source": "iana",
	    "extensions": ["ecelp9600"]
	  },
	  "audio/vnd.octel.sbc": {
	    "source": "iana"
	  },
	  "audio/vnd.qcelp": {
	    "source": "iana"
	  },
	  "audio/vnd.rhetorex.32kadpcm": {
	    "source": "iana"
	  },
	  "audio/vnd.rip": {
	    "source": "iana",
	    "extensions": ["rip"]
	  },
	  "audio/vnd.rn-realaudio": {
	    "compressible": false
	  },
	  "audio/vnd.sealedmedia.softseal.mpeg": {
	    "source": "iana"
	  },
	  "audio/vnd.vmx.cvsd": {
	    "source": "iana"
	  },
	  "audio/vnd.wave": {
	    "compressible": false
	  },
	  "audio/vorbis": {
	    "source": "iana",
	    "compressible": false
	  },
	  "audio/vorbis-config": {
	    "source": "iana"
	  },
	  "audio/wav": {
	    "compressible": false,
	    "extensions": ["wav"]
	  },
	  "audio/wave": {
	    "compressible": false,
	    "extensions": ["wav"]
	  },
	  "audio/webm": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["weba"]
	  },
	  "audio/x-aac": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["aac"]
	  },
	  "audio/x-aiff": {
	    "source": "apache",
	    "extensions": ["aif","aiff","aifc"]
	  },
	  "audio/x-caf": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["caf"]
	  },
	  "audio/x-flac": {
	    "source": "apache",
	    "extensions": ["flac"]
	  },
	  "audio/x-m4a": {
	    "source": "nginx",
	    "extensions": ["m4a"]
	  },
	  "audio/x-matroska": {
	    "source": "apache",
	    "extensions": ["mka"]
	  },
	  "audio/x-mpegurl": {
	    "source": "apache",
	    "extensions": ["m3u"]
	  },
	  "audio/x-ms-wax": {
	    "source": "apache",
	    "extensions": ["wax"]
	  },
	  "audio/x-ms-wma": {
	    "source": "apache",
	    "extensions": ["wma"]
	  },
	  "audio/x-pn-realaudio": {
	    "source": "apache",
	    "extensions": ["ram","ra"]
	  },
	  "audio/x-pn-realaudio-plugin": {
	    "source": "apache",
	    "extensions": ["rmp"]
	  },
	  "audio/x-realaudio": {
	    "source": "nginx",
	    "extensions": ["ra"]
	  },
	  "audio/x-tta": {
	    "source": "apache"
	  },
	  "audio/x-wav": {
	    "source": "apache",
	    "extensions": ["wav"]
	  },
	  "audio/xm": {
	    "source": "apache",
	    "extensions": ["xm"]
	  },
	  "chemical/x-cdx": {
	    "source": "apache",
	    "extensions": ["cdx"]
	  },
	  "chemical/x-cif": {
	    "source": "apache",
	    "extensions": ["cif"]
	  },
	  "chemical/x-cmdf": {
	    "source": "apache",
	    "extensions": ["cmdf"]
	  },
	  "chemical/x-cml": {
	    "source": "apache",
	    "extensions": ["cml"]
	  },
	  "chemical/x-csml": {
	    "source": "apache",
	    "extensions": ["csml"]
	  },
	  "chemical/x-pdb": {
	    "source": "apache"
	  },
	  "chemical/x-xyz": {
	    "source": "apache",
	    "extensions": ["xyz"]
	  },
	  "font/opentype": {
	    "compressible": true,
	    "extensions": ["otf"]
	  },
	  "image/bmp": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["bmp"]
	  },
	  "image/cgm": {
	    "source": "iana",
	    "extensions": ["cgm"]
	  },
	  "image/fits": {
	    "source": "iana"
	  },
	  "image/g3fax": {
	    "source": "iana",
	    "extensions": ["g3"]
	  },
	  "image/gif": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["gif"]
	  },
	  "image/ief": {
	    "source": "iana",
	    "extensions": ["ief"]
	  },
	  "image/jp2": {
	    "source": "iana"
	  },
	  "image/jpeg": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["jpeg","jpg","jpe"]
	  },
	  "image/jpm": {
	    "source": "iana"
	  },
	  "image/jpx": {
	    "source": "iana"
	  },
	  "image/ktx": {
	    "source": "iana",
	    "extensions": ["ktx"]
	  },
	  "image/naplps": {
	    "source": "iana"
	  },
	  "image/pjpeg": {
	    "compressible": false
	  },
	  "image/png": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["png"]
	  },
	  "image/prs.btif": {
	    "source": "iana",
	    "extensions": ["btif"]
	  },
	  "image/prs.pti": {
	    "source": "iana"
	  },
	  "image/pwg-raster": {
	    "source": "iana"
	  },
	  "image/sgi": {
	    "source": "apache",
	    "extensions": ["sgi"]
	  },
	  "image/svg+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["svg","svgz"]
	  },
	  "image/t38": {
	    "source": "iana"
	  },
	  "image/tiff": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["tiff","tif"]
	  },
	  "image/tiff-fx": {
	    "source": "iana"
	  },
	  "image/vnd.adobe.photoshop": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["psd"]
	  },
	  "image/vnd.airzip.accelerator.azv": {
	    "source": "iana"
	  },
	  "image/vnd.cns.inf2": {
	    "source": "iana"
	  },
	  "image/vnd.dece.graphic": {
	    "source": "iana",
	    "extensions": ["uvi","uvvi","uvg","uvvg"]
	  },
	  "image/vnd.djvu": {
	    "source": "iana",
	    "extensions": ["djvu","djv"]
	  },
	  "image/vnd.dvb.subtitle": {
	    "source": "iana",
	    "extensions": ["sub"]
	  },
	  "image/vnd.dwg": {
	    "source": "iana",
	    "extensions": ["dwg"]
	  },
	  "image/vnd.dxf": {
	    "source": "iana",
	    "extensions": ["dxf"]
	  },
	  "image/vnd.fastbidsheet": {
	    "source": "iana",
	    "extensions": ["fbs"]
	  },
	  "image/vnd.fpx": {
	    "source": "iana",
	    "extensions": ["fpx"]
	  },
	  "image/vnd.fst": {
	    "source": "iana",
	    "extensions": ["fst"]
	  },
	  "image/vnd.fujixerox.edmics-mmr": {
	    "source": "iana",
	    "extensions": ["mmr"]
	  },
	  "image/vnd.fujixerox.edmics-rlc": {
	    "source": "iana",
	    "extensions": ["rlc"]
	  },
	  "image/vnd.globalgraphics.pgb": {
	    "source": "iana"
	  },
	  "image/vnd.microsoft.icon": {
	    "source": "iana"
	  },
	  "image/vnd.mix": {
	    "source": "iana"
	  },
	  "image/vnd.mozilla.apng": {
	    "source": "iana"
	  },
	  "image/vnd.ms-modi": {
	    "source": "iana",
	    "extensions": ["mdi"]
	  },
	  "image/vnd.ms-photo": {
	    "source": "apache",
	    "extensions": ["wdp"]
	  },
	  "image/vnd.net-fpx": {
	    "source": "iana",
	    "extensions": ["npx"]
	  },
	  "image/vnd.radiance": {
	    "source": "iana"
	  },
	  "image/vnd.sealed.png": {
	    "source": "iana"
	  },
	  "image/vnd.sealedmedia.softseal.gif": {
	    "source": "iana"
	  },
	  "image/vnd.sealedmedia.softseal.jpg": {
	    "source": "iana"
	  },
	  "image/vnd.svf": {
	    "source": "iana"
	  },
	  "image/vnd.tencent.tap": {
	    "source": "iana"
	  },
	  "image/vnd.valve.source.texture": {
	    "source": "iana"
	  },
	  "image/vnd.wap.wbmp": {
	    "source": "iana",
	    "extensions": ["wbmp"]
	  },
	  "image/vnd.xiff": {
	    "source": "iana",
	    "extensions": ["xif"]
	  },
	  "image/vnd.zbrush.pcx": {
	    "source": "iana"
	  },
	  "image/webp": {
	    "source": "apache",
	    "extensions": ["webp"]
	  },
	  "image/x-3ds": {
	    "source": "apache",
	    "extensions": ["3ds"]
	  },
	  "image/x-cmu-raster": {
	    "source": "apache",
	    "extensions": ["ras"]
	  },
	  "image/x-cmx": {
	    "source": "apache",
	    "extensions": ["cmx"]
	  },
	  "image/x-freehand": {
	    "source": "apache",
	    "extensions": ["fh","fhc","fh4","fh5","fh7"]
	  },
	  "image/x-icon": {
	    "source": "apache",
	    "compressible": true,
	    "extensions": ["ico"]
	  },
	  "image/x-jng": {
	    "source": "nginx",
	    "extensions": ["jng"]
	  },
	  "image/x-mrsid-image": {
	    "source": "apache",
	    "extensions": ["sid"]
	  },
	  "image/x-ms-bmp": {
	    "source": "nginx",
	    "compressible": true,
	    "extensions": ["bmp"]
	  },
	  "image/x-pcx": {
	    "source": "apache",
	    "extensions": ["pcx"]
	  },
	  "image/x-pict": {
	    "source": "apache",
	    "extensions": ["pic","pct"]
	  },
	  "image/x-portable-anymap": {
	    "source": "apache",
	    "extensions": ["pnm"]
	  },
	  "image/x-portable-bitmap": {
	    "source": "apache",
	    "extensions": ["pbm"]
	  },
	  "image/x-portable-graymap": {
	    "source": "apache",
	    "extensions": ["pgm"]
	  },
	  "image/x-portable-pixmap": {
	    "source": "apache",
	    "extensions": ["ppm"]
	  },
	  "image/x-rgb": {
	    "source": "apache",
	    "extensions": ["rgb"]
	  },
	  "image/x-tga": {
	    "source": "apache",
	    "extensions": ["tga"]
	  },
	  "image/x-xbitmap": {
	    "source": "apache",
	    "extensions": ["xbm"]
	  },
	  "image/x-xcf": {
	    "compressible": false
	  },
	  "image/x-xpixmap": {
	    "source": "apache",
	    "extensions": ["xpm"]
	  },
	  "image/x-xwindowdump": {
	    "source": "apache",
	    "extensions": ["xwd"]
	  },
	  "message/cpim": {
	    "source": "iana"
	  },
	  "message/delivery-status": {
	    "source": "iana"
	  },
	  "message/disposition-notification": {
	    "source": "iana"
	  },
	  "message/external-body": {
	    "source": "iana"
	  },
	  "message/feedback-report": {
	    "source": "iana"
	  },
	  "message/global": {
	    "source": "iana"
	  },
	  "message/global-delivery-status": {
	    "source": "iana"
	  },
	  "message/global-disposition-notification": {
	    "source": "iana"
	  },
	  "message/global-headers": {
	    "source": "iana"
	  },
	  "message/http": {
	    "source": "iana",
	    "compressible": false
	  },
	  "message/imdn+xml": {
	    "source": "iana",
	    "compressible": true
	  },
	  "message/news": {
	    "source": "iana"
	  },
	  "message/partial": {
	    "source": "iana",
	    "compressible": false
	  },
	  "message/rfc822": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["eml","mime"]
	  },
	  "message/s-http": {
	    "source": "iana"
	  },
	  "message/sip": {
	    "source": "iana"
	  },
	  "message/sipfrag": {
	    "source": "iana"
	  },
	  "message/tracking-status": {
	    "source": "iana"
	  },
	  "message/vnd.si.simp": {
	    "source": "iana"
	  },
	  "message/vnd.wfa.wsc": {
	    "source": "iana"
	  },
	  "model/iges": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["igs","iges"]
	  },
	  "model/mesh": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["msh","mesh","silo"]
	  },
	  "model/vnd.collada+xml": {
	    "source": "iana",
	    "extensions": ["dae"]
	  },
	  "model/vnd.dwf": {
	    "source": "iana",
	    "extensions": ["dwf"]
	  },
	  "model/vnd.flatland.3dml": {
	    "source": "iana"
	  },
	  "model/vnd.gdl": {
	    "source": "iana",
	    "extensions": ["gdl"]
	  },
	  "model/vnd.gs-gdl": {
	    "source": "apache"
	  },
	  "model/vnd.gs.gdl": {
	    "source": "iana"
	  },
	  "model/vnd.gtw": {
	    "source": "iana",
	    "extensions": ["gtw"]
	  },
	  "model/vnd.moml+xml": {
	    "source": "iana"
	  },
	  "model/vnd.mts": {
	    "source": "iana",
	    "extensions": ["mts"]
	  },
	  "model/vnd.opengex": {
	    "source": "iana"
	  },
	  "model/vnd.parasolid.transmit.binary": {
	    "source": "iana"
	  },
	  "model/vnd.parasolid.transmit.text": {
	    "source": "iana"
	  },
	  "model/vnd.valve.source.compiled-map": {
	    "source": "iana"
	  },
	  "model/vnd.vtu": {
	    "source": "iana",
	    "extensions": ["vtu"]
	  },
	  "model/vrml": {
	    "source": "iana",
	    "compressible": false,
	    "extensions": ["wrl","vrml"]
	  },
	  "model/x3d+binary": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["x3db","x3dbz"]
	  },
	  "model/x3d+fastinfoset": {
	    "source": "iana"
	  },
	  "model/x3d+vrml": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["x3dv","x3dvz"]
	  },
	  "model/x3d+xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["x3d","x3dz"]
	  },
	  "model/x3d-vrml": {
	    "source": "iana"
	  },
	  "multipart/alternative": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/appledouble": {
	    "source": "iana"
	  },
	  "multipart/byteranges": {
	    "source": "iana"
	  },
	  "multipart/digest": {
	    "source": "iana"
	  },
	  "multipart/encrypted": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/form-data": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/header-set": {
	    "source": "iana"
	  },
	  "multipart/mixed": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/parallel": {
	    "source": "iana"
	  },
	  "multipart/related": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/report": {
	    "source": "iana"
	  },
	  "multipart/signed": {
	    "source": "iana",
	    "compressible": false
	  },
	  "multipart/voice-message": {
	    "source": "iana"
	  },
	  "multipart/x-mixed-replace": {
	    "source": "iana"
	  },
	  "text/1d-interleaved-parityfec": {
	    "source": "iana"
	  },
	  "text/cache-manifest": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["appcache","manifest"]
	  },
	  "text/calendar": {
	    "source": "iana",
	    "extensions": ["ics","ifb"]
	  },
	  "text/calender": {
	    "compressible": true
	  },
	  "text/cmd": {
	    "compressible": true
	  },
	  "text/coffeescript": {
	    "extensions": ["coffee","litcoffee"]
	  },
	  "text/css": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["css"]
	  },
	  "text/csv": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["csv"]
	  },
	  "text/csv-schema": {
	    "source": "iana"
	  },
	  "text/directory": {
	    "source": "iana"
	  },
	  "text/dns": {
	    "source": "iana"
	  },
	  "text/ecmascript": {
	    "source": "iana"
	  },
	  "text/encaprtp": {
	    "source": "iana"
	  },
	  "text/enriched": {
	    "source": "iana"
	  },
	  "text/fwdred": {
	    "source": "iana"
	  },
	  "text/grammar-ref-list": {
	    "source": "iana"
	  },
	  "text/hjson": {
	    "extensions": ["hjson"]
	  },
	  "text/html": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["html","htm","shtml"]
	  },
	  "text/jade": {
	    "extensions": ["jade"]
	  },
	  "text/javascript": {
	    "source": "iana",
	    "compressible": true
	  },
	  "text/jcr-cnd": {
	    "source": "iana"
	  },
	  "text/jsx": {
	    "compressible": true,
	    "extensions": ["jsx"]
	  },
	  "text/less": {
	    "extensions": ["less"]
	  },
	  "text/markdown": {
	    "source": "iana"
	  },
	  "text/mathml": {
	    "source": "nginx",
	    "extensions": ["mml"]
	  },
	  "text/mizar": {
	    "source": "iana"
	  },
	  "text/n3": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["n3"]
	  },
	  "text/parameters": {
	    "source": "iana"
	  },
	  "text/parityfec": {
	    "source": "iana"
	  },
	  "text/plain": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["txt","text","conf","def","list","log","in","ini"]
	  },
	  "text/provenance-notation": {
	    "source": "iana"
	  },
	  "text/prs.fallenstein.rst": {
	    "source": "iana"
	  },
	  "text/prs.lines.tag": {
	    "source": "iana",
	    "extensions": ["dsc"]
	  },
	  "text/raptorfec": {
	    "source": "iana"
	  },
	  "text/red": {
	    "source": "iana"
	  },
	  "text/rfc822-headers": {
	    "source": "iana"
	  },
	  "text/richtext": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["rtx"]
	  },
	  "text/rtf": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["rtf"]
	  },
	  "text/rtp-enc-aescm128": {
	    "source": "iana"
	  },
	  "text/rtploopback": {
	    "source": "iana"
	  },
	  "text/rtx": {
	    "source": "iana"
	  },
	  "text/sgml": {
	    "source": "iana",
	    "extensions": ["sgml","sgm"]
	  },
	  "text/stylus": {
	    "extensions": ["stylus","styl"]
	  },
	  "text/t140": {
	    "source": "iana"
	  },
	  "text/tab-separated-values": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["tsv"]
	  },
	  "text/troff": {
	    "source": "iana",
	    "extensions": ["t","tr","roff","man","me","ms"]
	  },
	  "text/turtle": {
	    "source": "iana",
	    "extensions": ["ttl"]
	  },
	  "text/ulpfec": {
	    "source": "iana"
	  },
	  "text/uri-list": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["uri","uris","urls"]
	  },
	  "text/vcard": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["vcard"]
	  },
	  "text/vnd.a": {
	    "source": "iana"
	  },
	  "text/vnd.abc": {
	    "source": "iana"
	  },
	  "text/vnd.curl": {
	    "source": "iana",
	    "extensions": ["curl"]
	  },
	  "text/vnd.curl.dcurl": {
	    "source": "apache",
	    "extensions": ["dcurl"]
	  },
	  "text/vnd.curl.mcurl": {
	    "source": "apache",
	    "extensions": ["mcurl"]
	  },
	  "text/vnd.curl.scurl": {
	    "source": "apache",
	    "extensions": ["scurl"]
	  },
	  "text/vnd.debian.copyright": {
	    "source": "iana"
	  },
	  "text/vnd.dmclientscript": {
	    "source": "iana"
	  },
	  "text/vnd.dvb.subtitle": {
	    "source": "iana",
	    "extensions": ["sub"]
	  },
	  "text/vnd.esmertec.theme-descriptor": {
	    "source": "iana"
	  },
	  "text/vnd.fly": {
	    "source": "iana",
	    "extensions": ["fly"]
	  },
	  "text/vnd.fmi.flexstor": {
	    "source": "iana",
	    "extensions": ["flx"]
	  },
	  "text/vnd.graphviz": {
	    "source": "iana",
	    "extensions": ["gv"]
	  },
	  "text/vnd.in3d.3dml": {
	    "source": "iana",
	    "extensions": ["3dml"]
	  },
	  "text/vnd.in3d.spot": {
	    "source": "iana",
	    "extensions": ["spot"]
	  },
	  "text/vnd.iptc.newsml": {
	    "source": "iana"
	  },
	  "text/vnd.iptc.nitf": {
	    "source": "iana"
	  },
	  "text/vnd.latex-z": {
	    "source": "iana"
	  },
	  "text/vnd.motorola.reflex": {
	    "source": "iana"
	  },
	  "text/vnd.ms-mediapackage": {
	    "source": "iana"
	  },
	  "text/vnd.net2phone.commcenter.command": {
	    "source": "iana"
	  },
	  "text/vnd.radisys.msml-basic-layout": {
	    "source": "iana"
	  },
	  "text/vnd.si.uricatalogue": {
	    "source": "iana"
	  },
	  "text/vnd.sun.j2me.app-descriptor": {
	    "source": "iana",
	    "extensions": ["jad"]
	  },
	  "text/vnd.trolltech.linguist": {
	    "source": "iana"
	  },
	  "text/vnd.wap.si": {
	    "source": "iana"
	  },
	  "text/vnd.wap.sl": {
	    "source": "iana"
	  },
	  "text/vnd.wap.wml": {
	    "source": "iana",
	    "extensions": ["wml"]
	  },
	  "text/vnd.wap.wmlscript": {
	    "source": "iana",
	    "extensions": ["wmls"]
	  },
	  "text/vtt": {
	    "charset": "UTF-8",
	    "compressible": true,
	    "extensions": ["vtt"]
	  },
	  "text/x-asm": {
	    "source": "apache",
	    "extensions": ["s","asm"]
	  },
	  "text/x-c": {
	    "source": "apache",
	    "extensions": ["c","cc","cxx","cpp","h","hh","dic"]
	  },
	  "text/x-component": {
	    "source": "nginx",
	    "extensions": ["htc"]
	  },
	  "text/x-fortran": {
	    "source": "apache",
	    "extensions": ["f","for","f77","f90"]
	  },
	  "text/x-gwt-rpc": {
	    "compressible": true
	  },
	  "text/x-handlebars-template": {
	    "extensions": ["hbs"]
	  },
	  "text/x-java-source": {
	    "source": "apache",
	    "extensions": ["java"]
	  },
	  "text/x-jquery-tmpl": {
	    "compressible": true
	  },
	  "text/x-lua": {
	    "extensions": ["lua"]
	  },
	  "text/x-markdown": {
	    "compressible": true,
	    "extensions": ["markdown","md","mkd"]
	  },
	  "text/x-nfo": {
	    "source": "apache",
	    "extensions": ["nfo"]
	  },
	  "text/x-opml": {
	    "source": "apache",
	    "extensions": ["opml"]
	  },
	  "text/x-pascal": {
	    "source": "apache",
	    "extensions": ["p","pas"]
	  },
	  "text/x-processing": {
	    "compressible": true,
	    "extensions": ["pde"]
	  },
	  "text/x-sass": {
	    "extensions": ["sass"]
	  },
	  "text/x-scss": {
	    "extensions": ["scss"]
	  },
	  "text/x-setext": {
	    "source": "apache",
	    "extensions": ["etx"]
	  },
	  "text/x-sfv": {
	    "source": "apache",
	    "extensions": ["sfv"]
	  },
	  "text/x-suse-ymp": {
	    "compressible": true,
	    "extensions": ["ymp"]
	  },
	  "text/x-uuencode": {
	    "source": "apache",
	    "extensions": ["uu"]
	  },
	  "text/x-vcalendar": {
	    "source": "apache",
	    "extensions": ["vcs"]
	  },
	  "text/x-vcard": {
	    "source": "apache",
	    "extensions": ["vcf"]
	  },
	  "text/xml": {
	    "source": "iana",
	    "compressible": true,
	    "extensions": ["xml"]
	  },
	  "text/xml-external-parsed-entity": {
	    "source": "iana"
	  },
	  "text/yaml": {
	    "extensions": ["yaml","yml"]
	  },
	  "video/1d-interleaved-parityfec": {
	    "source": "apache"
	  },
	  "video/3gpp": {
	    "source": "apache",
	    "extensions": ["3gp","3gpp"]
	  },
	  "video/3gpp-tt": {
	    "source": "apache"
	  },
	  "video/3gpp2": {
	    "source": "apache",
	    "extensions": ["3g2"]
	  },
	  "video/bmpeg": {
	    "source": "apache"
	  },
	  "video/bt656": {
	    "source": "apache"
	  },
	  "video/celb": {
	    "source": "apache"
	  },
	  "video/dv": {
	    "source": "apache"
	  },
	  "video/h261": {
	    "source": "apache",
	    "extensions": ["h261"]
	  },
	  "video/h263": {
	    "source": "apache",
	    "extensions": ["h263"]
	  },
	  "video/h263-1998": {
	    "source": "apache"
	  },
	  "video/h263-2000": {
	    "source": "apache"
	  },
	  "video/h264": {
	    "source": "apache",
	    "extensions": ["h264"]
	  },
	  "video/h264-rcdo": {
	    "source": "apache"
	  },
	  "video/h264-svc": {
	    "source": "apache"
	  },
	  "video/jpeg": {
	    "source": "apache",
	    "extensions": ["jpgv"]
	  },
	  "video/jpeg2000": {
	    "source": "apache"
	  },
	  "video/jpm": {
	    "source": "apache",
	    "extensions": ["jpm","jpgm"]
	  },
	  "video/mj2": {
	    "source": "apache",
	    "extensions": ["mj2","mjp2"]
	  },
	  "video/mp1s": {
	    "source": "apache"
	  },
	  "video/mp2p": {
	    "source": "apache"
	  },
	  "video/mp2t": {
	    "source": "apache",
	    "extensions": ["ts"]
	  },
	  "video/mp4": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["mp4","mp4v","mpg4"]
	  },
	  "video/mp4v-es": {
	    "source": "apache"
	  },
	  "video/mpeg": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["mpeg","mpg","mpe","m1v","m2v"]
	  },
	  "video/mpeg4-generic": {
	    "source": "apache"
	  },
	  "video/mpv": {
	    "source": "apache"
	  },
	  "video/nv": {
	    "source": "apache"
	  },
	  "video/ogg": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["ogv"]
	  },
	  "video/parityfec": {
	    "source": "apache"
	  },
	  "video/pointer": {
	    "source": "apache"
	  },
	  "video/quicktime": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["qt","mov"]
	  },
	  "video/raw": {
	    "source": "apache"
	  },
	  "video/rtp-enc-aescm128": {
	    "source": "apache"
	  },
	  "video/rtx": {
	    "source": "apache"
	  },
	  "video/smpte292m": {
	    "source": "apache"
	  },
	  "video/ulpfec": {
	    "source": "apache"
	  },
	  "video/vc1": {
	    "source": "apache"
	  },
	  "video/vnd.cctv": {
	    "source": "apache"
	  },
	  "video/vnd.dece.hd": {
	    "source": "apache",
	    "extensions": ["uvh","uvvh"]
	  },
	  "video/vnd.dece.mobile": {
	    "source": "apache",
	    "extensions": ["uvm","uvvm"]
	  },
	  "video/vnd.dece.mp4": {
	    "source": "apache"
	  },
	  "video/vnd.dece.pd": {
	    "source": "apache",
	    "extensions": ["uvp","uvvp"]
	  },
	  "video/vnd.dece.sd": {
	    "source": "apache",
	    "extensions": ["uvs","uvvs"]
	  },
	  "video/vnd.dece.video": {
	    "source": "apache",
	    "extensions": ["uvv","uvvv"]
	  },
	  "video/vnd.directv.mpeg": {
	    "source": "apache"
	  },
	  "video/vnd.directv.mpeg-tts": {
	    "source": "apache"
	  },
	  "video/vnd.dlna.mpeg-tts": {
	    "source": "apache"
	  },
	  "video/vnd.dvb.file": {
	    "source": "apache",
	    "extensions": ["dvb"]
	  },
	  "video/vnd.fvt": {
	    "source": "apache",
	    "extensions": ["fvt"]
	  },
	  "video/vnd.hns.video": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.1dparityfec-1010": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.1dparityfec-2005": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.2dparityfec-1010": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.2dparityfec-2005": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.ttsavc": {
	    "source": "apache"
	  },
	  "video/vnd.iptvforum.ttsmpeg2": {
	    "source": "apache"
	  },
	  "video/vnd.motorola.video": {
	    "source": "apache"
	  },
	  "video/vnd.motorola.videop": {
	    "source": "apache"
	  },
	  "video/vnd.mpegurl": {
	    "source": "apache",
	    "extensions": ["mxu","m4u"]
	  },
	  "video/vnd.ms-playready.media.pyv": {
	    "source": "apache",
	    "extensions": ["pyv"]
	  },
	  "video/vnd.nokia.interleaved-multimedia": {
	    "source": "apache"
	  },
	  "video/vnd.nokia.videovoip": {
	    "source": "apache"
	  },
	  "video/vnd.objectvideo": {
	    "source": "apache"
	  },
	  "video/vnd.sealed.mpeg1": {
	    "source": "apache"
	  },
	  "video/vnd.sealed.mpeg4": {
	    "source": "apache"
	  },
	  "video/vnd.sealed.swf": {
	    "source": "apache"
	  },
	  "video/vnd.sealedmedia.softseal.mov": {
	    "source": "apache"
	  },
	  "video/vnd.uvvu.mp4": {
	    "source": "apache",
	    "extensions": ["uvu","uvvu"]
	  },
	  "video/vnd.vivo": {
	    "source": "apache",
	    "extensions": ["viv"]
	  },
	  "video/webm": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["webm"]
	  },
	  "video/x-f4v": {
	    "source": "apache",
	    "extensions": ["f4v"]
	  },
	  "video/x-fli": {
	    "source": "apache",
	    "extensions": ["fli"]
	  },
	  "video/x-flv": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["flv"]
	  },
	  "video/x-m4v": {
	    "source": "apache",
	    "extensions": ["m4v"]
	  },
	  "video/x-matroska": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["mkv","mk3d","mks"]
	  },
	  "video/x-mng": {
	    "source": "apache",
	    "extensions": ["mng"]
	  },
	  "video/x-ms-asf": {
	    "source": "apache",
	    "extensions": ["asf","asx"]
	  },
	  "video/x-ms-vob": {
	    "source": "apache",
	    "extensions": ["vob"]
	  },
	  "video/x-ms-wm": {
	    "source": "apache",
	    "extensions": ["wm"]
	  },
	  "video/x-ms-wmv": {
	    "source": "apache",
	    "compressible": false,
	    "extensions": ["wmv"]
	  },
	  "video/x-ms-wmx": {
	    "source": "apache",
	    "extensions": ["wmx"]
	  },
	  "video/x-ms-wvx": {
	    "source": "apache",
	    "extensions": ["wvx"]
	  },
	  "video/x-msvideo": {
	    "source": "apache",
	    "extensions": ["avi"]
	  },
	  "video/x-sgi-movie": {
	    "source": "apache",
	    "extensions": ["movie"]
	  },
	  "video/x-smv": {
	    "source": "apache",
	    "extensions": ["smv"]
	  },
	  "x-conference/x-cooltalk": {
	    "source": "apache",
	    "extensions": ["ice"]
	  },
	  "x-shader/x-fragment": {
	    "compressible": true
	  },
	  "x-shader/x-vertex": {
	    "compressible": true
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map